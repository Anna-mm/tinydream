{"Asset":{"96lbhg2727xvizve":{"_id":"96lbhg2727xvizve","source":"source/img/HK1.jpg","mtime":1411390066000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK1.jpg","path":"img/HK1.jpg"},"ftxinrdmc9aj4jls":{"_id":"ftxinrdmc9aj4jls","source":"source/img/HK2.jpg","mtime":1411390033000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK2.jpg","path":"img/HK2.jpg"},"zozyo8eskl92nghe":{"_id":"zozyo8eskl92nghe","source":"source/img/HK3.jpg","mtime":1411390058000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK3.jpg","path":"img/HK3.jpg"},"8nbbguxe9bvy5qki":{"_id":"8nbbguxe9bvy5qki","source":"source/img/HK4.jpg","mtime":1411390046000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK4.jpg","path":"img/HK4.jpg"},"rp8tx8rm5t8c59a9":{"_id":"rp8tx8rm5t8c59a9","source":"source/img/HK5.jpg","mtime":1411390059000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK5.jpg","path":"img/HK5.jpg"},"nnltnrxlrtvlshqa":{"_id":"nnltnrxlrtvlshqa","source":"source/img/HK6.jpg","mtime":1411390030000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK6.jpg","path":"img/HK6.jpg"},"wznjd7ye39h1aagd":{"_id":"wznjd7ye39h1aagd","source":"source/img/HK7.jpg","mtime":1411390055000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/HK7.jpg","path":"img/HK7.jpg"},"mi0ro8am64usmpjz":{"_id":"mi0ro8am64usmpjz","source":"source/img/collapse1.jpg","mtime":1411985441000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/collapse1.jpg","path":"img/collapse1.jpg"},"dhcxu6ba3o4ljz96":{"_id":"dhcxu6ba3o4ljz96","source":"source/img/collapse12.png","mtime":1411390025000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/collapse12.png","path":"img/collapse12.png"},"yulpqqjivv7qihij":{"_id":"yulpqqjivv7qihij","source":"source/img/collapse2.jpg","mtime":1411991944000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/collapse2.jpg","path":"img/collapse2.jpg"},"zzbh3susgkptxgil":{"_id":"zzbh3susgkptxgil","source":"source/img/crossdomain1.png","mtime":1411389941000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/crossdomain1.png","path":"img/crossdomain1.png"},"3gt5zitq49nw8nfc":{"_id":"3gt5zitq49nw8nfc","source":"source/img/crossdomain2.png","mtime":1411389941000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/crossdomain2.png","path":"img/crossdomain2.png"},"3p9yynccc1nfcrsa":{"_id":"3p9yynccc1nfcrsa","source":"source/img/favicon.ico","mtime":1411705490000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/favicon.ico","path":"img/favicon.ico"},"uf3gbmrbrubap1vt":{"_id":"uf3gbmrbrubap1vt","source":"source/img/ffExtension1.png","mtime":1411389993000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ffExtension1.png","path":"img/ffExtension1.png"},"ete15zunmpobn9jn":{"_id":"ete15zunmpobn9jn","source":"source/img/ffExtension2.jpg","mtime":1411389996000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ffExtension2.jpg","path":"img/ffExtension2.jpg"},"kxuiz99wm96cud8b":{"_id":"kxuiz99wm96cud8b","source":"source/img/ffExtension3.png","mtime":1411389980000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ffExtension3.png","path":"img/ffExtension3.png"},"bno2qx43o508ps5o":{"_id":"bno2qx43o508ps5o","source":"source/img/ffExtension4.png","mtime":1411389973000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ffExtension4.png","path":"img/ffExtension4.png"},"lgpwiudcr9wambey":{"_id":"lgpwiudcr9wambey","source":"source/img/ffExtension5.png","mtime":1411389990000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ffExtension5.png","path":"img/ffExtension5.png"},"gzr7ylt8qo9p44y7":{"_id":"gzr7ylt8qo9p44y7","source":"source/img/h5specs.png","mtime":1393657030000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/h5specs.png","path":"img/h5specs.png"},"9e9kosgvn80ntg9t":{"_id":"9e9kosgvn80ntg9t","source":"source/img/hover1.png","mtime":1412851490000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/hover1.png","path":"img/hover1.png"},"bjeljv4g0uyhggxt":{"_id":"bjeljv4g0uyhggxt","source":"source/img/hover2.png","mtime":1412851499000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/hover2.png","path":"img/hover2.png"},"w8uby76vlpy5raku":{"_id":"w8uby76vlpy5raku","source":"source/img/ie11.png","mtime":1412506698000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie11.png","path":"img/ie11.png"},"rhzvy9b2l18ehazh":{"_id":"rhzvy9b2l18ehazh","source":"source/img/ie6bug11.png","mtime":1412844448000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug11.png","path":"img/ie6bug11.png"},"zmd05eu78sy1quyd":{"_id":"zmd05eu78sy1quyd","source":"source/img/ie6bug12.png","mtime":1412844458000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug12.png","path":"img/ie6bug12.png"},"aan47oy1m6knuxhb":{"_id":"aan47oy1m6knuxhb","source":"source/img/ie6bug21.png","mtime":1412842681000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug21.png","path":"img/ie6bug21.png"},"z7k6qofg4yg4xbm8":{"_id":"z7k6qofg4yg4xbm8","source":"source/img/ie6bug22.png","mtime":1412842691000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug22.png","path":"img/ie6bug22.png"},"kcvput9gkqg81cbz":{"_id":"kcvput9gkqg81cbz","source":"source/img/ie6bug31.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug31.png","path":"img/ie6bug31.png"},"otnic0aj8yh9cgpd":{"_id":"otnic0aj8yh9cgpd","source":"source/img/ie6bug32.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug32.png","path":"img/ie6bug32.png"},"djxs7r4r2p3brazr":{"_id":"djxs7r4r2p3brazr","source":"source/img/ie6bug33.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug33.png","path":"img/ie6bug33.png"},"zzuzu76kxlo2j9vp":{"_id":"zzuzu76kxlo2j9vp","source":"source/img/ie6bug34.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug34.png","path":"img/ie6bug34.png"},"jbrfbtogfudtv8m6":{"_id":"jbrfbtogfudtv8m6","source":"source/img/ie6bug35.png","mtime":1412838631000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug35.png","path":"img/ie6bug35.png"},"0qy7bez12nn743p2":{"_id":"0qy7bez12nn743p2","source":"source/img/ie6bug41.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug41.png","path":"img/ie6bug41.png"},"h990wwi6q7m8bezx":{"_id":"h990wwi6q7m8bezx","source":"source/img/ie6bug42.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug42.png","path":"img/ie6bug42.png"},"ae46kltcftaixgh9":{"_id":"ae46kltcftaixgh9","source":"source/img/ie6bug43.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug43.png","path":"img/ie6bug43.png"},"es6k31cxhvpj069u":{"_id":"es6k31cxhvpj069u","source":"source/img/ie6bug61.png","mtime":1412848921000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug61.png","path":"img/ie6bug61.png"},"sj1w805t52bfsc3m":{"_id":"sj1w805t52bfsc3m","source":"source/img/ie6bug62.png","mtime":1321362180000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug62.png","path":"img/ie6bug62.png"},"x2xv95sg2mre8c6o":{"_id":"x2xv95sg2mre8c6o","source":"source/img/ie6bug71.png","mtime":1412845925000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/ie6bug71.png","path":"img/ie6bug71.png"},"z09bclvsza2fxle8":{"_id":"z09bclvsza2fxle8","source":"source/img/jsevent1.png","mtime":1413120680000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jsevent1.png","path":"img/jsevent1.png"},"rn59orxia7vp1uo2":{"_id":"rn59orxia7vp1uo2","source":"source/img/jsevent2.png","mtime":1413128181000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jsevent2.png","path":"img/jsevent2.png"},"ulugsuz96lkbcsd8":{"_id":"ulugsuz96lkbcsd8","source":"source/img/jsevent3.png","mtime":1413197494000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jsevent3.png","path":"img/jsevent3.png"},"5v6zgjkgmldtl5zi":{"_id":"5v6zgjkgmldtl5zi","source":"source/img/jslint1.png","mtime":1411390014000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jslint1.png","path":"img/jslint1.png"},"qqpxge1mtb9pxiuq":{"_id":"qqpxge1mtb9pxiuq","source":"source/img/jslint2.png","mtime":1411390003000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jslint2.png","path":"img/jslint2.png"},"tr5jj55x8m1arnlk":{"_id":"tr5jj55x8m1arnlk","source":"source/img/jslint3.png","mtime":1411390000000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jslint3.png","path":"img/jslint3.png"},"1p3ug8hptl0lxpsk":{"_id":"1p3ug8hptl0lxpsk","source":"source/img/jslint4.png","mtime":1411390002000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jslint4.png","path":"img/jslint4.png"},"f8ohuvs1qgq57ola":{"_id":"f8ohuvs1qgq57ola","source":"source/img/marquee1.png","mtime":1411389940000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee1.png","path":"img/marquee1.png"},"ehut0t6e4gc7e0r1":{"_id":"ehut0t6e4gc7e0r1","source":"source/img/marquee2.png","mtime":1411389939000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee2.png","path":"img/marquee2.png"},"5m28cefn48s35iur":{"_id":"5m28cefn48s35iur","source":"source/img/marquee3.png","mtime":1411389942000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee3.png","path":"img/marquee3.png"},"rjr74glsnqv58hsr":{"_id":"rjr74glsnqv58hsr","source":"source/img/marquee4.png","mtime":1411389938000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee4.png","path":"img/marquee4.png"},"zl9r1gf3an5m9t48":{"_id":"zl9r1gf3an5m9t48","source":"source/img/marquee5.png","mtime":1411389943000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee5.png","path":"img/marquee5.png"},"uou95lexydmltjta":{"_id":"uou95lexydmltjta","source":"source/img/marquee6.png","mtime":1411389941000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/marquee6.png","path":"img/marquee6.png"},"scu51gj9dkfrf7ef":{"_id":"scu51gj9dkfrf7ef","source":"source/img/pageTransition1.png","mtime":1411389963000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition1.png","path":"img/pageTransition1.png"},"1u1pqxyouewcr0ja":{"_id":"1u1pqxyouewcr0ja","source":"source/img/pageTransition2.png","mtime":1411389961000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition2.png","path":"img/pageTransition2.png"},"s3espeolt5bghz3n":{"_id":"s3espeolt5bghz3n","source":"source/img/pageTransition3.png","mtime":1411389965000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition3.png","path":"img/pageTransition3.png"},"xa8xmww8d3pa72sg":{"_id":"xa8xmww8d3pa72sg","source":"source/img/pageTransition4.png","mtime":1411389967000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition4.png","path":"img/pageTransition4.png"},"qpul7ouqatjm3977":{"_id":"qpul7ouqatjm3977","source":"source/img/pageTransition5.png","mtime":1411389968000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition5.png","path":"img/pageTransition5.png"},"o3qxl7r15eg609ee":{"_id":"o3qxl7r15eg609ee","source":"source/img/pageTransition6.png","mtime":1411389960000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition6.png","path":"img/pageTransition6.png"},"tq091lpqw6xn2uni":{"_id":"tq091lpqw6xn2uni","source":"source/img/pageTransition7.png","mtime":1411389965000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/pageTransition7.png","path":"img/pageTransition7.png"},"e6m74toctdm7833v":{"_id":"e6m74toctdm7833v","source":"source/img/prototype1.png","mtime":1411389966000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/prototype1.png","path":"img/prototype1.png"},"c2ha3xkvv6c74ksn":{"_id":"c2ha3xkvv6c74ksn","source":"source/img/prototype2.png","mtime":1411389960000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/prototype2.png","path":"img/prototype2.png"},"3ewgn73wz91yw5nm":{"_id":"3ewgn73wz91yw5nm","source":"source/img/safaricode.png","mtime":1412512523000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/safaricode.png","path":"img/safaricode.png"},"f9qoh8fm21metq78":{"_id":"f9qoh8fm21metq78","source":"source/img/scrollfix1.png","mtime":1411389939000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/scrollfix1.png","path":"img/scrollfix1.png"},"na91amzmell3h8a5":{"_id":"na91amzmell3h8a5","source":"source/img/scrollfix2.png","mtime":1411389939000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/scrollfix2.png","path":"img/scrollfix2.png"},"ag3l57horti511r1":{"_id":"ag3l57horti511r1","source":"source/img/scrollfix3.png","mtime":1411389937000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/scrollfix3.png","path":"img/scrollfix3.png"},"zifvgk6w0m96t30i":{"_id":"zifvgk6w0m96t30i","source":"source/img/scrollfix4.png","mtime":1411389935000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/scrollfix4.png","path":"img/scrollfix4.png"},"qnq2dzpo43wwwhll":{"_id":"qnq2dzpo43wwwhll","source":"source/img/snowflake.png","mtime":1411389945000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/snowflake.png","path":"img/snowflake.png"},"zazfj2gjlqs97buh":{"_id":"zazfj2gjlqs97buh","source":"source/img/strjoin.png","mtime":1412834820000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/strjoin.png","path":"img/strjoin.png"},"capj7a09cruec1rc":{"_id":"capj7a09cruec1rc","source":"source/img/triangle1.png","mtime":1322301014000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle1.png","path":"img/triangle1.png"},"xeqfkwpmuzxbmpnz":{"_id":"xeqfkwpmuzxbmpnz","source":"source/img/triangle2.png","mtime":1322300864000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle2.png","path":"img/triangle2.png"},"77rhkzyrf4jzd40r":{"_id":"77rhkzyrf4jzd40r","source":"source/img/triangle3.jpg","mtime":1322300892000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle3.jpg","path":"img/triangle3.jpg"},"nlhl3jef64ikyjcz":{"_id":"nlhl3jef64ikyjcz","source":"source/img/triangle4.jpg","mtime":1322300904000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle4.jpg","path":"img/triangle4.jpg"},"uwajr46ocomhm0e6":{"_id":"uwajr46ocomhm0e6","source":"source/img/triangle5.png","mtime":1322300924000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle5.png","path":"img/triangle5.png"},"vtyh0pyfreih5fem":{"_id":"vtyh0pyfreih5fem","source":"source/img/triangle6.png","mtime":1322300938000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/triangle6.png","path":"img/triangle6.png"},"9zbtzql43efdnvpg":{"_id":"9zbtzql43efdnvpg","source":"source/img/webmap1.png","mtime":1411389998000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/webmap1.png","path":"img/webmap1.png"},"5re86f5pv56w58kg":{"_id":"5re86f5pv56w58kg","source":"source/img/webmap2.png","mtime":1411390011000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/webmap2.png","path":"img/webmap2.png"},"mwl1pa99cii2nedy":{"_id":"mwl1pa99cii2nedy","source":"source/img/webmap3.png","mtime":1411390020000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/webmap3.png","path":"img/webmap3.png"},"oesydfyasf74tm5g":{"_id":"oesydfyasf74tm5g","source":"source/img/webmap4.png","mtime":1411390001000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/webmap4.png","path":"img/webmap4.png"},"2r5cv9jjhcjzbbv0":{"_id":"2r5cv9jjhcjzbbv0","source":"source/img/webmap5.png","mtime":1411389999000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/webmap5.png","path":"img/webmap5.png"},"5jgyier29e4h5a3r":{"_id":"5jgyier29e4h5a3r","source":"source/img/websql.png","mtime":1411390005000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/websql.png","path":"img/websql.png"},"zijbkxyi2rphjk7b":{"_id":"zijbkxyi2rphjk7b","source":"source/img/websql1.png","mtime":1412507874000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/websql1.png","path":"img/websql1.png"},"14ybj26ltyuarbww":{"_id":"14ybj26ltyuarbww","source":"source/img/yahooTech1.jpg","mtime":1411389958000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/yahooTech1.jpg","path":"img/yahooTech1.jpg"},"xv8s22057jufxy13":{"_id":"xv8s22057jufxy13","source":"source/img/yahooTech2.png","mtime":1411389954000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/yahooTech2.png","path":"img/yahooTech2.png"},"x77b9gdsgtz479ek":{"_id":"x77b9gdsgtz479ek","source":"source/img/yahooTech3.jpg","mtime":1411390019000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/yahooTech3.jpg","path":"img/yahooTech3.jpg"},"4v8exbm8cim5rs0h":{"_id":"4v8exbm8cim5rs0h","source":"source/img/yahooTech4.jpg","mtime":1411390016000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/yahooTech4.jpg","path":"img/yahooTech4.jpg"},"vw7uh4zb7qnnrmhi":{"_id":"vw7uh4zb7qnnrmhi","source":"themes/jade-barebone/source/stylesheets/app.less","mtime":1411704531000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/themes/jade-barebone/source/stylesheets/app.less","path":"stylesheets/app.less"},"wd39vdez3978jrol":{"_id":"wd39vdez3978jrol","source":"source/img/jsevent4.png","mtime":1413199432000,"modified":false,"full_source":"/Users/ajiao/workspace/hexo/source/img/jsevent4.png","path":"img/jsevent4.png"}},"Cache":{"2rv2zrgbgasl5xz9":{"_id":"2rv2zrgbgasl5xz9","content":"title: 关于\ndate: 2014-10-09 09:22:36\ntags:\n---\n枫桥，\n处女座，\n前端开发工程师，\n立方网，\n西安电子科技大学，\n看腻了文字，[想听听声音](http://www.lizhi.fm/#/934251)`^_^^_^`\n<ajiao5198@163.com>\n\n","mtime":1412820986000,"source":"source/about.md"},"h0p1wxgoug7sf42r":{"_id":"h0p1wxgoug7sf42r","content":"title: CSS3中文本自动换行的样式说明\ndate: 2011-12-22 21:31:00\ntags: CSS3 文本换行\n---\n浏览器本身都自带着让文本自动换行的功能，会让文本在浏览器或div元素的右端自动实现换行。\n默认换行规则：\n① 对于西方文字，在半角空格或连字符的地方换行。\n② 对于中文，可以在任意一个中文字后换行（除非这个文字后面是标点符号，这样通常将标点符号以及它前面的一个文字作为一个整体来统一换行）。\n\n在CSS3中，有两个属性涉及自动换行的处理：\n###1、word-break属性：\n\n<table><tr><td width=\"20%\">值</td><td width=\"20%\">换行规则</td><td width=\"20%\">IE5以上版本</td><td width=\"25%\">Safari3与chrome6</td><td width=\"15%\">FF（待补充）</td></tr><tr><td>normal</td><td>默认换行规则</td><td>支持</td><td>支持</td><td></td></tr><tr><td>keep-all</td><td>只能半角空格、连字符处换行<br/>中文之间不能换行</td><td>支持</td><td>不支持</td><td></td></tr><tr><td>break-all</td><td>允许在单词内换行</td><td>支持<br/>不允许标点符号在行首</td><td>支持<br/>允许标点符号在行首</td><td></td></tr>\n</table>\n\n\n个人实践中，这个属性很少使用。通过以上说明可以看出，keep-all中文之间不能换行，没有想到会在什么情况下有这种需求。break-all允许在单词内换行，这种体验实在不敢恭维。\n\n###2、word-wrap属性：让长单词和URL自动换行\n\n对于西方文字来说，浏览器在半角空格或连字符的地方进行换行。因此，浏览器不能给较长的单词自动换行。当浏览器窗口比较窄的时候，文字会超出浏览器的窗口，底部会出现横向滚动条，让用户通过拖动滚动条来查看全部文字。这种体验很不好。\n\nword-wrap属性值：\nnormal采用默认规则。\nbreak-word在长单词内部换行。如24位的用户名设置成这样WWWWWWWWWWWWWWWWWWWWWWWW，就必须用break-word了。（此种情况下是否可以使用word-break：break-all？）\n\n**补充一下字号和宽度的关系：**\n例如用户名的设置规则是24个字符，一个汉字占两个字符，字体均为Microsoft Yahei。\n① 12个汉字在12px的情况下宽度为144px\n② 24个字符iiiiiiiiiiiiiiiiiiiiiiii 12px的情况下宽度为76px\n③ 24个字符WWWWWWWWWWWWWWWWWWWWWWWW 12px的情况下宽度为293，宋体下是144px。\n貌似也没什么关系。\n\n","mtime":1411913091000,"source":"source/_posts/css-wordbreak.md"},"tmrlg1mexa99slea":{"_id":"tmrlg1mexa99slea","content":"title: Firefox扩展开发实战\ndate: 2012-12-28 21:06:21\ntags: 扩展 插件 浏览器\n---\n\n说到Firefox插件，大家耳熟能详的就是救广大前端开发者于水火之中的firebug，虽然后来风头已逝被chrome下的调试工具甩出了几条街，我这样的老粉丝也转移了战场，但是并不影响它在我们前进道路上立下的汗马功劳。那你有没有想看一看firebug的源码？有没有想自己开发一个浏览器插件。（准确地说，应该叫扩展。还比如web developer、Alexa、Fiddler、YSlow，而插件指的是其他公司如Adobe、苹果在firefox以外构建的，如shockwave flash、silverlight）\n\n好，如果你是win7，揭开firebug神秘面纱的时刻到了。\n通过命令行%APPDATA%\\Mozilla\\Firefox\\Profiles打开文件，见下图：\n\n![Firefox扩展](/img/ffExtension1.png)\n\n上半部分是当前浏览器已安装的扩展，而下图就是firebug的所在位置，将xpi后缀改为zip解压后即可查看源代码。\n\n对于开发firebug这样高达上的扩展，我们暂时望尘莫及。开发微博助手、任务工具等使用者也很小众，之前用过一个网易的比价工具到是还不错，不过后来也不用了。那实际工作中我们可以做些什么小工具呢?\n\n###1、 栅格系统\n\n网页设计中流行的栅格系统，是运用固定的格子设计版面布局，风格工整简洁。其原理图如下：\n![Firefox扩展](/img/ffExtension2.jpg)\n实现的效果图如下：\n![Firefox扩展](/img/ffExtension3.png)\n\n栅格系统提供两种预设50X20、60X30，还可以自定义规格。\n第一个参数为栅格列的宽度（不包含沟槽）。\n第二个参数为沟槽（guster）的宽度。\n\n###2、 发布商品\n\n立方商城上线后，合作商家大部分早已进驻淘宝，需要将商品重新发到立方商城。发布商品就是从淘宝商品详情页抓取数据包括标题、图片、价格等信息发布到立方商城以减少人工操作。效果图如下：\n![Firefox扩展](/img/ffExtension4.png)\n\n###3、 自动化测试\n\n前端测试大部分依托于浏览器，显示是否良好、页面加载速度如何、热点区域探查。下图左侧显示了用户点击发布按钮到时间轴看到发布结果所用时间，由于不是单页面的加载时间而是页面跳转过程中所经历的时间，所以以浏览器插件的形式测试更为准确。这俨然可以成为一套用户体验系统。\n\n![Firefox扩展](/img/ffExtension5.png)\n\n\n","mtime":1411823765000,"source":"source/_posts/ff-extension.md"},"gd6duyzgbq2kb30v":{"_id":"gd6duyzgbq2kb30v","content":"title: HTML5移动开发中菜单如何左右折叠\ndate: 2014-03-29 13:02:33\ntags: collapse html5 bootstrap\n---\n\n最近的工作都转移到移动开发中，针对主站www.l99.com开发一套移动端版本，像之前写的《webapp立方没体诞生之初》、《单页应用中页面转场的实现》都是针对此项目。\n\n借此谈谈对原生APP和HTML5 WEBAPP的看法，关于各有千秋、根据项目需求的说法谁都会说，不能否认的是，HTML5在一段时间内无法与原生APP抗衡，在用户体验、速度、流量上都只能望其项背。但其表现出来的优势也越来越显著，无需审核、无需安装、跨平台（不需开发iphone和android两中版本）。在之前的PC时代，不也是安装各种管理信息系统、杀毒软件、音乐播放工具、输入法等等，而现在越来越倾向于访问网站、在线收听、云服务。这是一个趋势，但是需要多长时间达到成熟的状态还未可知。毕竟Facebook在2012年期间舍弃原本实行的HTML5架构，转而打造原生APP。不过，你可以看到这个趋势的推进，ios7的safari增加了隐藏地址栏和底部导航的功能，使WEBAPP拥有了与原生APP同样的空间。\n\n\n从开发角度来看，webapp和浏览器依然扮演着同PC端相同的角色，一个负责布局样式功能的代码实现，一个负责解析渲染和交互，这些都只停留在单个页面内，一个url访问一个页面，点击链接跳转到另一页面。而对于页面间的布局和转场还鲜有涉及，没有系统或浏览器接口可供调用。要想达到原生app的体验效果，需要类似一种中间层的解决方案。其实这应该是HTML5持续推进的方向，它增加了`<section`>`<article`>`<video`>`<audio`>等各种语义化的标签，为什么没有增加`<page`>?这个标签一出现将会改变单一页面的格局，一个页面可能拥有多个page，并定义多个page的切换效果，浏览器就去实现吧。开发人员就又轻松了。好吧，这些都是意淫，话说回来，现在什么都没有，还是得自己开发呀。今天说说菜单如何左右折叠，效果嘛，原生APP中处处可见。这种把导航菜单折叠后隐藏起来的信息组织方式几乎成了原生APP的设计范式。\n\n![facebook](/img/collapse1.jpg)\nfacebook中菜单折叠\n\n####bootstrap中有没有此项功能:\nbootsrap是webapp的开发利器，它通过在html上设置自定义属性定制出常见的页面布局和效果，最近的项目也是在bootstrap基础上开发的，所以顺便查找bootstrap是否支持此项功能。事实上，其官网上[http://v3.bootcss.com/javascript/#collapse](http://v3.bootcss.com/javascript/#collapse)提供了collapse插件，垂直方面上可以折叠和展开。通过调试器能够看出其大体实现原理：\n1、默认情况下折叠：每个导航包括标题和内容两部分，内容默认隐藏：display：none；height：0；\n2、点击某个导航：给内容增加动画样式 addClass(\".collapsing\")\n\t\t.collapsing{height:0;-webkit-transition:height .35s ease;}\n\t同时获取内容高度并设置高度，内容将按照动画样式用时0.35s以慢快慢的速度完成高度从0到指定值的过程。动画完成后删除此样式。\n\n实际上，是CSS3流畅地完成了需要显示的内容的高度变化，将其下方内容挤走。那如何转移为横向的折叠呢？\n\n####只有垂直折叠，如何横行折叠\nbootstrap的官网实例中没有横向折叠，但是网上也能搜索出利用bootstrap的某个版本（链接地址到github）或者变种（链接到twitter）能够实现横向折叠。如果项目中已经引用了不同的版本或是自定义版本，为了一个效果便替换了新的版本是不可取的，花时间去研究两个版本的不同也不值得，尤其是自定义版本，既然选择了自定义就意味着你得了解它的代码，能够随时添加或修改。实现上也比较简单，可以自己做些修改：\n\n![实例图](/img/collapse2.jpg)\n\n\n\t.viewport {\n\t    overflow: hidden; //使页面占满屏幕避免出现横向滚动条\n\t}\n\t.viewport .frame {\n\t  width: 200%;  //一唱\n\t  height: auto;\n\t}\n\t\n\t.viewport .frame .menu {\n\t  height: auto;\t\n\t}\n\t.viewport .frame .menu.collapse {\n\t  float: left;\n\t  height: 100% !important;\n\t  width: auto; \n\t}\n\t\n\t//折叠状态：设置宽度动画，初始宽度为0\n\t.viewport .frame .menu.collapse.width {\n\t   position: relative;\n\t  width:0;\n\t  overflow: hidden;\n\t  -webkit-transition: width 0.35s ease;\n\t  -moz-transition: width 0.35s ease;\n\t  -o-transition: width 0.35s ease;\n\t  transition: width 0.35s ease; \n\t}\n\t//展开状态：动画结束宽度无250px\n\t.viewport .frame .menu.collapse.widthauto{\n\t\twidth:250px;\n\t}\n\t\n\t//左侧导航内容\n\t.viewport .frame .menu .collapse-inner {\n\t  position: relative;\n\t  width: 250px;\n\t  height: 100%; \n\t}\n\t//右侧内容即屏幕中心内容\n\t.viewport .frame .view {\n\t  float:left; \n\t  width:50%;   //一和：外层容器为200%，内层为50%，一唱一和正好是原始大小100%。\n\t  height: auto; \n\t  overflow: hidden; \n\t  box-shadow:0 -12px 15px #999;\n\t  min-height: 400px;\n\t}\n\n这是实例演示了如何实现左侧折叠，具体可见demo（还未添加链接），那如何实现左右侧双向折叠呢？设置300%和33.3333333%吗？且听下回分解。\n\n","mtime":1411992423000,"source":"source/_posts/h5-collapse.md"},"0d1rfqop8ndl4ynr":{"_id":"0d1rfqop8ndl4ynr","content":"title: 单页应用中页面转场的实现\ndate: 2014-02-06 15:42:46\ntags: jquery mobile SAP 转场动画\n---\n在上上篇文章《webapp立方没体诞生之初》中提到，移动框架只使用了Boostrap，但后来迫于页面转场效果，自定义build了jquery mobile的Animated page Transitions部分功能，60多k的代码也让人唏嘘。于是，剖析源码，尝试简化。\n\n![页面转场](/img/pageTransition1.png)\n\n在看源码之前思考一下自己如何实现：\n1. 页面切换效果：如何让上一个页面移开，让下个页面进入\n2. 当上个页面的滚动条向下滚动一段距离后，如何平滑地移动到下个页面的顶部。\n3. 浏览器中如何回退？\n\n###一、 页面初始化和事件绑定\n**HTML：**\n\n\t\t<div data-role=\"page\" id=\"page_content\" class=\"\">\n\t\t    ......\n\t\t    <a class=\"p_notes left\" href=\"#page_notes\" data-transition=\"slide\">8条回应</a>\n\t\t\t......\n\t\t</div>\n\t\t<div data-role=\"page\" id=\"page_notes\" class=\"lst_notescontainer\">\n\t\t    ......\n\t\t</div>\n**Jquery.mobile.custom.js：**\n\n![页面转场](/img/pageTransition2.png)\n\n页面初始化中主要做了以下事情，暂不涉及hash存储：\n1. 记录所有pages对象(含有data-role=\"page\"的DOM)；\n2. 将第一个page设为当前page；\n3. 让当前page入场。\n\n代码简化如下：\n\n\tvar PageTransition = (function() {\n\t    var $pages; //记录所有page对象\n\t    var pageArray = []; //记录所有pageId\n\t    return {\n\t        init: function(){\n\t            $pages = $(\"*[data-role='page']\");\n\t            $(\"body\").addClass(\"ui-mobile\");\n\t            for(var i = 0; i < $pages.length; i++){\n\t                pageArray.push($pages.eq(i).attr(\"id\"));\n\t                //标记首个page为当前活动page\n\t                if(i == 0){\n\t                    $pages.eq(i).addClass(\"ui-page-active\");\n\t                }\n\t            }\n\t        }\n\t}\n\t}());\n\n页面初始化完成后，向锚点绑定事件来完成页面转场：\n![页面转场](/img/pageTransition3.png)\n那这个神秘的changePage方法是如何实现的?\n\n###二、页面转场的外衣\n\n辗转经历各种call之后进入change方法，别以为这就登堂入室了，还要一层层剥开迷雾~~\n![页面转场](/img/pageTransition4.png)\n对_cssTransition望文生义，难道是CSS3的transition实现的？那岂不是对上下页add或remove 相应动画的class即可。耶！确实如此，不过还得耐得性子读一读这像老太太裹脚布一样的代码~~~\n\n###三、页面转场的核心代码\n\n![页面转场](/img/pageTransition5.png)\n\n**CSS:**\n\n\t@-webkit-keyframes slideinfromright {\n\t    from {-webkit-transform: translate3d(100%, 0, 0);}\n\t    to {-webkit-transform: translate3d(0, 0, 0);}\n\t}\n\n\t@-webkit-keyframes slideouttoleft {\n\t    from {-webkit-transform: translate3d(0, 0, 0);}\n\t    to {-webkit-transform: translate3d(-100%, 0, 0);}\n\t}\n\t.slide.out,.slide.in {\n\t    -webkit-animation-timing-function: ease-out;\n\t    -webkit-animation-duration: 350ms;\n\t    -moz-animation-timing-function: ease-out;\n\t    -moz-animation-duration: 350ms;\n\t    animation-timing-function: ease-out;\n\t    animation-duration: 350ms;\n\t}\n\t.slide.in {\n\t    -webkit-transform: translate3d(0, 0, 0);\n\t    -webkit-animation-name: slideinfromright;\n\t    -moz-transform: translateX(0);\n\t    -moz-animation-name: slideinfromright;\n\t    transform: translateX(0);\n\t    animation-name: slideinfromright;\n\t}\n\t.slide.out {\n\t    -webkit-transform: translate3d(-100%, 0, 0);\n\t    -webkit-animation-name: slideouttoleft;\n\t    -moz-transform: translateX(-100%);\n\t    -moz-animation-name: slideouttoleft;\n\t    transform: translateX(-100%);\n\t    animation-name: slideouttoleft;\n\t}\n\t.ui-page-pre-in {\n\t    opacity: 0;\n\t}\n\t.ui-page-active {\n\t    display: block;\n\t    overflow: visible;\n\t    overflow-x: hidden;\n\t}\n不得不用文字描述一下这个过程，尽管繁琐得要命。\n![页面转场](/img/pageTransition6.png)\n\n上图为控制台输出，翻译后意思是：\n1：下页藏到最后面（z-index=-10）\n2：下页显示又隐藏（display:block && opacity=0）\n3：下页不用藏到最后面了，原来在哪就在哪\n4：下页显示，开始入场\n5：当前页离场\n6：动画完成后当前页成为了上页隐藏、并移除动画样式\n7：动画完成后下页成为了当前页移除动画样式。\n真是搞不懂1、2、3在墨迹啥。\n\n自行实现后代码如下：\n![页面转场](/img/pageTransition7.png)\n文章开头提出了三个问题，至此才说清楚一个。真是想得太远，走得太慢啦。Zepto.js号称是jquery mobile的简化版，有时间再看看它是怎么实现的吧！","mtime":1411805395000,"source":"source/_posts/h5-pagetransition.md"},"maq89nqczjza3na4":{"_id":"maq89nqczjza3na4","content":"title: 移动端浏览器下页面制作规范\ndate: 2014-03-01 21:47:27\ntags: h5 webapp iPhone Android viewport media query \n---\n##要求：\n兼容各种分辨率下的iPhone和Android设备。\n##要点：\n###1. 视口viewport\n头部声明与其他页面一致，使用HTML5的写法<!DOCTYPE html>，但需要在head中增加一行：\n\n\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n\n此处width不要固定宽度，不要后端传值，使用设备宽度即可，并且不允许缩放，以避免页面出现横向滚动条。\n\n###2. 尺寸设置\n一般情况下，设计师提供的是适配iphone尺寸的设计图，通常为640*960，但是iPhone4+在解析网页的时候依旧把自己当作一台横向分辨率为320px的设备，所以针对设计图中标识的横向尺寸按比例缩小，纵向尺寸不变，字体大小减小到2/3，背景图按比例缩小，背景图不能拼接。 尽量不使用固定宽度，使用百分比无法除尽时可以精确到小数点后七位，基本保证无误差。若使用固定宽度，请放在媒体查询中：\n\n\t@media screen and (min-width: 320px){}\n\t@media screen and (min-width: 480px){}\n\t@media screen and (min-width: 640px){}\n\n注意使用min-width，而不是min -device-width。\n\n###3. 从桌面端向下设计VS从移动端向上设计\n注意媒体查询的顺序。\n从桌面端向下设计：\n\n\t@media screen and (min-width: 640px){}\n\t@media screen and (max-width: 640px){}\n\t@media screen and (max-width: 480px){}\n\t@media screen and (max-width: 320px){}\n\n从移动端向上设计：\n\n\t@media screen and (min-width: 320px){}\n\t@media screen and (min-width: 480px){}\n\t@media screen and (min-width: 640px){}\n\n推荐使用**从移动端向上设计**，所需的CSS代码更少，代码结构更加清晰。\n\n###4. 浏览器模拟测试\n测试时Chrome的UA配置如下：\n\n![移动APP制作规范](/img/h5specs.png)\n\n###5. 改变盒模型\n标准盒模型下width属性只是内容的宽度，在响应式设计中大部分width均为百分比，如果再设置padding和border会导致内容溢出或换行，所以通常在CSS顶级样式中加入：\n\n\t*, *:before, *:after {-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}，\n\n使width属性包含padding和border。\n###6. 手机端测试\n①可将静态页面放置本地目录下:\n\n\tC:\\Program Files (x86)\\Apache Software Foundation\\Apache2.2\\htdocs\n打开手机浏览器访问：\n\t\n\thttp://192.168.50.241/m/cbs-download.html(本机ip+项目目录)\n②若访问本地java项目如lifeix-web中的页面，可手动修改手机上的HTTP代理，服务器为本机ip，端口为80，打开手机浏览器通过域名访问。\n\n针对简单的APP下载页面，了解以上内容即可。","mtime":1412863243000,"source":"source/_posts/h5-specs.md"},"nuwzh0jynu8pbsxu":{"_id":"nuwzh0jynu8pbsxu","content":"title: webapp立方没体诞生之初\ndate: 2014-01-08 16:18:31\ntags: 响应式 webapp\n---\n随着移动设备特别是智能手机的普及，移动应用的市场越发火爆。原生应用以优秀的离线能力、客户端能力（能方便使用手机上的各种终端能力）、高性能、流畅的动画效果大受用户青睐，但仍存在多个系统上的开发、发布、下载使用等瓶颈。而webapp正是为了解决这些不足，同时满足长尾用户的需求。\n\n###1. 准备工作\n在试水立方没体之前，拿登录页面做过实验，在基本不改变设计的情况对web页面结构进行简化或隐藏，注意是对同一套代码进行响应式实现，可想而知，这种方式的结果就如同粗放地减枝，效果不好。当时一直犹豫不决地是使用响应式（兼容各种PC、移动设备）还是为移动设备专门做一套页面结构？显然，前者是完美的，后者是现实的。接着研究了知乎和qzone，恰巧知乎使用的是“完美”方案，而qq空间使用的“现实”方案。鉴于立方网复杂的页面设计，选择后者更明智。\n\n###2. 选择移动框架\n网上关于各种移动框架比较的资料很多，sencha Touch 和jquery mobile的大哥地位是毋庸置疑的、但是动辄就是一二百KB让人心中滴血啊，所以更倾向于小巧的框架，方便整合和自开发。Bootstrap号称风格简洁清新，是CSS框架+jquery组件的组合，正好适合我们以jquery为基础的框架结构。\n\n立方没体的瀑布式布局使用的是我们自开发插件，不需要依赖于其他框架。只借用Bootstrap的CSS部分即可。后来确实遇到了需要借助其他框架的情况，比如单页技术中的页面切换效果。考虑到时间和技术细节，直接使用了jquery mobile的Animated page Transitions部分功能。\n\n立方没体的webapp v1.0版本已经上线，大体思路是借助各种移动框架（基本都支持自定义build）的特定功能整合成适合我们的方案，如果时间充足的话，也可以将用到的功能再简化、抽离或重写，形成立方的前端框架。\n\n###3. 一半开发、一半设计\n不知是不幸还是万幸——没有设计师参与。只是在参考了pinterest、百度、网易，再融入立方设计后，尝试了N套样式，纠结得四分五裂，待某人一拍板“不需要，就这样”之后，才如释重负。立方没体的定位是自媒体，为了保证手机端良好的阅读体验，在字体、字号、间距、行距、圆角、阴影等方面的比较推敲花了很多功夫。\n\n###4. 一半开发、一半数据\n用户的访问量是项目持续推进的一大动力，常常在迭代上线之初微涨，过几天又稳落，促使我不停地考虑如何推进，如何保持增势，这种数据导向的优势就是让人自High，自娱自乐。截止目前，移动端访问量占桌面+移动总访问量的19.2%，而20天前是12.01%（其实，桌面web前端也是我负责的，这不是用我的矛戳我的盾嘛）。当然这个数据不可避免得搭乘了移动访问普遍增速的大船。\n\n至此没有涉及具体代码实现，也没有发现什么技术难点。重要还是设计、创意、体验、细节。\n附：手机浏览器访问[www.l99.com/media](http://www.l99.com/media),欢迎吐槽\n\n\n","mtime":1411806068000,"source":"source/_posts/h5-webapp.md"},"jff3rir2uho5zaav":{"_id":"jff3rir2uho5zaav","content":"title: IE6兼容性专题二——消失的绝对定位\ndate: 2011-11-10 16:11:25\ntags: IE6 兼容 绝对 定位 消失\n---\n这是【个人设置】里选择精灵的页面，直接上图啦!\n\nFF下效果：\n\n![ie6bug](/img/ie6bug21.png)\n\nIE6下效果：\n\n![ie6bug](/img/ie6bug22.png)\n\n赶快找不同啊~~除了弹出层的位置稍稍偏移之外，最重要的右上角【关闭】按钮不见啦。\n\n结构代码：\n\n\t<div class=\"spirit_popbox\" style=\"width:900px; \">\n\t\t<div style=\"width:44px; float:left;\"><!--前一个--></div>\n\t\t<div style=\"width:810px; float:left;\"><!--精灵列表--></div>\n\t\t<div style=\"width:44px; float:left;\"><!--后一个--></div>\n\t\t<div><!--解决方案--></div>\n\t\t<a style=\"position:absolute; right:5px; top:5px; background:url('#')\" href=\"javascript:void(0)\">\n\t\t\t<!--关闭-->\n\t\t</a>\n\t</div>\n\n行内元素没有设置为块状显示？透明度？z-index？JS处理过？使用文字代替图片？a标签换成div？统统看不见。\n\n终于找到一个不成道理的道理：相对定位（或绝对定位）里的绝对定位挨着浮动元素的时候，而且浮动元素宽度之和等于父元素，或者比父元素少2px的情况下，都会出现绝对等位的元素消失！这个恰恰少了2px。\n\n**解决办法：在浮动元素后加入空层！**\n","mtime":1412843150000,"source":"source/_posts/ie6bug2.md"},"9jx4aleps3yvntsx":{"_id":"9jx4aleps3yvntsx","content":"title: IE6兼容性专题四——div元素不能覆盖select元素\ndate: 2011-11-15 14:14:26\ntags: IE6 兼容 select 划破 iframe\n---\n在IE6下，当div下方有下拉列表框select元素的时候，下拉列表框会划破div显示在div之上，不论z-index设为何值均会出现此问题，可能由于下拉列表控件的弹出式下拉列表的原因导致Z轴高度失控。但是IE6还有一个逻辑，div 无法覆盖select,但是iframe 可以覆盖select，而div可以覆盖iframe。\n\n**所以解决办法就是用Z轴高度更高的Iframe元素，（包裹或）覆盖住下拉列表框控件，使其回到正常的Z轴高度上来！**\n\n举例：发起PK时选择好友的弹出层被select划破\n\n![ie6bug](/img/ie6bug41.png)\n\n结构代码：\n\n\t<!—弹出层-->\n\t<div style=\"width: 525px; \" id=\"friend_pop_wrap\">\n\t\t<!—弹出层内容省略-->\n\t\t<!—用于覆盖背后层的select元素-->\n\t\t<iframe class=\"fixCrossIframe\" frameborder=\"0\"></iframe>\n\t</div>\n\n在弹出层的直接子元素中加入iframe，并设置样式为：\n\n\t.fixCrossIframe{\n\t\tposition:absolute;\n\t\ttop:-10px;/*考虑到10px的边框设置起始位置为-10px*/\n\t\tleft:-10px;\n\t\twidth:545px;/*如果父元素显式定义了width和height，并且没有border，可简单写为100%\n\t\theight:565px;\n\t\tz-index:-1;/ *-1保证iframe显示在div下方*/\n\t\tborder:none; /*去掉iframe的默认边框,无法去掉ie6下左上3D边框，在html中加入frameborder=0*/\n\t}\n\n据之前的描述，可使用iframe包裹或覆盖select元素，刚才使用的是覆盖的方法。我们再看网上介绍的包裹的方法\n\n\t<iframe style=\"z-index:1\" id=”fixIframe”> \n\t\tPK时间：\n\t\t<select name=\"challenge.chaTime\">\n\t\t\t<option value=\"1\">一天</option>\n\t\t\t<option value=\"2\">二天</option>\n\t\t\t<option value=\"3\">三天</option>\n\t\t</select>\n\t</iframe>\n\nIframe中不允许直接写入HTML元素，会被吃掉（通过firebug可以看到iframe中的body中没有任何内容）。所以采用JS动态设置iframe的内容，代码如下:\n\n\twindow.open(\"\",\"fixIframe\",\"\")\n\tfixIframe.document.write('PK时间：'+ \n\t\t'<select name=\"challenge.chaTime\">'+\n\t\t'<option value=\"1\">一天</option>'+\n\t\t'<option value=\"2\">二天</option>'+\n\t\t'<option value=\"3\">三天</option>'+\n\t\t'</select>');\n\n实践证明，这种方案并没有解决问题。\n\n那么干脆引入带有select的网页。下图是引入淘宝首页，定位到右侧的“淘宝旅行”。\n\n![ie6bug](/img/ie6bug42.png)\n\n点击选择好友，弹出层仍然覆盖不了select元素。\n\n![ie6bug](/img/ie6bug43.png)\n\n至此证明此方案无效。确实是个人尝试后的结果，如有问题，欢迎指正。","mtime":1412836056000,"source":"source/_posts/ie6bug4.md"},"7rrmhrg86oxzrki2":{"_id":"7rrmhrg86oxzrki2","content":"title: IE6兼容性专题三——经典的内容复制bug\ndate: 2011-11-12 14:33:32\ntags: IE6 兼容 莫名其妙 变态\n---\n\n##举例1: IE6注释bug\n几个相连的浮动元素中间插入一段html注释代码，就会将最后一个容器中的最后几个字符复制到容器之外显示出来。俗称“IE6注释bug”。如果添加更多条的注释，会继续余出更多字符。\n\n![内容复制bug](/img/ie6bug31.png)\n\n结构代码\n\n\t<div class=\"left\">浮动元素1</div>\n\t<div class=\"left\">浮动元素2</div><!--注释-->\n\t<div class=\"left\">浮动元素3</div>\n\t<div class=\"left\">浮动元素4</div>\n\n解决方案：去掉注释语句。\n\n##举例2：流浪在外的“应”\n\n图1：\n![内容复制bug](/img/ie6bug32.png)\n\n图2：\n![内容复制bug](/img/ie6bug33.png)\n\n图3：\n![内容复制bug](/img/ie6bug34.png)\n\n图1结构代码：\n\n\t<div class=\"tml_postcontrol\" style=”float:right; width:300px;”>\n\t\t<input type=\"image\" alt=\"如果您喜欢这条飞鸽，请点亮这颗心。\" class=”right ml15” src=”#” />\n\t \t<a href=\"#\" class=”right ml15”>回复</a>\n\t \t<a href=\"#\" class=”right ml15”>重飞</a>\n\t \t<a href=\"#\" class=”right ml15”>收藏</a>\n\t \t<a href=\"#\" class=”right ml15”>\n\t \t\t<span class=”right”>0条回应</span>\n\t \t</a>\n\t</div>\n\n为了方便分析，特别给每个部分加上边框。可以看到，图1多出了一个莫名其妙的“应”，并且不属于任何一个部分。图2少了一项内容，显示正常。图3增加了一项内容，多出来两个字“回应”。\n\n解决方案1：**由于每个部分都是右浮动，很容易想到可能是没有设置width引起的，尽管图中对没有width的浮动元素的宽度渲染的很好，尽管图2也没有width仍然显示正常。但是，给“回应”的标签设置`{_width:100px;}`的确解决了问题。**\n\n解决方案2：**“0条回应”外有和两层标签，而且都是右浮动。这个结构很有意思，它会导致每增加一个浮动项目都会多出来一个字。删掉或的右浮动可以解决。或者在任意个右浮动项目中外套div(除`<span>`外)。**\n\n##举例3：多出一行的”立方偷袭”\n\n![内容复制bug](/img/ie6bug35.png)\n\n结构代码：\n\n\t<div>\n\t\t<a href=\"#\" class=”left”>第九维<a>\n\t\t<a href=\"#\" class=”left”>头像买卖<a>\n\t\t<a href=\"#\" class=”left”>礼尚往来<a>\n\t\t<a href=\"#\" class=”left”>立方PK<a>\n\t\t<a href=\"#\" class=”left”>心理测试<a>\n\t\t<a href=\"#\" class=”left” style=”margin-right:-3px;”>立方偷袭<a>\n\t</div>\n\n解决方案：在最后一个浮动元素中添加负边距样式。\n\n结语：无语，莫名其妙，变态\n\n\n","mtime":1412838759000,"source":"source/_posts/ie6bug3.md"},"n4zprpbiijz2oyxh":{"_id":"n4zprpbiijz2oyxh","content":"title: IE6兼容性专题一——z-index\ndate: 2011-10-10 16:31:21\ntags: 绝对 相对 定位 IE6 兼容\n---\n##z-index\n设置一个定位元素沿 z 轴的位置，z轴为垂直延伸到显示区的轴。我们可以想象从眼睛处向屏幕作一条垂直线，即为Z轴。z-index设置了元素的堆叠顺序，值越大就离用户更近，反之离用户更远。\n\n1. z-index只对定位元素（设置position:relative/absolute/fixed）有效。\n2. 正常情况下同级元素后者居上，父子之间子大于父。\n3. 在IE下缺省值为0，FF下缺省为auto。\n4. 对于定位元素，非同级关系或非父子关系元素之间比较大小，须要回溯到其为兄弟关系的两个祖先元素上，先比较这两个元素的z-index值，值大的元素所有的后代元素，均超过值小的元素及其后代元素。\n\n举例：结构代码\n\n\t<div class=” father1” style=”z-index:1”></div>\n\t<div class=” father2”>\n\t\t<div class=”son2” style=”z-index:5”></div>\n\t</div>\n\nFF下效果（希望看到的）：\n\n![ie6bug](/img/ie6bug11.png)\n \n\nIE6下效果（不希望看到的）：\n\n![ie6bug](/img/ie6bug12.png)\n\n分析：\n根据④，son2与father1比较，就要先比较father1和father2的z-index。\n根据③，IE6下father2的缺省值为0，那么father2及其所有后代元素都不可能位于father1上。而FF下，father2的缺省值为auto，可以理解为“随便，不关我事”，没有严格的层级制度，son2就位于了father1之上。\n\n解决方案：给Father2设置z-index大于等于1的值即可。\n\n","mtime":1412844772000,"source":"source/_posts/ie6bug1.md"},"y9wu8wsxo8qfeirn":{"_id":"y9wu8wsxo8qfeirn","content":"title: IE6兼容性专题六——PNG图片的处理\ndate: 2011-11-18 16:55:29\ntags: IE6 兼容 setTimeout setInterval 延迟\n---\n最近一直在做IE6的兼容，毕竟14.3%的用户是怎么都无法忽略的。而在IE6下网站的丑恶之源就是PNG图片的蓝色背景。尝试了如下解决方案：\n\n##一、CSS解决\n\n背景图片可以通过加入如下CSS解决：\n\n\t.png_filter{\n\t\tbackground:url(../img/layer.png) 0 0 no-repeat;\n\t\t_background:none;\n\t\t_filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=scale, src=\"img/layer.png\");\n\t}\n\n如果是图片的话，仍然需要JS来解决。\n\n##二、JS解决\n\n这个相对简单，引入一个外部的JS：DD_belatedPNG_0.0.8a-min.js\n在内部JS中加入代码：`DD_belatedPNG.fix('.fixpng')`;\nJS将会对所有class为fixpng的图片或背景图片进行处理，可惜这也不是完美的方案。\n\n缺点一：JS是对所有页面加载完成的图片进行处理，如果图片本来设置了width或height需要进行缩放，js处理完成之后就变成了原始大小。以前指定的width或height失效。重新设置大小不起作用。\n\n针对这个问题，要么就是图片不缩放，显示原始大小（IE6下的登录页飞出效果就是这样做的）。要么就是不进行透明处理（加入unfixpng样式，在JS中过滤掉）。\n\n缺点二：实际效果仍然可以用丑陋来形容。\n\n![ie6透明图片](/img/ie6bug61.png)\n\n用户最先看到的是左图，1s-5s后看到的是右图。就好像一个丑女在大家面前化妆，化成一个美女，说：我就是这样变漂亮的。分明是一大忌讳嘛。\n\n三、PNG图片本身\n\n带着这些疑问看看同行们是怎么做到的。用IE6打开点点和人人，从开始到加载完成完全没有蓝色背景，看不出任何CSS或JS处理的痕迹，滴水不漏呀。从人人上找一张PNG图片保存到本地，同样保存一张我们的图片，新建一个静态文件在IE6下显示它们。\n\n![ie6透明图片](/img/ie6bug62.png)\n\n左边是人人网的home_icon.png,完全没有蓝色背景。右侧是我们的timeline_icon_content.png。对点点的图片也做了这样的比较，结果是一样的。它们到底在PNG图片上做了什么处理呢？如果能解决了这个问题，我们就不用加入更多的CSS或JS，让缓慢的IE6雪上加霜了。\n\n解决：png图片保存为索引模式。\n","mtime":1412850436000,"source":"source/_posts/ie6bug6.md"},"bwplkpuwtz9xpmx5":{"_id":"bwplkpuwtz9xpmx5","content":"title: IE6兼容性专题五——正确使用return false\ndate: 2011-11-17 22:16:24\ntags:\n---\n在IE6下，进入个人时空的照片列表，点击“删除”，确认后页面没有反应。\n\n\t<a class=\"photo_list_delete\" href=\"javascript:void(0);\">删除</a>\n\t<form id=\"photoform\" method=\"post\" action=\"http://www.l99.com/EditPicture_deletePicture.action\">\n\t\t......\n\t</form>\n\n\t$(\".photo_list_delete\").bind(\"click\", function(){\n\t\tif(confirm('确认删除?')){\n\t\t\t$(\"#photoform\").submit();\n\t\t\treturn false;//解决方案\n\t\t}\n\t});\n\n分析：执行submit语句后，继续执行href指定的跳转。尽管它并没有指定地址，void是一个操作符，会计算一个表达式，但不会返回值，void(0)就等于0，意思是不进行任何操作。所以IE6停住，不进行跳转，但照片已经删除了。 \n\n方案一：加入return false，阻止默认的事件行为。\n方案二：改为href=”#”,但页面也会回到顶部（注：”#”等同于#top,回到顶部，相当于浏览器中输入地址回车后的操作。）或者去掉默认事件，`href=\"javascript:void(0);\"`，但需要额外加入样式`{cursor:pointer;}`，并且页面也会滚到起始位置。这种方案不采用。\n\n正确使用return false，以下内容总结自[http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/](http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/)\n\nreturn false实际上做了三件事情：\n  1. `event.preventDefault();（或window.event.returnValue=false）`\n  2. `sevent.stopPropagation();（或window.event.cancelBubble=true）`\n  3. 停止执行立即返回\n\n我们本想只阻止默认事件，但是它又额外地阻止了冒泡，并且立即返回了。举例说明这种用法可能出现的问题：\n\t\n\t<div class=\"post\">\n\t\t<h2><a href=\"/path/to/page\">My Page</a></h2>\n\t\t<div class=\"content\">\n\t\t\tTeaser text...\n\t\t</div>\n\t</div>\n\t<div class=\"post\">\n\t\t<h2><a href=\"/path/to/other_page\">My Other Page</a></h2>\n\t\t<div class=\"content\">\n\t\t\tTeaser text...\n\t\t</div>\n\t</div>\n\n要求点击某一篇文章标题的时候，将内容加载到当前的“div.content”中。\n\n\t$(\"div.post h2 a\").click(function () {\n    \tvar a = $(this),\n        \thref = a.attr('href') ;\n        \tcontent  = a.parent().next();\n\t\tcontent.load(href + \" #content\");\n\t\treturn false;\n\t});\n\n至此一切顺利，如果我们继续要求加载内容之后，当前的div.post要增加样式.active,于是写道：\n\n\tvar posts = $(\"div.post\");\n\tposts.click(function(){\n\t    posts.removeClass(\"active\");\n\t    $(this).addClass(\"active\");\n\t});\n\n这样就能正常work了么？不！这个click事件将不会被触发，因为a的click事件已经阻止了冒泡。如果加入live事件，情况将会变得更复杂。\n\n总结：当我们确保在正确的位置上阻止默认事件和冒泡事件时可以使用return false，不要滥用避免出现问题。那最开始讲到的问题，有第三种完美版解决方案就是在IE6下直接阻止默认事件，\n\t\n\twindow.event.returnValue = false;\n","mtime":1412849333000,"source":"source/_posts/ie6bug5.md"},"co89iv7ko605buz9":{"_id":"co89iv7ko605buz9","content":"title: IE6兼容性专题七——0ms延迟\ndate: 2011-11-20 17:00:20\ntags: IE6 兼容 setTimeout setInterval 延迟\n---\n\n在IE6下处理透明图片后，“回到顶部”不见了。尝试着延迟处理确实可以解决问题，可是事实上不需要延迟，那就干脆0ms延迟吧，也同样达到目的。网上搜索之后才发现这已经成为js处理的“潜规则”之一了，也一度成为解决了很多前端疑难杂症的法宝，准确地说，不是0ms，而是16ms延迟。\n\n>setTimeout的存在会导致CPU中断调度，如果两个中断之间时间太短会导致CPU性能消耗很高，同时影响能耗。于是微软和英特公司为了解决这个问题，就约定每个中断之间的间隔是15.6ms（64 fps）所以就是我们常见的约等于16ms的间隔，不过随着web的要求不断增加，大家对这个要求希望是放宽的态度，于是在高端浏览器，这个性能被提升了4倍左右，所以在chrome，IE10等浏览器，setTimeout的间隔缩短到了 4ms（250 fps）。\n\n以下是透明图片处理的公用方法：\n\n\t//给所有PNG图片加上样式”fixpng”\n\t$(\"img[src$='.png'],img[src$='.PNG']\").not($(\"#unfixpng\")).addClass(\"fixpng\");\n\n\tsetTimeout(function(){\n\t\t//遍历所有div、a标签，当其有背景图片且背景图片为PNG图片时加上样式”fixpng”\n\t\t$(\"div,a\").each(function(){\n\t\t\tvar b = $(this).css(\"background-image\");\n\t\t\tif(b!=undefined && /.png|.PNG/.test(b)){\n\t\t\t\t$(this).addClass(\"fixpng\");\n\t\t\t}\n\t\t})\n\t},0)\n\n另外一个用到此方法的实例是：礼尚往来，点击我收到的礼物，选择全选后，选中框不见了。\n\n![ie6bug](/img/ie6bug71.png)\n\n代码结构：\n\n\t<a class=\"all_button\" href=\"javascript:void(0);\" id=\"present_check_mark\">全选</a>\n\n样式：\n\n\t.all_button {\n\t    background: url(\"/skin/message/images/all_nochecked.png\") no-repeat scroll right center transparent;\n\t}\t\n\nCheckbox框是一张背景图。当点击之后，更换为另外一张选中后的背景图。\nJS代码：\n\n\tjQuery.fn.extend({\n\t\t\t//全选/全不选\n\t\t\tchooseAll:function(){\n\t\t\t\treturn this.click(function(){\n\t\t\t\t\tvar chooseFlag = $(this).hasClass(\"all_checked\");\n\t\t\t\t\tif(chooseFlag){\n\t\t\t\t\t\t$(this).removeClass(\"all_checked\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\t$(this).addClass(\"all_checked\");\n\t\t}\t\t\t\t\t\t\t\t $(\"input[type='checkbox'][name='presentIds']\").each(function(){\n\t\t\t\t\t\t$(this).attr(\"checked\", !chooseFlag);\n\t\t\t\t\t});\n\t\t\t\t});\n\t});\n\n这个bug很不容易再现，它不是每次点击都消失，而且一旦checkbox出现再也不消失了。除非你关闭浏览器再重新打开，相当恶心。调试发现，如果在加入样式”all_checked”前随便alert个什么东西，问题就解决了。所以就想到了\n\n\tvar that = $(this);\n\tsetTimeout(function(){\n\t\tthat.addClass(\"all_checked\");\n\t},0);\n\n不过，还要注意一点，setTimeout中的this指向的是window，不再是单击的事件源了，要先将$(this)保存一下。\n\n总结：\n1. 正常情况下javascript都是按照顺序执行的。但是我们可能让该语句后面的语句执行完再执行本身，这时就可以用到setTimeout延时0ms来实现了。\n2. 在事件中，setTimeout 会在其完成当前任何延宕事件的事件处理器的执行，以及完成文档当前状态更新后，告诉浏览器去启用 setTimeout 内注册的函数。","mtime":1412849483000,"source":"source/_posts/ie6bug7.md"},"452hzudlsi1txjbc":{"_id":"452hzudlsi1txjbc","content":"title: JS压缩方案升级\ndate: 2013-08-29 21:28:59\ntags: JS 压缩 YUI compressor UglifyJS Google closure compiler\n---\n##1、现状\n\n使用javascript Obfuscator压缩。\n缺点：手动执行、界面操作。\n目的：选择更方便的压缩工具，支持脚本处理。\n\n##2、备选方案\n\n方案一：YUI compressor。\n简称YC，L06 JS代码经Obfuscator压缩后10.5M，YUI compressor压缩后8.5M，混淆后8.49M。\n\n方案二：Google closure compiler\n简称CC，不仅是一个compressor，YC只做了词法上扫描，CC更是一个compiler。它的高级优化方式提出了各种“激进”的方法破坏代码，达到压缩的目的。如果能掌控它的压缩规则，代码可以压缩至极小。同时也有很强的代码约束和检查。\n\n方案三： UglifyJS\njQuery v1.5已将压缩工具从Google closure compiler切换到UglifyJS，jQuery的青睐使其大红大紫，它的压缩策略比CC更简单安全些。UglifyJS基于node，避免不了安装node、npm、uglifyjs。\n从安全平稳、易实施的角度看，还是使用YUI compressor + ant结合的方式，已更新了测试服务器上的ant脚本，具体参见\n`/root/develop/lifeix_product/build.xml`。\n\n注：混淆压缩后，我们的代码也会变得很屌，一堆a、b、c、d、e、f、g神马的，哇咔咔^_^！\n\n##3、本地使用YUI compressor\n\n###方法一：命令行\n\n\t$ java -jar yuicompressor-x.y.z.jar\n\n用法: `java -jar yuicompressor-x.y.z.jar [options] [input file]`\n下面的命令将压缩myfile.js文件并输出为myfile-min.js (x.y.z 为具体的版本号):\n`java -jar yuicompressor-x.y.z.jar myfile.js -o myfile-min.js`\n\n\tGlobal Options\n\t-h, --help              显示帮助信息\n\t--type <js|css>         指明需要压缩的文件是js还是css。\n\t--charset <charset>     指明需要压缩的文件的 <charset>\n\t--line-break <column>   在指定的列换行\n\t-o <file>               指定输出文件 <file>。默认为标准输出（屏幕）。\n\n\tJavaScript Options\n\t--warn                  打印代码中的错误信息\n\t--nomunge             只压缩，不混淆\n\t--preserve-semi         保留所有分号\n\t--preserve-strings      Do not merge concatenated string literals, Use this option to specify that concatenated string literals should never be merged.\n\n注：命令行也支持批处理，但是据本人实践，只针对同一级目录下的多文件处理，不支持嵌套目录。\n\n###方法二：ant脚本\n与测试服务器的更新脚本相似。\n\n\t<target name=\"compress\"  description=\"Compress\">\n\t\t<echo message =\"begin to compress the js file.\" />\n\t\t<apply executable=\"java\" dest=\"js\" parallel=\"false\" failonerror=\"true\" append=\"false\" force=\"true\">\n\t       <fileset dir=\"js\" includes=\"**/*.js\" />\n\t       <arg line=\"-jar\" />\n\t       <arg path=\"lib/yuicompressor-2.4.6.jar\" />\n\t       <arg line=\"--charset utf-8\" />\n\t       <srcfile />\n\t       <arg line=\"-o\" />\n\t       <mapper type=\"glob\" from=\"*.js\" to=\"*.js\" />\n\t       <targetfile />\n\t\t\t<!--<arg line=\"--nomunge \" />-->\n\t    </apply>\n\t\t<echo message =\"compress the js end.\" />\n\t</target>\n\n注意`dest=\"js\"`、`dir=\"js\"` 、`lib/yuicompressor-2.4.6.jar`是文件相对路径。设置Dest为生成文件的目标路径，设置dir为待处理文件的路径。Arg path为YUI compressor路径。\n\n###方法三：右键压缩\n\n1. 制作批处理文件\n\n\t\t@echo off\n\t\t::设置YUI Compressor启动目录\n\t\tSET YUIFOLDER=D:\\tool\\js_compress\n\t\t::设置你的JS和CSS根目录，脚本会自动按树层次查找和压缩所有的JS \n\t\tSET JSFOLDER=D:\\tool\\js_compress\\js\n\n\t\t::Check Directories.\n\t\tIF NOT EXIST %YUIFOLDER% ECHO Error: Can't find directory \"YUIFOLDER\". \n\t\tIF NOT EXIST %JSFOLDER% ECHO Error: Can't find directory \"JSFOLDER\".\n\n\t\t::Compress.\n\t\tfor /r . %%a in (*.js) do ( \n\t\t\tfor /f \"usebackq tokens=*\" %%i in (\"%%a\") do (\n\t\t\t\tset line = %%i\n\t\t\t\tset \"line = !line:SPEED=wangfj!\"\n\t\t\t)\n\t\t\techo compress %%~a ...\n\t\t\tjava -jar %YUIFOLDER%\\yuicompressor-2.4.6.jar --charset UTF-8 %%~fa -o %%~fa\n\t\t)\n\t\techo compress finished!\n\t\tpause & exit\n\n2. 制作注册表文件\n\n将批处理文件写入右键菜单的“Compress JS using YUI Compressor”。\n\n\tWindows Registry Editor Version 5.00\n\t[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shell]\n\t[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shell\\Compress JS using YUI Compressor]\n\t[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shell\\Compress JS using YUI Compressor\\command]\n\t@=\"D:\\\\tool\\\\js_compress\\\\yuicompressor.bat %1\"\n\n双击此文件导入信息到注册表。\n","mtime":1412862209000,"source":"source/_posts/js-compress.md"},"u8g7niyy9g4989q0":{"_id":"u8g7niyy9g4989q0","content":"title: jQuery事件系统二\ndate: 2014-10-11 18:01:11\ntags: jQuery event 事件 数据缓存 W3C 浏览器\n---\njQuery事件系统并没有将事件监听函数直接绑定到DOM元素上，而是基于数据缓存系统管理监听函数的。举一个简单的栗子看一下何为数据缓存系统：\n\n\t<div class=\"box\">\n\t\t<div class=\"content\"></div>\n\t</div>\n\t<input type=\"button\" name=\"submit\" value=\"click me\" class=\"btn\" />\n\n\t<script type=\"text/javascript\">\n\t\t$(\".box\").click(function(){\n\t\t\tconsole.log(\"box\");\n\t\t})\n\t\t$(\".content\").click(function(){\n\t\t\tconsole.log(\"content click 1\");\n\t\t})\n\t\t$(\".content\").click(function(){\n\t\t\tconsole.log(\"content click 2\");\n\t\t}) \n\t\t$(\".content\").hover(function(){\n\t\t\tconsole.log(\"hover in\");\n\t\t},function(){\n\t\t\tconsole.log(\"hover out\");\n\t\t}) \n\t\t$(\".btn\").click(function(){\n\t\t\tconsole.log(\"btn\");\n\t\t}) \n\t</script>\n\n如上述代码所示，页面上有一对父子元素box、content和一个按钮btn。\n* 父元素box绑定了click事件\n* 子元素content绑定了两个click事件，一个hover事件\n* btn元素绑定了一个click事件。\n\n我们看一下chrome下面打印jQuery.cache是什么情况：\n![jQuery事件系统](/img/jsevent1.png)\n\n由上图所示，\n* jQuery.cache中存储了三个以ID为key值的对象，三个ID是为页面中的box、content、btn元素分配的唯一ID。\n* 每个object中存储了events和handle两个对象。\n* events对象存储了click、mouseout、mouseover三个事件对象，click对象的值是一个存储了两个元素的数组，对应content元素的两个click事件和hover事件。\n* click[0]的数组元素中存储了一个guid，唯一标识事件处理函数的ID，以此类推jQuery.cache[1].events.click[0].guid == 1, jQuery.cache[2].events.click[1].guid == 3；存储了一个type＝“click”；存储了一个事件处理函数handler，参见上图底部，是content元素绑定得第一个click事件的处理函数。\n* 那回到最外层，每个object的直接子元素handle是干什么用的？通过打印的内容可见，其方法体内调用了jQuery.events.dispatch事件。事实上，每个object对象都有一个handle作为入口监听函数，当浏览器触发事件时，入口监听函数被调用，该函数从事件缓存对象events中获取绑定到此元素上的对应的事件处理函数，然后执行。\n\n\n问题来了，jQuery.cache中没有存储任何与页面元素有关的信息，其中的1、2、3是如何对应到DOM元素的？一定在什么地方给DOM元素设置了自定义属性存储了其ID值。\n\n![jQuery事件系统](/img/jsevent2.png)\n\n如上图所示，代码来源于jQuery.event.add方法，给派发函数传递的第一个参数当前的DOM元素已经有一个自定义属性jQueryXXXX==2，接下来寻找何处设置了这个自定义属性。\n\n\tjQuery.event = {\n\n\t\tadd: function( elem, types, handler, data, selector ) {\n\n\t\t\tvar elemData, eventHandle, events,\n\t\t\t\tt, tns, type, namespaces, handleObj,\n\t\t\t\thandleObjIn, handlers, special;\n\n\t\t\t//通过jQuery._data给当前DOM元素设置自定义数据\n\t\t\tif ( elem.nodeType === 3 || ... || !(elemData = jQuery._data( elem )) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t......\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tdata: function( elem, name, data, pvt) {\n\n\t\t\tvar thisCache, ret,\n\t\t\t\tinternalKey = jQuery.expando, //这个自定义属性来自与expando，这是什么东西？？\n\t\t\t\tgetByName = typeof name === \"string\",\n\n\t\t\tif ( !id ) {\n\t\t\t\t// 给DOM元素设置一个unique ID，以获取全局的数据缓存对象中的对应数据\n\t\t\t\tif ( isNode ) {\n\t\t\t\t\telem[ internalKey ] = id = jQuery.deletedIds.pop() || ++jQuery.uuid;\n\t\t\t\t} else {\n\t\t\t\t\tid = internalKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\t......\n\t\t},\n\t\t_data: function( elem, name, data ) {\n\t\t\treturn jQuery.data( elem, name, data, true );\n\t\t},\n\t},\n\n好，我们知道了DOM元素的ID与jQuery.cache中的对象ID是一一对应的，在派发函数dispatch中通过种对应关系就能方便地找到当前DOM元素所绑定的事件从而执行。不过，顺着这个线索也遗留了一些问题，比如jQuery.expando是什么？jQuery.data除了DOM ID还设置了那些属性？事件派发函数中对于子元素的click事件冒泡到父元素是如何处理的？且听下回分解。\n\n","mtime":1413130986000,"source":"source/_posts/js-event2.md"},"p9nauiz4vtfrcncy":{"_id":"p9nauiz4vtfrcncy","content":"title: 跨域请求如何破\ndate: 2013-11-29 16:46:33\ntags: 跨域 jquery跨域\n---\n近日，前端在尝试跨域请求API，接受纯粹的JSON数据，绕过后端大婶们，他们总是这个不能做，那个影响性能。但是，请求一开始就报错，跨域总是这么屌，轻易让你搞定，就不是他的范儿。\n先看一下错误信息：\n\nChrome：Uncaught SyntaxError: Unexpected token :\n\nFirefox：![跨域请求](/img/crossdomain1.png)\n\n代码：\n\n    $.ajax({\n            async: true,\n            url: 'http://dbapi.xy.l99.com/dovebox/pintimes/mediatype',\n            dataType: 'jsonp',\n            data:{media_type: 0, limit: 20},\n            method: \"GET\",\n            error: function (jqXHR, textStatus, errorThrown){\n                  //……;\n            },\n            success: function (data, textStatus, jqXHR) {\n                   //……;\n            }\n    });\n从Firefox的错误信息来看，是数据格式的问题，而返回的JSON数据肯定不存在问题。根据stackoverflow上的说法把dataType从“jsonp”替换成“json”，或在url后面加上callback=?等等都不能解决。我想到的种种错误可能都不是，那肯定是后端的问题了。但是，这个理由是不能拿出去跟后端程序员说的，除非告诉他错误在哪，继续调查下。\n\n我们知道，跨域请求本质上并不是ajax，而是创建了script标签，将请求地址赋给src，因为script标签可以无条件执行，不受限于同源策略。于是，尝试在页面上增加：\n\n    <script type=\"text/javascript\" src=\"http://dbapi.xy.l99.com/dovebox/pintimes/mediatype\" ></script>\n猜猜结果如何？\n\n报了同样的错误信息，不难得知，浏览器加载了这个假的“js文件”，但是执行的时候发现这段代码并不符合js语法，所以报了以上错误。\n\n回到跨域请求的本质上来，后端在返回数据时需要在数据外层包装一个函数，函数名由前端传递，默认是jquery+随机数。包装函数的目的一方面是使其符合js语法，另一方面是将数据以参数形式传递过来，方便获取。除了包装函数，还有其他办法吗？把数据赋给一个变量岂不是更方便？有机会可以再实现一下跨域请求。\n\n那到底是不是后端未处理的原因？我们用fiddler模拟返回数据看看。\n\n    $.ajax({\n            async: true,\n            url: 'http://dbapi.xy.l99.com/dovebox/pintimes/mediatype',\n            dataType: 'jsonp',\n            jsonpCallback: \"aa\", \n            data:{media_type: 0, limit: 20},\n            method: \"GET\",\n            error: function (jqXHR, textStatus, errorThrown){\n                  //……;\n            },\n            success: function (data, textStatus, jqXHR) {\n                   //……;\n            }\n    });\n由于在请求中添加callback=?会导致函数名随机生成，不易控制，所以自定义一个：jsonpCallback: \"aa\",\n\n在fiddler中设置规则，当请求某个URL时，返回本地数据（特别增加了函数包装）。\n\n    aa({\"status\":\"1\",\"code\":\"200\",\"data\":{......}});\n![跨域请求](/img/crossdomain1.png)\n果然，一切搞定。API啊，API，你竟然不支持跨域请求？？？！！！！\n\n最后，我们还是从jquery源码中走一下跨域请求的流程~~\n请求入口：\n\n    transport.send( requestHeaders, done );\n    // requestHeaders :\"{\"Accept\":\"text, text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01\"}\"\n发送请求的本质：\n\n    send: function( _, callback ) {\n        script = document.createElement(\"script\");\n        script.async = true;\n        if ( s.scriptCharset ) {\n            script.charset = s.scriptCharset;\n        }\n        script.src = s.url;\n        // Attach handlers for all browsers\n        script.onload = script.onreadystatechange = function( _, isAbort ) {                    \n            if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n                // Handle memory leak in IE\n                script.onload = script.onreadystatechange = null;\n                // Remove the script\n                if ( script.parentNode ) {\n                    script.parentNode.removeChild( script );\n                }\n                alert(script.innerHTML);\n                // Dereference the script\n                script = null;\n                // Callback if not abort\n                if ( !isAbort ) {\n                    callback( 200, \"success\" );\n                }\n            }\n        };\n        // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n        // Use native DOM manipulation to avoid our domManip AJAX trickery\n        head.insertBefore( script, head.firstChild );\n    }\n执行js代码：\n\n    window[ callbackName ] = function() {\n        responseContainer = arguments;\n    };\n预先注册了window[“aa”] = function(){};当假的js加载后立即执行此函数，将参数保存到变量responseContainer中。然后进入onload回调函数，后续会将responseContainer返回给response对象，以及错误处理等等。\n\n结论：出现文章开头的错误信息，是由于后端没有做跨域处理（这句话是给看了开头直接看结尾的人的）。\n\n","mtime":1411818489000,"source":"source/_posts/js-crossdomain.md"},"1vxfbnu1dl3jasnq":{"_id":"1vxfbnu1dl3jasnq","content":"title: JSLint调研\ndate: 2013-10-16 20:19:00\ntags: JSLint\n---\n\n##1、背景\n\n随着富Web前端应用的出现,JavaScript正越来越流行。JavaScript受欢迎的部分原因是因为它的灵活便捷，可以快速上手。然而，这种灵活性在带来高效的同时，也成为初学或者经验不足的JavaScript开发人员的噩梦。形式各异的代码风格、隐含错误的代码行为，严重影响了整体代码的可读性和稳定性，成为 Web 项目中最为常见问题之一。\n\nJSLint 正是 Douglas Crockford 同学为解决此类问题创建的工具，JSLint 除了能指出这些不合理的约定，还能标出结构方面的问题，有助于发现错误并教会开发人员一些好的编码实践。（Douglas Crockford是 web领域技术权威之一，他是JSON、JSLint、JSMin和ADSafe的创造者）\n\n**同时也保证编码规范能够真正实施起来，避免流于形式。**\n了解JSLint的工作原理[http://www.ibm.com/developerworks/cn/web/1105_linlin_jslint/](http://www.ibm.com/developerworks/cn/web/1105_linlin_jslint/)\n\n##2、在eclipse中安装JSLint\n\nHelp -> Install New Software->add->输入以下地址\n[https://svn.codespot.com/a/eclipselabs.org/mobile-web-development-with-phonegap/tags/jslint4java1/download](https://svn.codespot.com/a/eclipselabs.org/mobile-web-development-with-phonegap/tags/jslint4java1/download) ->OK\n\n![JSLint调研](/img/jslint1.png)\n\n勾选JavaScript Development Tools和jslint4java ->next\n\n![JSLint调研](/img/jslint2.png)\n\n如果遇到这个提示，不用管，点OK。\n安装完成之后会提示重启eclipse，重启之后，进入window->preferences，会看到jslint4java，右侧为默认的检测规则。\n\n![JSLint调研](/img/jslint3.png)\n\n主要的规则如下：\nbitwise 是否禁止使用位运算符\nContinue 是否允许使用continue语句\nDebug 是否允许debug语句\nEvil 是否允许使用eval\nForin for-in声明中的key是否使用hasOwnProperty过滤\nIndent 缩进的空格数，默认为4。\nmaxerr 每个JS文件允许最大的错误数，默认是50。 错误过多时，只返回文件名和错误总数，不返回具体错误。\nMaxlen 每行代码的最大行数。建议80。\nnewcap 是否允许构造函数的首字母不大写。\nnomen 是否允许在名称首部和尾部加下划线\nplusplus 是否允许使用++或--\nregexp 正则中是否允许使用.或者[^…]\nSloppy 是否允许不写编译指示语句“user strict”\nSub 是否允许使用下标获取属性值（一般情况下使用点.）\nTodo 是否允许使用TODO开头的注释。\nUnparam没有被使用的参数是否需要给出warning\nVars 一个function中是否允许多个var声明变量\nWhite 是否需要遵守严格的空格用法\nL06的JS经JSLint默认规则检查后代码警告无数：\n\n![JSLint调研](/img/jslint4.png)\n\n##3、在SVN hook中使用JSLint\n\n更狠的是，可以在SVN服务器上配置相关信息，不符合规范的代码无法提交。\n参考[http://www.amaxus.com/cms-blog/jslint-as-subversion-hook](http://www.amaxus.com/cms-blog/jslint-as-subversion-hook)\n\n##4、使用JSLint代码检查遇到的问题\n\n虽然JSLint的检查规则可以自己设置，但常常某个规则部分可取，部分过于严格。如果要普及开来，需要克服的问题如下：\n\n####1、JSLint要求变量必须先定义后使用。\n当check单个js文件时，会出现大量的“变量未定义”，原因是调用了其他js文件中的变量或方法，需要在当前js的头部预定义变量\n如dashboard_ls.src.js中需要增加如下注释语句：\n/global\nscrollTimelineEvent: true,\nresizeImg: true,\nloadAnimation: true,\nenableAnimation: true,\nshowcontrol: true,\nshowNopost: true,\nImageSourceShow: true,\nDashboardMap: true,\nloadAddrAnalyse: true,\nblockImg:true,\nloadMoreDashboard: true/\n这个规则必须开启。否则真正的”变量未定义”的错误将无法检查出来。\n\n####2、类型转换parseInt()方法必须给出第二个参数，指定进制数。JSLint没有单独针对这个规则的配置，所以无法关闭。\n\n####3、JSLint的空格使用非常严格。\n\n* 调用函数的时候，函数名与左括号之间没有空格\n* 函数名与参数序列之间，没有空格\n* 所有其他语法元素与左括号之间，都有一个空格\n\n如果此规则开启现有代码会有大量的空格问题需要修改。可以关闭，将不对空格做任何检查。\n\n####4、前端代码严重依赖于jquery，jquery很多地方不遵循此规则。\n\n以上是尝试修改L06中几个JS以符合规则过程中发现的问题，仅列出这些，可能不限于此。\n\n","mtime":1411821159000,"source":"source/_posts/js-lint.md"},"eq5o344ivkeh1diw":{"_id":"eq5o344ivkeh1diw","content":"title: jQuery事件系统一\ndate: 2014-10-10 17:16:59\ntags: jQuery event 事件 数据缓存 W3C 浏览器\n---\n说到Javascript事件，脑海中闪现的是最初做简单网页时写个button，注册个onclick事件，就出现了简单的交互。那么onclick，和后续接触到的原生JS中的DOM0、DOM2、addEventListener、attachEvent、jQuery中的bind、live、delegate、on等是什么关系，如何演化的。一个简单的onclick为什么会发展成复杂的jQuery事件系统以及数据缓存系统。今天只是一个引子：\n\n##DOM0级事件系统\n\n\tdocument.getElementById(\"btn\").onclick = function(){\n\t\talert(arguments.length);\n\t}\n\n这是是最简单的绑定事件的方式。再早之前就是元素标签内绑定事件，不推荐这种样式行为混在一起的写法。\n\n优势：\n简单稳定，浏览器兼容；处理事件时，this关键字处理的是当前元素，这很有帮助。\n劣势：\n1、只允许元素每次绑定一个回调，重复绑定会覆盖之前的绑定。\n2、在IE下回调没有参数，在其他浏览器下回调的第一个参数是事件对象。上述代码在IE下弹出0，而在Firefox下弹出1，这个参数就是event对象。\n3、只能在事件冒泡中运行，而非捕获或冒泡。\n\n##DOM2级事件系统\nIE：\n\n\telement.attachEvent(\"on\" + type, callback); //绑定事件\n\telement.detachEvent(\"on\" + type, callback); //解除绑定\n\tdocument.createEventObject(); //创建事件\n\telement.fireEvent(type, event); //派发事件\n\n优势：\n可绑定多个事件，不会覆盖\n劣势：\n1、回调函数中this不是指向被绑定元素，而是window\n2、同种事件绑定多个回调时，回调并不是按照绑定时的顺序依次触发（这还真是头一次听说）\n3、event事件对象仅存在于window.event参数中，其属性与W3C的有很大差异，比如currentTarget\n4、事件必须以onXXX形式，仅IE可用\n5、只支持冒泡\n\nW3C：\n\t\n\telement.addEventListener(type, callback, [phase]); //绑定事件\n\telement.removeEventListener(type, callback, [phase]); //解除绑定\n\telement.createEvent(types); //创建事件\n\tevent.initEvent(); //初始化事件\n\telement.dispatchEvent(event); //派发事件\n\n优势：\n1、同时支持事件处理的捕获和冒泡阶段，事件阶段取决于参数设置\n2、事件处理函数内部，this引用当前元素\n3、事件对象总是可以通过处理函数的第一个参数获取\n4、可以绑定多个事件\n\n劣势：其他标准浏览器的实现也有不一致的地方，比如firefox不支持focusin、focus事件，第三四五个参数的使用，事件成员对象的不稳定，如safari下event.target可能时返回文本节点。\n\n为了兼容浏览器，我们通常会创建一个统一的方法，在方法内部通过特性检测分别调用不用的事件模型。\n\n\t//绑定事件\n\tfunction addEvent(el, type, callback, useCapture){\n\t\tif(el.addEventListener){//W3C方式优先\n\t\t\tel.addEventListener(type, callback, !!useCapture);\n\t\t}\n\t\telse{\n\t\t\tel.attachEvent(\"on\" + type, callback);\n\t\t}\n\t}\n\t//移除事件\n\tfunction removeEvent(el, type, callback, useCapture){\n\t\tif(el.removeEventListener){//W3C方式优先\n\t\t\tel.removeEventListener(type, callback, !!useCapture);\n\t\t}\n\t\telse{\n\t\t\tel.detachEvent(\"on\" + type, callback);\n\t\t}\n\t}\n\t//派发事件\n\tfunction fireEvent(el, type){\n\t\tif(el.createEvent){\n\t\t\tevent = document.createEvent(\"HTMLEvents\");\n\t\t\tevent.initEvent(type, true, true);\n\t\t\tel.dispatchEvent(event);\n\t\t}\n\t\telse{\n\t\t\tevent = document.createEventObject();\n\t\t\tel.fireEvent(\"on\" + type, event);\n\t\t}\n\t}\n\t//延伸\n\t//阻止冒泡的通用函数\n\tfunction stopBubble(e){\n\t\tif(e && e.stopPropagation){ //W3C方式\n\t\t\te.stopPropagation();\n\t\t}\n\t\telse{\n\t\t\twindow.event.cancelBubble = true; //IE\n\t\t}\n\t}\n\t//阻止浏览器默认行为的通用函数\n\tfunction stopDefault(){\n\t\tif(e && e.preventDefault){ //W3C方式\n\t\t\te.preventDefault();\n\t\t}\n\t\tele{\n\t\t\twindow.event.returnValue = false; //IE\n\t\t}\n\t}\n\nfireEvent与调用onClick的区别：\n派发事件fireEvent模拟用户行为触发事件，如触发一个button的onclick事件，如果该button未注册onclick事件也不会报错，并且会引发冒泡，触发其父类中的onclick事件，更贴近用户真实的触发行为。那如果直接调用onclick()呢？如果在未注册onclick事件时调用onclick将会报错“对象不支持此属性或方法”。\n\n##Dean Edward && event.js\n鉴于DOM2级事件系统的缺陷，Dean Edward提出了更完美的解决方案，成为jQuery事件系统的源头，看它是不是长了三头六臂，代码来自[http://dean.edwards.name/weblog/2005/10/add-event/](http://dean.edwards.name/weblog/2005/10/add-event/)\n\n\tfunction addEvent(element, type, handler) {\n\t\t// 为每一个事件处理函数分派一个唯一的ID，方便移除\n\t\tif (!handler.$$guid) handler.$$guid = addEvent.guid++;\n\t\t// 为元素的事件类型创建一个空对象，保存所有类型的回调\n\t\tif (!element.events) element.events = {};\n\t\t// events对象包含多个type/handlers这样的键值对\n\t\tvar handlers = element.events[type];\n\t\tif (!handlers) {\n\t\t\thandlers = element.events[type] = {};\n\t\t\t// 如果元素之前以onXXX的形式绑定过事件，则存储起来\n\t\t\tif (element[\"on\" + type]) {\n\t\t\t\thandlers[0] = element[\"on\" + type];\n\t\t\t}\n\t\t}\n\t\t// 保存当前的事件处理函数\n\t\thandlers[handler.$$guid] = handler;\n\t\t// 指定一个全局的事件处理函数来做所有的工作\n\t\telement[\"on\" + type] = handleEvent;\n\t};\n\t// 事件处理函数ID计数器\n\taddEvent.guid = 1;\n\n\tfunction removeEvent(element, type, handler) {\n\t\t// 从events对象移除当前事件处理函数/函数类型\n\t\tif (element.events && element.events[type]) {\n\t\t\tdelete element.events[type][handler.$$guid];\n\t\t}\n\t};\n\n\t//统一的事件处理函数入口\n\tfunction handleEvent(event) {\n\t\tvar returnValue = true;\n\t\t// 获取原生的事件对象\n\t\tevent = event || fixEvent(window.event);\n\t\t// 从元素的事件对象上获取事件处理函数\n\t\tvar handlers = this.events[event.type];\n\t\t// 遍历执行事件处理函数\n\t\tfor (var i in handlers) {\n\t\t\tthis.$$handleEvent = handlers[i];\n\t\t\tif(this.$$handleEvent(event)===false){\n\t\t\t\treturnValue = false;\n\t\t\t};\n\t\t}\n\t};\n\t//为IE的事件对象做简单的修复\n\tfunction fixEvent(event) {\n\t    //添加标准的W3C方法\n\t    event.preventDefault = fixEvent.preventDefault;\n\t    event.stopPropagation = fixEvent.stopPropagation;\n\t    return event;\n\t};\n\tfixEvent.preventDefault = function() {\n\t    this.returnValue = false;\n\t};\n\tfixEvent.stopPropagation = function() {\n\t    this.cancelBubble = true;\n\t};\n\n特点：\n1、没有对象检测，因为使用最通用的原始的onXXX绑定，不使用addEventListener/attachEvent\n2、保持正确的this指向\n3、传递了正确的event对象\n4、完全跨浏览器包括IE4或NS4\n5、不会引发内存泄漏（使用者发现onXXX在IE存在不可消弭的内存泄漏）\n\njQuery在这个版本基础上吸收了“每个处理函数分配一个unique ID，所有回调放到一个对象上存储”的建议，出现了jQuery的数据缓存系统，同时舍弃了onXXX方式，仍然使用addEventListener/attachEvent绑定事件。\n\n","mtime":1413131380000,"source":"source/_posts/js-event1.md"},"0l8x15qetz0cuvws":{"_id":"0l8x15qetz0cuvws","content":"title: jQuery事件系统三\ndate: 2014-10-13 15:34:49\ntags: jQuery event 事件 数据缓存 W3C 浏览器\n---\n上一节通过给DOM元素添加自定义数据引出jQuery.data这个数据缓存模块，这是数据缓存系统的另一大重头戏，这一节就好好说说jQuery.data。再看jquery源码之前大概大概明确几个要点：\n\n1、jQuery.expando = \"jQuery\" + ( jQuery.fn.jquery + Math.random() )，即jQuery＋版本号＋随机数；\n\n2、jQuery.data方法通过参数的不同，可以有几种用法：为DOM元素或Javascript对象设置任意类型的数据，或返回指定名称的数据，或返回关联的数据缓存对象。\n\n3、数据缓存对象上区分内部数据和自定义数据，避免jQuery内部使用的数据和用户自定义的数据发生冲突。\n方法._data()设置的数据为内部数据，直接存储在关联的数据存储对象上，如事件缓存数据。\n方法.data()设置的数据为自定义数据，存储在关联的数据缓存对象的属性data上；如用户通过data-*自定义数据。\n\n 在上节栗子中设置content元素的自定义属性如下，存储位置如下：\n\n \t$(\".content\").data({\"tagName\":\"div\",\"className\":\"content\"});\n\n ![数据缓存系统](/img/jsevent3.png)\n\n 总结一下：上节中通过jQuery._data设置DOM元素的内部属性，事实上是通过jQuery.data实现的，只是传递pvt参数为true（用于内部属性或自定义属性的标识），在jQuery.cache上顺序挂上key值为1、2、3...依此类推的数据缓存对象。同时设置DOM元素本身的属性elem[ jQuery.expando ] = id；以此来关联数据缓存系统。\n\n ![数据缓存系统](/img/jsevent4.png)\n\n源码如下：\n\n\tjQuery.extend({\n\t\tcache: {},//事件缓存系统\n\t\tdeletedIds: [],\n\t\tuuid: 0,// uuid初始化\n\t\t// 生成类似于jQuery18005268001211807132这样的随机数（），避免与用户的自定义属性名冲突\n\t\texpando: \"jQuery\" + ( jQuery.fn.jquery + Math.random() ).replace( /\\D/g, \"\" ),\n\t\t//jQuery.noData中存放了不支持扩展属性的embed、object、applet元素的节点名称。\n\t\tnoData: {\n\t\t\t\"embed\": true,\n\t\t\t\"object\": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",//用于检查object元素是否是flash\n\t\t\t\"applet\": true\n\t\t},\n\n\t\t//判断一个DOM元素或javascript对象是否有关联的数据\n\t\thasData: function( elem ) {\n\t\t\telem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];\n\t\t\treturn !!elem && !isEmptyDataObject( elem );\n\t\t},\n\n\t\t//为DOM元素或javascript对象设置任何类型的数据\n\t\tdata: function( elem, name, data, pvt /* Internal Use Only */ ) {\n\t\t\t//是否可以附加数据，不可以的话直接返回\n\t\t\tif ( !jQuery.acceptData( elem ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar thisCache, ret,\n\t\t\t\t//jQuery.expando是一个唯一的字符串，jquery对象产生的时候就生成\n\t\t\t\tinternalKey = jQuery.expando,\n\t\t\t\tgetByName = typeof name === \"string\",\n\t\t\t\t// 区分DOM对象和javascript对象，如果是DOM元素，为了避免javascript和DOM元素之间循环引用导致的浏览器（IE6、7）垃圾回收机制不起作用，要把数据存储在全局缓存对象jQuery.cache中；对于Javascript对象，垃圾回收机制自动发生，数据可以之间存储在javascript对象上。\n\t\t\t\tisNode = elem.nodeType,\n\t\t\t\t......\n\t\t\t//如果关联id不存在，则分配一个。\n\t\t\tif ( !id ) {\n\t\t\t\tif ( isNode ) {\n\t\t\t\t\telem[ internalKey ] = id = jQuery.deletedIds.pop() || ++jQuery.uuid;\n\t\t\t\t} else {\n\t\t\t\t\tid = internalKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//如果数据缓存对象不存在，就初始化为空对象\n\t\t\tif ( !cache[ id ] ) {\n\t\t\t\tcache[ id ] = {};\n\t\t\t\t......\n\t\t\t}\n\t\t\t// 如果参数name是对象或函数，则批量设置数据\n\t\t\tif ( typeof name === \"object\" || typeof name === \"function\" ) {\n\t\t\t\tif ( pvt ) {\n\t\t\t\t\tcache[ id ] = jQuery.extend( cache[ id ], name );\n\t\t\t\t} else {\n\t\t\t\t\tcache[ id ].data = jQuery.extend( cache[ id ].data, name );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthisCache = cache[ id ];\n\t\t\t// 如果参数pvt为true，则设置或读取内部数据，内部数据存储在关联的数据存储对象上；\n\t\t\t// 如果参数pvt为false，则设置或读取自定义数据，自定义数据存储在关联的数据缓存对象的属性data上。\n\t\t\tif ( !pvt ) {\n\t\t\t\tif ( !thisCache.data ) {\n\t\t\t\t\tthisCache.data = {};\n\t\t\t\t}\n\t\t\t\tthisCache = thisCache.data;\n\t\t\t}\n\t\t\t//如果参数data不是undefined，则把参数data设置到属性name上。把name统一换成驼峰式。\n\t\t\tif ( data !== undefined ) {\n\t\t\t\tthisCache[ jQuery.camelCase( name ) ] = data;\n\t\t\t}\n\t\t\t// 参数name为字符串，data为null时读取单个数据。两次读取，使用name读取一次，使用驼峰式再读取一次。\n\t\t\tif ( getByName ) {\n\t\t\t\tret = thisCache[ name ];\n\t\t\t\tif ( ret == null ) {\n\t\t\t\t\tret = thisCache[ jQuery.camelCase( name ) ];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//未传入参数name、data、则返回数据缓存对象。\n\t\t\t\tret = thisCache;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\t\t//用于移除通过jQuery.data()设置的数据\n\t\tremoveData: function( elem, name, pvt /* Internal Use Only */ ) {\n\t\t\t......\n\t\t},\n\t\t// 设置或读取内部数据时使用\n\t\t_data: function( elem, name, data ) {\n\t\t\treturn jQuery.data( elem, name, data, true );\n\t\t},\n\t\t// 判断DOM元素是否可以设置数据，通过检查DOM元素的节点名称在对象jQuery.noData中是否存在\n\t\tacceptData: function( elem ) {\n\t\t\tvar noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];\n\t\t\treturn !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n\t\t}\n\t});\n\n本节内容参考《jQuery技术内幕》第五章数据缓存Data","mtime":1413199600000,"source":"source/_posts/js-event3.md"},"uukc96or21cmbg84":{"_id":"uukc96or21cmbg84","content":"title: 老调重弹：那些年一遍又一遍领悟过的原型链\ndate: 2014-02-12 15:22:48\ntags: 原型链 继承\n---\n一过年吃了许多肉，见了许多人，又思考了许多人生大事，中了年后综合症的招，唯恐脑子不再灵光，荒废专业。特意把基础知识再梳理一下：\n\n### 一、简单原型链：构造函数、原型、实例\n\n![简单原型链](/img/prototype1.png)\n这是Nicholas C. Zakas的《Javascript高级程序设计》P120的截图。有一个前端朋友说，他曾经怎么都不理解原型链直到看到此书此章节才如醍醐灌顶。我想，看一遍就领悟恐怕也是神人了。\n\n这张图的重点总结如下：\n1. 只要创建了一个新函数，就为该函数创建一个prototype属性\n2. Prototype属性会自动获得一个constructor属性。\n3. Constructor属性包含快一个指向prototype所在函数的指针。\n4. 可为原型增加其他属性和方法\n5. 创建新实例，其内部包含一个名为protyo (内部属性)的指针指向其构造函数的原型属性。\n\n此外，还有两个特别的方法用来确定其内部关系：\n1. 实例person1、person2与Person原型之间的关系\n\t\talert(Person.prototype.isPrototypeOf(person1));//true\n\t\talert(Person.prototype.isPrototypeOf(person2));//true来自实例本身\n2. 我们知道，如果要读取person1的某个属性，搜索首先从实例本身开始，如果没有会继续搜索原型对象。那么如何知道搜索到的属性是来自实例本身还是原型？\n\t\talert(person1.hasOwnProperty(“name”)) //true来自实例本身\n\n**最后，原型对象有一个问题。**\n原型中所有属性是被很多实例共享的，通过在实例上添加一个同名属性可以隐藏原型中的对应属性。但是如果这个属性是引用属性就有麻烦了。举例如下：\n\n\tfunction Person(){   }\n\tPerson.prototype = {\n\t    constructor:Person,\n\t    name:\"Nicholas\",\n\t    age:29,\n\t    friends:[\"shelby\",\"Court\"],\n\t    sayName:function(){....}\n\t}\n\tvar person1 = new Person();\n\tvar person2 = new Person();\n\tperson1.friends.push(\"Van\");\n\talert(person1.friends);//[\"shelby\",\"Court\",\"Van\"]\n\talert(person2.friends);//[\"shelby\",\"Court\",\"Van\"]\n\talert(person1.friends===person2.friends); //true\n\n原因是friends数组存在于Person.prototype中，不是在person1中。如果是简单属性赋值比如person1.age = 30并不影响Person.prototype.age=29。\n\n###二、继承原型链：\n\n![简单原型链](/img/prototype2.png)\n提示：所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针__proto指向Object.prototype。继承Object这部分未在图中体现。\n下面我们研究继承是怎么实现的？\n\n\tfunction Animal(){\n\t    this.species = “动物”\n\t}\n\tAnimal.prototype = {\n\t    say: function(){\n\t        alert(“I am a ”+ this.species +”,my name is XXX”);\n\t}\n\t}\n\tfunction cat(name,color){\n\t    this.name = name;\n\t    this.color = color;\n\t}\n\n如何使”猫”继承“动物”？继承分两部分，分别是构造函数继承和原型继承。构造函数继承实现了对实例属性的继承，原型实现对原型属性和方法的继承。\n\n####1. 构造函数继承\n\n\t\tfunction cat (name, color){\n\t\t\tAnimal.call(this);\n\t\t\tthis.name = name;\n\t\t\tthis.color = color;\n\t\t}\n\n####2. 原型继承\n\n\t\tCat.prototype = new Animal();\n\t\tCat.prototype.constructor = Cat;\n\t\tvar cat1 = new Cat(“大毛”，“黄色”);\n\t\talert（cat1.species）； //动物\n\n此时，原型继承同时继承了构造函数中不变的属性species。事实上，不变的属性应该写入原型，作为原型属性。\n\n####3. 直接原型继承\n为什么要将Animal的实例作为Cat的原型呢？如果将Animal的原型赋值给Cat的原型如何呢？\n改写Animal对象：\n\n\t\tfunction Animal(){}\n\t\tAnimal.prototype.species = “动物”;\n\t\tCat.prototype = Animal.prototype;\n\t\tCat.prototype.constructor = Cat;\n\t\tvar cat1 = new Cat(“大毛”，“黄色”);\n\t\talert（cat1.species）； //动物\n\n优点：不用执行和建立Animal实例，省内存\n缺点：cat.prototype和animal.prototype都指向同一对象，对cat.prototype的修改都会反映到animal.prototype上。\n\n####4. 对上个方案的改进——利用空对象作中介\n\n\t\tfunction extend(subclass, superclass) {\n\t\t        var F = function () {};\n\t\t        F.prototype = superclass.prototype;\n\t\t        subclass.prototype = new F();\n\t\t        subclass.prototype.constructor = subclass;\n\t\t}\n\n####5. 拷贝继承\n引颖同学曾大力推荐的自创类库中使用的是拷贝继承，将父对象的所有属性和方法拷贝进子对象。\n\n\t\tfunction extend （subclass, superclass）{\n\t\t        Var p = superclass.prototype;\n\t\t        Var c = subclass.prototype;\n\t\t        for(var i in p){\n\t\t            C[i] = p[i]\n\t\t        }\n\t\t}\n","mtime":1411803666000,"source":"source/_posts/js-prototype.md"},"3em469ur0cisautj":{"_id":"3em469ur0cisautj","content":"title: 走向观察者模式\ndate: 2013-11-13 20:01:04\ntags: 设计模式 观察者\n---\n\n我们的JS开发模式基本以JQuery为主导，遍布众多插件式规模较小的js文件。在迭代开发中会遇到这样一种情况，有两个本来相对独立的文件A.js、B.js，此时二者需要通信或相互调用。\n最简单的办法是，在B中添加一个方法someFunc()，在A中需要调用的地方调用B.someFunc()就行了。缺点是耦合性太高了，举个简单的情况，如果B的开发人员认为someFunc命名不太好修改了一下，谁知道A还在使用，还要去A中再改一遍。\n\n\tvar A = {\n\t    funcName:\"A\",\n\t    init:function(){\n\t        …….this.someHappenedHandler();……\n\t    },\n\t    someHappenedHandler:function(){\n\t        B.someFunc();\n\t    },\n\t}\n\tvar B = {\n\t    funcName:\"B\",\n\t    someFunc:function(){\n\t        document.write(\"调用B的someFunc方法\");\n\t    },\n\t    init:function(){\n\t        ……\n\t    }\n\t}\n\tB.init();\n\tA.init();\n那怎么样才能不把someFunc暴露给A呢？这个方法名是由B决定的,由B提前告知并写入A，直到某种情况发生了，A来调用B写入的方法签名？好，尝试一下：\n\n\tvar A = {\n\t    funcName:\"A\",\n\t    listeners:{}, //用于接收B的写入\n\t    init:function(){\n\t        this.someHappenedHandler();\n\t    },\n\t    someHappenedHandler:function(){\n\t        //B.someFunc();\n\t        this.listeners[\"someHappened\"]();\n\t    }           \n\t}\n\tvar B = {\n\t    funcName:\"B\",\n\t    initListeners:function(){\n\t        A.listeners.someHappened = this.someFunc;\n\t    },\n\t    someFunc:function(){\n\t        document.write(\"调用B的someFunc方法\");\n\t    },\n\t    init:function(){\n\t        this.initListeners();\n\t    }\n\t}\n\tB.init();\n\tA.init();\n一切OK，此时A、B之间的耦合为共同约定了一个字符串“someHappened”用于标识监听的事件签名，以及A的内部属性listeners被B修改。\n为了将A的listeners也不暴露出去，可以将上述代码抽象成事件注册、事件处理两个方法。\n\n\tvar A = {\n\t    funcName:\"A\",\n\t    listeners:{},\n\t    init:function(){\n\t        this.someHappenedHandler();\n\t    },\n\t    someHappenedHandler:function(){\n\t        //B.someFunc();\n\t        //this.listeners[\"someHappened\"]();\n\t        this.fireEvent(\"someHappened\");\n\t    }\n\t}\n\tvar B = {\n\t    funcName:\"B\",\n\t    initListeners:function(){\n\t        //A.listeners.someHappened = this.someFunc;\n\t        B.listen(A,\"someHappened\",this.someFunc);\n\t    },\n\t    someFunc:function(){\n\t        document.write(\"调用B的someFunc方法\");\n\t    },\n\t    init:function(){\n\t        this.initListeners();\n\t    }\n\t}\n\tObject.prototype.listen = function(obj,eventName,handler){\n\t    //允许注册同名事件，方法签名保存到数组中\n\t    var arrayHandler = obj.listeners[eventName];\n\t    if(arrayHandler == null)\n\t    {\n\t        arrayHandler = [];\n\t        obj.listeners[eventName] = arrayHandler;\n\t    }\n\t    arrayHandler.push(handler);\n\t}\n\tObject.prototype.fireEvent = function(eventName){\n\t    var arrayHandler = this.listeners[eventName];\n\t    if(arrayHandler == null){\n\t        return;\n\t    }\n\t  //注册同名事件，顺序执行事件处理程序\n\t    for(var i = 0; i < arrayHandler.length; i++)\n\t    {\n\t        arrayHandler [i]();\n\t    }\n\t}\n\tB.init();\n\tA.init();\n是不是很熟悉？这是常见的浏览器事件处理模式——观察者模式（又名发布订阅模式），类同于\n\n\tdocument.getElementById(\"XXX\").addEventListener(\n\t\"click\",function(){\n\t……\n\t},false);\n这种模式的实质是可以对程序中某个对象的状态进行观察，并且在其发生改变时得到通知。\n\n","mtime":1411819450000,"source":"source/_posts/js-observer.md"},"tlzjhkaj517ncme3":{"_id":"tlzjhkaj517ncme3","content":"title: 无缝滚动能有多麻烦\ndate: 2013-11-23 19:49:49\ntags: 无缝滚动 marquee\n---\n实现无缝滚动是前端的必备技能，每次实现也都是小打小闹，这次是在N1、N2、N3的条件下实现，下次在N2、N3、N4的条件下实现，套路大同小异。近期做了个内容动态加载、图文混排的无缝滚动，比以前多了些看点，遂由浅入深，一一道来。\n\n###一、marquee标记\n\n\t<marqueen>标记可以实现文字滚动，但是不能实现无缝滚动。\n\t<marquee direction=left scrollamount=2 onmouseover=\"this.stop();\" \n\tonmouseout=\"this.start();\" width=100 height=100>\n\t    中文为什么就不行\n\t</marquee>\nDirection设置活动字幕的滚动方向，scrollamount设置文字的滚动速度。\nonMouseOut=\"this.start()\" ：用来设置鼠标移出该区域时继续滚动\nonMouseOver=\"this.stop()\"：用来设置鼠标移入该区域时停止滚动\nbehavior设置滚动方式，align设置对齐方式等，属性很多，但是致命伤是不能实现无缝滚动。\n\n###二、JS障眼法\n\n仍然以横向滚动为例，通常情况下，显示范围的宽度肯定小于内容的宽度，才有滚动显示的必要。红色框为内容显示框。为了使滚动文字的首尾相接，要使用两个放有相同内容的div。\n![跨域请求](/img/marquee1.png)\n\n红色框固定不动，每次当第二个div内容滚动到末尾时，要模拟成第一个div滚动到末尾的情况，这样，第二个div就可以无缝跟上。\n![跨域请求](/img/marquee2.png)\n\n模拟成：\n\n![跨域请求](/img/marquee3.png)\n\n结构代码：\n\n\t<div id=\"dvvv\" style=\"overflow:hidden;height:27px;width:100px;\n\t                      border:1px solid red;white-space:nowrap\">\n\t        <div id=\"dvvv1\" style=\"display:inline\">实现文字无缝滚动。</div>\n\t        <div id=\"dvvv2\" style=\"display:inline\"></div>\n\t</div>\nJS代码：\n\n\tvar interval=30;\n\tvar $dvvv = document.getElementById(\"dvvv\");\n\tvar $dvvv1 = document.getElementById(\"dvvv1\");\n\tvar $dvvv2 = document.getElementById(\"dvvv2\");   \n\t//内容复制\n\t$dvvv2.innerHTML = $dvvv1.innerHTM;\n\tfunction Marqpuee(){\n\t    //此时滚动到第二个div的末尾处，100为显示宽度\n\t    if($dvvv.scrollLeft >= 2 * $dvvv1.offsetWidth - 100 ){ \n\t//障眼法来啦！！模拟成第一个div滚到到末尾处。瞬间发生，人眼不太能感受到这种变化\n\t$dvvv.scrollLeft = $dvvv1.offsetWidth - 100;\n\t    }\n\t     else{  \n\t        $dvvv.scrollLeft++;\n\t     }\n\t}\n\tvar MyMar = setInterval(Marqpuee,  interval);\n\n###三、实战\n\n前面都是热身，这时来了一个实时新闻页面，要求向下滚动播放，并不时从后台推送新的战况，如下：\n![跨域请求](/img/marquee4.png)\n\n####1、稍微复杂的图文混排新闻块如何进行DOM拷贝实现障眼法？\n\n假设，页面中固定显示区域为10个block，那初始加载可能为20个block，那如果将20个block都进行DOM拷贝，无疑给页面增大了负荷。那么，我们可以只拷贝前10个block，等待20个block都滚动一遍之后，并没有新的数据载入时，继续滚动这10个拷贝，留出时间让前20个block复位。\n![跨域请求](/img/marquee5.png)\n初始化\n![跨域请求](/img/marquee6.png)\n滚动到拷贝数据，复位\n\n####2、如何在不刷新页面的情况下，显示后台推送的新闻？（前端可以设置定时器，定时请求新数据）\n\n考虑一下，新数据应该插在什么位置？显然，拷贝数据是每一轮滚动结束后才显示，以供原始数据复位，那么新数据应该插在拷贝数据之前。又有新问题了，如果刚好滚动到拷贝数据，那用户肯定能看到新数据的插入，页面就不平滑了。所以插入要寻找时机，插入点一定处于可视区域之外：\n\n\t// scrollNum:底部滚出数\n\t// sum:总数量，包括拷贝数\n\t// visibleNum = bakNum:可视数=拷贝数\n\tif(scrollNum < sum - visibleNum * 2){\n\t    //append html\n\t}\n\telse{\n\t    setTimeout(function(){\n\t            //append html;s\n\t    },marqueeTimer.interval * visibleNum)\n\t}\n当插入点处于可视区域时，等待拷贝数据滚动完成之后再插入。但要考虑拷贝数据滚动完成所需时间内，没有新的数据推送到前端。否则，需要增加缓冲池缓存数据。\n\n####3、每次插入数据后，还要及时修正容器的scrollTop或margin-top，保证不跳动。\n\n","mtime":1411819176000,"source":"source/_posts/js-marquee.md"},"q0kxp394fd2cyf3f":{"_id":"q0kxp394fd2cyf3f","content":"title: <回到顶部>功能该谁做\ndate: 2014-09-03 13:24:37\ntags: 浏览器,回到顶部\n---\n当我用Macbook浏览长网页的时候，拉着拉着就得找<回到顶部>按钮。如果网页没有这个功能，就得自己拖回滚动条。为了更美观不碍眼，滚动条早已在不用的时候就隐藏起来，需要上下移动网页才显示，再将鼠标移动到小窄条上，左右手配合拖回顶部，真费劲。还不如在网页的鼠标右键上增加<回到顶部>的功能，单手操作两次点击即可。不如来个彻底，将<回到顶部>功能交给浏览器来做，顺便做个快捷键，也免得前端开发人员到处搞个<回到顶部>，或者什么时候闲来无事，搞个浏览器插件gotoTop，看看有没有人用。<!--more-->\n\n","mtime":1411712957000,"source":"source/_posts/per-gototop.md"},"yvvuu0fhpavep473":{"_id":"yvvuu0fhpavep473","content":"title: 鸡血三年 累觉不爱\ndate: 2014-06-26 13:40:12\ntags: 立方网 前端 思考 \n---\n猛然间一抬眼，眼睛虚幻得看不清程哥的脸，才意识到自己应该休息，盯着屏幕太久了；\n目不转睛思索问题，突然左耳一阵嗡响，才意识到自己应该休息，集中精力太久了；\n纠结于一个文件的命名或是代码结构不够优雅，论坛上在讨论velocity、underscore、方案选型等千奇百怪的问题，才意识到自己应该休息，归零来看看更广阔的世界；\n\n3年前，为自己从一成不变矮挫丑的软件界面转移到五彩斑斓酷炫拽的web前端而兴奋不已，那种兴奋能让你听一次便记住一个色值、书本上的知识一下子就找到了用武之地，一个F12就能清清楚楚地看到代码的来龙去脉，透明没有伪装。但那时写代码就像滑冰，说不定哪一脚不稳就摔了个底朝天，上线前总会把改过的代码都过一遍，可能出现的问题和解决方法都实验一遍，不能做到百分百无bug也要能尽快修复。真的，每一步都可能摔倒，每一句代码都可能出错。\n\n如果不是眼下前端小妹的代码上线后出现问题导致部分恢复的事情，我已经忘记了当初的如履薄冰。现在骄傲到不指望QA的测试，上线出现问题也义正言辞地说不是代码级别的问题，为了实现类YahooTech的纯图片展示方式，断断续续研究了一个星期YahooTech混淆后的代码（你研究过就知道，那不是人看的），在终于要大功告成的时候窗口resize layout出现问题，花费半个小时用一行代码搞定。一行代码能成事，也能坏事。\n\n哪怕受苦于IE6的折磨都当成一种特别的经历。它像一个黑匣子让你东奔西突，当你煞费苦心花费个把小时终于解决一个IE6的兼容性问题时，无比激动。长此以往便渐渐了解她的脾气秉性，很快写出取悦于她的代码。只是后来，甚是自豪的同时又莫名的惆怅，就像被潜规则之后而上位一样，何苦花大把的时候来适应一个潜规则，却还因此而沾沾自喜。\n\n这三年是我用力工作的三年，什么房子车子票子都抛之脑后，只是享受于午夜更新前灯火通明的办公室里一群打了鸡血的同事，更新后和同事走几公里夜路找出租车。这种无忧无虑又百转千回给了我机遇挑战和自我实现的价值，哪怕最后只收拾一包离开这奉献三年的地方。说着说着有些难受，不舍，就像我们总期盼周杰伦和蔡依林在一起、林志颖娶了林心如该多好实际上是怀念我们自己的初恋一样，我不舍的更是自己一心一意奋斗的青春。\n\n眼下，有点累，什么都不想做，就这么呆着。\n\n\n","mtime":1411972660000,"source":"source/_posts/per-resign.md"},"eambrph4sbbowdxz":{"_id":"eambrph4sbbowdxz","content":"title: 香港之行\ndate: 2014-08-18 23:40:58\ntags: 香港 攻略\n---\n\n不想流水账一样写一篇攻略，如果有需要咨询的同学可以留言，必将知无不言，言无不尽。不想写”香港是自由与信念的国度“这样上纲上线的文章，只是就自己的所见发表一些所感。之前大Boss说我的视野有限，再不出去见识见识，就无法跟我交流了。我转了一圈回来了，恐怕也不能如他所愿感受到“外面的世界很精彩”。\n\n![车窗外的风景](/img/HK1.jpg)\n\n自由：\n\n说了不说还得说。自由是入关时让我摘下胸前背的双肩包检查是否怀孕。自由是进入地铁不再安检，也没有人在你身前身后探来探去。自由是地铁庞大的广告牌上写着“2017年要人手一票实现普选否则占领中环”。自由是路边书摊各种大陆政治内幕。不愧是当过英国殖民地，像是过给了有钱人家的孩子，现在回来了要求家长像有钱人家那样礼遇他。自由是社会进步的标识，我们被禁锢惯了，就皮实了，捏一下打一下也不还手，他们就很矫情，碰一下就叫。而在他们看来，我们又是什么人？没见过世面的乡巴佬，蹑手蹑脚地遵守规则。那又怎么样，自由迟早会有，你们只是走在前面而已。\n\n寸土寸金：\n\n香港真是一个寸土寸金的地方，我们住在红茶馆酒店，设施很完善，过道很狭小，同时只能容纳一个人通过。很多店铺也很小，打开大众点评app，选一个美食排名前三甲的餐厅好好挥霍一下，进去一看，小得还不如庆丰包子铺。\n\n![维多利亚港](/img/HK2.jpg)\n\n美食：\n\n吃了港式美食，我都汗颜觉得之前吃的怎么这么糙呢。就说那$86一碗的蟹黄粥，真的超级超级好吃。大米粥（号称白粥）里面放了青菜、虾仁、螃蟹和散落的蟹黄，尤其是蟹黄特别好吃。之前吃粥就是吃粥，顶多几种豆类的混合，绿豆粥、南瓜粥、大米粥、小米粥，谁家还往粥里放大螃蟹呀。搞个粥都这么复杂。说到复杂，我有一次随便吃了一个餐馆的“龙凤球”，面相更像是糖醋里脊，终于吃到一个内地菜了就很兴奋，吃着吃着内容就来了。挑起一块“里脊”，吃到里面是鸡肉，再挑一块，鱼肉，原来是这么个龙凤球。再说说配菜，洋葱、青辣椒、红辣椒、黄辣椒、菠萝块，我了个去，辣椒都配了三种，还放水果。真替厨师麻烦。\n\n![蟹黄粥](/img/HK3.jpg)\n\n化妆品：\n\n大街小巷到处都是卓悦、莎莎，这两家是化妆品零售店，包含国内各大专柜品牌的产品，但是价格低很多。她们就像从商场专柜无数闪光灯下走入一排排货架。一直没舍得买的“神仙水”就被放在货架底排一个角落。店里人多拥挤，听口音大多数是大陆人来扫货。像雪肌精、契尔氏这些大牌水水也就2、3百港币，感觉以前买的都被坑了似的，真是冤大头。街上的女孩皮肤都很好，如果我在这遍地都是化妆品店，用雅思兰黛跟用妮维雅一样普及的地方，我皮肤不好才怪呢。除了化妆品，还有很多奢侈品，手表、箱包、首饰，有一家店门口排了很长的队还有工作人员维持秩序，是为了给顾客更好的服务限制了进店人数，你猜大家排着队给人家送钱的店是啥？————香奈儿。脑子都进水了，刷卡都不要钱啊。\n\n![化妆品](/img/HK4.jpg)\n\n排队：\n\n这次经历了史上最长时间的排队，都想发誓再也不去人多的地方了。这悲惨的一天是在海洋公园度过的，早上出了地铁需要坐一趟巴士才能到海洋公园，沿着队走啊走啊都找不到队尾，快围了一大圈了，应该出门右转也许能近些。海洋公园里的热门项目均排队时间为2小时，这些都不说。天公不作美的是下午5点半准备出园的时候天降大雨。公园分为“高峰乐园”和“海滨乐园”两大主要景区，以登山缆车和海洋列车连接，上午我们坐缆车到“海滨乐园”，出园的时候需要回到”高峰乐园“，雨大缆车不能开放，只能排队坐海洋列车。我们在大雨里排了2个多小时，人挤人打伞也不管用，每个人的伞都挤得重叠，水顺着伞沿流到衣服里，只有内衣还算干的。7点半左右出园了，没想到搭巴士回去还要排很长的队，都快绝望了。\n\n![化妆品](/img/HK5.jpg)\n\n\n这里面有一个细节，港人很多地方都主动排队，只有两三个人等巴士都会排队，这次队又长得看不到尾巴，就有很多插队的人，但是都被工作人员阻止，队里的人也会帮助维持秩序。有人插到我们的前面，工作人员劝说无效，我后面的哥们说“拉他出来，拉他出来，要去后面排队”。工作人员便拉他出来了，有些插队的人拉都拉不动，都在雨里淋了几个小时谁不想早点回家。然后在一个拐弯处我们这段队伍不知怎么搞得整个就插到前面去了，工作人员立即阻止但来不及了，只是阻止了很后面那一段。我后面那哥们不一样捡了个便宜嘛，怎么不见他说话了。\n\n好吧，啰嗦至此，香港还是他们的，我们只有大陆。\n\n![海洋公园](/img/HK6.jpg)\n\n![迪士尼乐园](/img/HK7.jpg)\n\n","mtime":1411747361000,"source":"source/_posts/per-hk.md"},"wzogt88cr9j38gc8":{"_id":"wzogt88cr9j38gc8","content":"title: 献给2014年的第一场雪\ndate: 2013-12-12 16:22:52\ntags: js动画 css3 requestAnimationFrame 雪花动画\n---\n\n当我查找MVC、MVP、MVVM这些设计模式相关资料时，发现了这个背景效果——飘雪——做得还不错的网站，[http://nirajrules.wordpress.com/2009/07/18/mvc-vs-mvp-vs-mvvm/](http://nirajrules.wordpress.com/2009/07/18/mvc-vs-mvp-vs-mvvm/)，如果你不能打开链接，就悲剧了，“墙”里难见“墙”外花。于是，从该站点剥离出纯粹实现此动画的代码，制作demo如链接（忙啊！！还没传上去）。\n\n我们会发现一些细节，鼠标移动的轨迹控制了风向和风速，从而控制雪花的方向和速度；当前tab不是活动tab时动画停止，避免过度绘制。说说你实现该效果的思路，或是关键词。定时器？运动轨迹？边际检测？我们先按照自己的思路一步一步走，再结合它的代码修正。\n1. 制造雪花\n2. 执行定时器\n\n哦，就这样？好像也很简单~\n\n###1、采用何种模式？\n前提是基于原生javascript来考虑，不要受jquery的影响。首先这里不涉及继承，这就简单很多。javascript中最基本又最有用的模式就是单体，用来划分命名空间并将一批相关属性和方法组织在一起，同时也对外提供了一个访问内部属性和方法的访问点。为了避免被外界访问，将单例的“值部分”闭包起来，在内部返回当前活动对象（绑定到this上的属性和方法仍然可以被外部访问）。好，外壳做好了~\n\n\tvar snowStorm = (function(window, document) {\n\t   ...\n\t   return this;\n\t}(window, document));;\n\n###2、制造雪花\n如何构造雪花，它的构造函数需要哪些属性？位置坐标必须有，用来记录和控制轨迹？关联DOM对象必须有， 方便设置view相关属性? 它需要哪些方法呢？setPosition（设置位置）？setVelocities（设置速度）？move（移动的入口函数）？根据效果需要可能还需要melt（融化）、stick（堆成雪堆）等。多个雪花实例是随机生成的，运动也互不影响，不必有共享的属性和方法，所以不考虑原型。抽取出的代码结构如下：\n\n\tthis.SnowFlake = function(type,x,y) {\n\t    var s = this;\n\t    this.type = type;\n\t    this.x = x||parseInt(rnd(screenX-20),10);\n\t    this.y = (!isNaN(y)?y:-rnd(screenY)-12);\n\t    this.vX = null;\n\t    this.vY = null;\n\t    this.active = 1;\n\t    this.fontSize = (10+(this.type/5)*10);\n\t    this.o = document.createElement('div');\n\t    this.o.innerHTML = storm.snowCharacter;\n\t    this.o.style.color = storm.snowColor;\n\t    this.o.style.position = (fixedForEverything?'fixed':'absolute');\n\t    this.o.style.width = storm.flakeWidth+'px';\n\t    this.o.style.height = storm.flakeHeight+'px';\n\t    this.o.style.fontFamily = 'arial,verdana';\n\t    this.o.style.cursor = 'default';\n\t    this.o.style.overflow = 'hidden';\n\t    this.o.style.fontWeight = 'normal';\n\t    this.o.style.zIndex = storm.zIndex;\n\t    docFrag.appendChild(this.o);\n\n\t    this.refresh = function() {\n\t      ......\n\t      storm.setXY(s.o, s.x, s.y);\n\t    };\n\n\t    this.vCheck = function() {\n\t      if (s.vX>=0 && s.vX<0.2) {\n\t        s.vX = 0.2;\n\t      } else if (s.vX<0 && s.vX>-0.2) {\n\t        s.vX = -0.2;\n\t      }\n\t      if (s.vY>=0 && s.vY<0.2) {\n\t        s.vY = 0.2;\n\t      }\n\t    };\n\n\t    this.move = function() {\n\t        ...\n\t    };\n\n\t    this.setVelocities = function() {\n\t      s.vX = vRndX+rnd(storm.vMaxX*0.12,0.1);\n\t      s.vY = vRndY+rnd(storm.vMaxY*0.12,0.1);\n\t    };\n\n\t    this.setOpacity = function(o,opacity) {\n\t      if (!opacitySupported) {\n\t        return false;\n\t      }\n\t      o.style.opacity = opacity;\n\t    };\n\n\t    this.melt = function() {\n\t      if (!storm.useMeltEffect || !s.melting) {\n\t        s.recycle();\n\t      } else {\n\t        if (s.meltFrame < s.meltFrameCount) {\n\t          s.setOpacity(s.o,s.meltFrames[s.meltFrame]);\n\t          s.o.style.fontSize = s.fontSize-(s.fontSize*(s.meltFrame/s.meltFrameCount))+'px';\n\t          s.o.style.lineHeight = storm.flakeHeight+2+(storm.flakeHeight*0.75*(s.meltFrame/s.meltFrameCount))+'px';\n\t          s.meltFrame++;\n\t        } else {\n\t          s.recycle();\n\t        }\n\t      }\n    };\n构造函数完成，可以制造雪花，插入到页面了。\n\n\tthis.createSnow = function(limit,allowInactive) {\n\t    var i;\n\t    for (i=0; i<limit; i++) {\n\t      storm.flakes[storm.flakes.length] = new storm.SnowFlake(parseInt(rnd(flakeTypes),10));\n\t      if (allowInactive || i>storm.flakesMaxActive) {\n\t        storm.flakes[storm.flakes.length-1].active = -1;\n\t      }\n\t    }\n\t    storm.targetElement.appendChild(docFrag);\n\t};\n关于move方法的实现，也就是移动轨迹相关的细节，我曾一度想了解动画原理，仔细分析下这个方法：\n\n\tthis.move = function() {\n\t\t// rnd: 返回[param2,param1)之间的随机数\n\t\t// plusMinus: 以相同概率返回±param\n\t\t// storm.vMaxX=2.5：水平方向最大速度\n\t\t// 水平风速vRndX = plusMinus(rnd(storm.vMaxX,0.2)); --from randomizeWind（）\n\t\t// vRndX∈±[0.2,2.5)\n\t\t// 水平速度s.vX = vRndX+rnd(storm.vMaxX*0.12,0.1) –-from setVelocities（）\n\t\t// s.vX = ±[0.2,2.5) + [0.1,2.5*0.12);\n\t\t// 水平速度≠水平风速？为什么要修正[0.1,2.5*0.12)，0.12是怎么来的？\n\t\t// 风偏速windOffset默认为1，并根据鼠标移动的位置计算。处于屏幕中间为0，最左侧为-2，最右侧为2；windOffset∈[-2,2]\n\t\tvar vX = s.vX*windOffset, yDiff;\n\t\t// 单位时间运动的终点值=初始值+水平速度\n\t\ts.x += vX;\n\t\t// 同理s.vX = [0.2,2.5) + [0.1,2.5*0.12);\n\t\t// 之前忽略了一点，雪花和雪花是不一样的。尤其是轻重不同，那下落速度必定不同。\n\t\t// this.vAmpTypes = [1,1.2,1.4,1.6,1.8];\n\t\t// this.type ∈[0,5)的随机整数\n\t\t// this.vAmp = this.vAmpTypes[this.type];\n\t\ts.y += (s.vY*s.vAmp);\n\t\t// 边际检测\n\t\t// 右侧出屏幕，设置到左边,左侧出屏幕，设置到右边\n\t\tif (s.x >= screenX || screenX-s.x < storm.flakeWidth) { // X-axis scroll check\n\t\ts.x = 0;\n\t\t} else if (vX < 0 && s.x-storm.flakeLeftOffset < -storm.flakeWidth) {\n\t\ts.x = screenX-storm.flakeWidth-1; // flakeWidth;\n\t\t}\n\t\t// 设置到页面中\n\t\ts.refresh();\n\t\t// yDiff 当前雪花位置距离屏幕底部的高度\n\t\t// 以下实现雪花是否成堆、融化的效果，不再赘述\n\t\tyDiff = screenY+scrollY-s.y+storm.flakeHeight;\n\t\tif (yDiff<storm.flakeHeight) {\n\t\t\ts.active = 0;\n\t\t\tif (storm.snowStick) {\n\t\t\t  s.stick();\n\t\t\t} else {\n\t\t\t  s.recycle();\n\t\t\t}\n\t\t} else {\n\t\t\tif (storm.useMeltEffect && s.active && s.type < 3 && !s.melting && Math.random()>0.998) {\n\t\t\t  // ~1/1000 chance of melting mid-air, with each frame\n\t\t\t  s.melting = true;\n\t\t\t  s.melt();\n\t\t\t  // only incrementally melt one frame\n\t\t\t  // s.melting = false;\n\t\t\t}\n\t\t\tif (storm.useTwinkleEffect) {\n\t\t\t  if (s.twinkleFrame < 0) {\n\t\t\t    if (Math.random() > 0.97) {\n\t\t\t      s.twinkleFrame = parseInt(Math.random() * 8, 10);\n\t\t\t    }\n\t\t\t  } else {\n\t\t\t    s.twinkleFrame--;\n\t\t\t    if (!opacitySupported) {\n\t\t\t      s.o.style.visibility = (s.twinkleFrame && s.twinkleFrame % 2 === 0 ? 'hidden' : 'visible');\n\t\t\t    } else {\n\t\t\t      s.o.style.opacity = (s.twinkleFrame && s.twinkleFrame % 2 === 0 ? 0 : 1);\n\t\t\t    }\n\t\t\t  }\n\t\t\t}\n\t\t}\n\t};\n###3、执行定时器ergrg\n那么，遍历所有的雪花，让她们飘去吧。要么setInterval、要么递归调用setTimeout。\n\n\tthis.snow = function() {\n\t\tvar active = 0, flake = null, i, j;\n\t\tfor (i=0, j=storm.flakes.length; i<j; i++) {\n\t\t  if (storm.flakes[i].active === 1) {\n\t\t    storm.flakes[i].move();\n\t\t    active++;\n\t\t  }\n\t\t  if (storm.flakes[i].melting) {\n\t\t    storm.flakes[i].melt();\n\t\t  }\n\t\t}\n\t\t……\n\t\tif (storm.timer) {\n\t\t  features.getAnimationFrame(storm.snow);\n\t\t}\t\t\t\t\n\t};\n\n这里引入了一个新的专业名词“requestAnimationFrame”。\n\n我们知道，setInterval、setTimeout在实现动画的流畅性上总是不理想。动画比较棘手的问题是延迟应该多少，一方面要必须短，从而使动画流畅地进行，另一方面还要足够长，使得浏览器可以完成渲染。大多数浏览器的刷新频率为60Hz，即每秒60次刷新，那流畅动画的最佳间隔是1000ms/60约为17ms。其次的问题是无法精确，第二个参数指定的延迟表示代码何时会添加到浏览器的UI线程队列中。如果UI线程处于繁忙状态，那代码不会被马上执行。再次，即使看不到网页，或是处于背景选项卡中的页面，动画都会频繁出现，导致过度绘制。\n\n实际上，CSS transitions 和 animations的动画都非常平滑，优势在于浏览器知道哪些动画将会发生。而javascript动画，浏览器不知道动画正在发生。所以一个独特的方案就是创建一个requestAnimationFrame（）方法来告诉浏览器哪些javascript代码正在执行，而计时由系统处理，与浏览器的绘制时间间隔保持一致。此方法接受一个参数，是一个动画函数，并需要在函数最后再次调用requestAnimationFrame（）方法。\n\nrequestAnimationFrame（）API是W3C起草的一个新议案，目前chrome10+、firefox 4+、IE10+已支持。上述代码中getAnimationFrame方法针对不同浏览器对requestAnimationFrame进行了封装，的实现如下：\n\n\tfunction timeoutShim(callback) {\n\t\twindow.setTimeout(callback, 1000/(storm.animationInterval || 20));\n    }\n\n    var _animationFrame = (window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.oRequestAnimationFrame ||\n        window.msRequestAnimationFrame ||\n        timeoutShim);\n\n\t// apply to window, avoid \"illegal invocation\" errors in Chrome\n\tgetAnimationFrame = _animationFrame ? function() {\n\t\treturn _animationFrame.apply(window, arguments);\n\t} : null;\n最后，总结一下代码结构如下：\n![雅虎科技](/img/snowflake.png)\n\n","mtime":1411807524000,"source":"source/_posts/js-snowflake.md"},"mwbm7i5fdqy46mg3":{"_id":"mwbm7i5fdqy46mg3","content":"title: 休假还是治疗？\ndate: 2014-07-26 00:04:40\ntags: 哲理 感悟\n---\n在我正式休长假之前，有几周是双休的，为了缓和三年来的单休日子，让身体和心态从满负荷到倍轻松有一个缓冲。只是我有一个隐忧：周一正式开始工作的时候，总是需要1～2小时的“代入”，想一个很熟悉的CSS属性也慢了几秒钟。也许这是由休息进入工作状态避免不了的消耗。那休长假玩疯了之后如何开始工作？如何准备面试？认真地思考这个问题，是从我被电话面试问到我都面试过别人很多遍的必备技能时却语无伦次开始。我相信，我能回答的问题确实是我大脑深处印象最深的经历，不需要任何准备和“代入”便脱口而出，就像存储到大脑内存中一样。而我无法在任意时间内均可以解释清楚的问题是一遍又一遍备份到大脑硬盘中的，所以它不能像在内存中一样快速读取。\n\n我想说的重点是两个:\n\n>* 这样的电话面试不公平。面试者是有所准备的，被面试者是处于任意状态下的。不得不说一个很励志的场景，在一节在线托福口语班上，老师把话筒给了一个愿意在1000人的倾听下回答问题的学生，话筒切换之后听到一个小baby用着哭腔不停地呼唤着“妈妈”，这位“妈妈”学生边小声安抚着baby、边说了近一分钟的英语。就是说，你无法知道对方所处的状态，试想，一个人怎么能快速从满脑子想着小孩的状态切换到前端技术交流，当然你想着别的事情也是这样的。所以最好电话面试也要预约时间，或者被面试者直接婉拒，稍作准备后再接受。\n\n>* 枕戈待旦。前端攻城师们真的要人如其名一样的枕戈待旦时刻准备攻城吗？我觉得最好是。我们在高中埋头苦海时家长说考上大学就轻松了，轻轻松松地上着大学然后就迎来了人山人海的就业大军，终于对工作可以轻松应对的时候发现囊中羞涩一平米也买不了。我们不再是相信考上大学就轻松的懵懂少年了，所以你最好也相信，休假不是只有玩，还要准备，时刻准备着。\n\n最近迷上一部美剧《24小时》——放心，我没有在转移话题——每一季24集与现实时间同步地演绎24小时内发生的事情，每季间隔1～2年。主人公Jack Baver是一名反恐外勤人员，一名冷酷叛逆果断绝敢的冷血特工。每一季结束后他或者是被辞职过起寻常生活，或者是隐形埋名流浪天涯，或者是转去做文职，或者是被关进中国监狱，等到下一季他再出山，也完全是个身体素质极好枪法极准头脑极敏锐的特工。没有大腹便便没有身材发福没有技能退步，这真的是电视剧啊！\n\n__那么如何时刻准备着呢？为什么有些记忆近在内存，有些记忆远在硬盘呢？__\n\n借鉴一下我最近背单词的感悟，背单词有三种方法：\n\n>* 重复记忆，这在我最开始学英语和日语时都得到了验证。初中英语老师要求每天写一篇16开纸的单词，写了三年。学日语一年之后为准备日语等级考试而背单词，每天按照记忆曲线重复背诵之前的内容，并开辟新的内容，大部分时间花费在重复以往上。小孩子学数数一定也是家长一遍又一遍地教才能数出来。这种方法试用于初学者，或者需要在有限时间内快速达到效果的时候。现在背托福词汇就是这样，每天花费1个小时快速浏览1200个单词。单词不是背出来的，是重复出来的。\n\n>* 词根词缀法，比如pre这个词缀是预先的意思，那么你很容易就能背诵preview、previous。我很少用这种方法，因为大部分词汇都是重复出来的，有一定的词汇量之后才总结出各个词缀的意义，然后类推其他的时候也没有很管用。就像汉字的偏旁部首一样，你认识了“日”，又通过象形法“日”下画一条地平线就成了“旦”意味着早晨。但当你看到“但”这个字时还是不知道什么意思。\n\n>* 联想记忆法，第一次学习／bus／这个单词时，你肯定在音标上写着／爸丝／这样的汉字，可能还有很多种／XX丝（死）／。将陌生的知识与已有经验经历建立对应关系，哪怕它们属于不同的知识体系，没有任何逻辑关系，只是方便记忆而已。\n\n__那么如何能够在长期的非工作期间保持对前端知识和工作经验的快速反应？__\n\n首先是重复，利用长假时间定期将以往的总结文档、收藏文章浏览一遍。其次保持思考，我们都加入过几个技术交流QQ群、也订阅过几个技术分享公众平台，诚实地说，我只是看一眼他们在说什么，并没有仔细思考他们提出的问题。大脑的懒惰就像是一个天然的屏障，将你与真知隔绝。而重复记忆法恰恰给大脑的懒惰找了一个冠冕堂皇的接口，就像是在说“不思考没关系，多看几遍就可以了”。从这个意义上来说，重复是个笨方法，思考才是捷径。文艺地说，时间可以治愈一切，任何事物都有遗忘的过程，重复是必备技能，而思考可以减缓遗忘，使重复的周期更长一些。\n\n","mtime":1411748362000,"source":"source/_posts/per-rest.md"},"sy8xfgg3ccdpd2vj":{"_id":"sy8xfgg3ccdpd2vj","content":"title: 团队成长记——《在你身边为你设计》读后感\ndate: 2014-01-20 16:11:26\ntags: 在你身边为你设计 唐沐 腾讯\n---\n最近在看一本书《在你身边为你设计》，出自腾讯CDC团队（用户研究与体验设计中心）的结集文章。看书如见人，通过不同文章的观点和看问题的角度对各个作者的专业方向和管理层级也略知一二。个人更喜欢唐沐的文章，他是腾讯CDC团队的创始人，给大家缕一下这个团队从无到有的过程。\n\n###1. 2003年4月入职UI设计组\n唐沐入职腾讯可以说是天时地利，当时QQ作为腾讯唯一的重要产品刚刚完成了原始积累——用户数达到了一个量级，用户对产品的需求也刚刚从满足基本功能转变到追求更好的UI体验。其次，唐沐在大学辅修过工业设计，重要的是在金山练就软件产品UI设计的思路和技能，这些成为在腾讯开展用户体验设计的基石。\n\n在刚入职的几个月里，他被同事们习以为常地称为“美工”，在非常有限的资源下，不分昼夜地完成了QQ2003、QQGame、TM1.0等设计项目。那个过程中赢得的客户关系和上级信任，是CDC最原始的资本积累。\n\n###2. 2003年5月第一名交互设计师\n当时交互设计还不是一个被广泛理解和接受的词，交互设计所负责的工作基本是被产品经理和GUI设计师填补了。于是按照GUI设计师招聘了第一位工业设计背景的专职的交互设计师。一开始也并不被认可，在一次传统模式还是创新模式的拉锯战中，提供了兼容两种模式，可自由切换的方案，才达到产品经理和用户双赢的局面。这种方案一直持续到2005年，才完全切换到新模式中。\n\n###3 2005年第一个用户体验室\nUI设计组已经有20余人，交互设计师的招聘依然不理想，但内部慢慢形成了培训供血机制，形成了先交互再视觉的设计流程。同时，遇到了一个新问题：交互设计师和产品经理在用户体验的判断上有差异，主观判断较多，莫衷一是。于是，谁来判断设计的好坏？在资源有限的情况下，团队建设了第一间用户体验观察室，非常简陋，只有一些简单的拾音设备和单面镜。至今，CDC拥有专职的用户研究工程师超过40人，近10间专业的用户体验室分布在全国，用户研究方法也从单一的实验室观察扩展到眼动研究、焦点访谈、深度访谈、问卷调查、田野研究等。\n\n事实上，如果没有第一间用户体验室，用户研究的工作也可以进行，但是这个房间是一个信号，一种态度，需要告诉客户，用户研究是一门专门的学科，可以帮助产品决策。在当时中国互联网和腾讯的大环境里，这确实是一个需要创意和魄力的解决方案。\n\n###4 2006年5月CDC正式成立\n团队由一个设计中心正式挂牌成立，升级为“公司级”的设计中心，一个独立预算的单位。内部包括三个主要角色：交互设计、视觉设计、用户研究。随着人员的扩充，人事和团队管理都遇到很多新的问题。为了保证对团队文化、专业积累有很好的传承，管理干部基本都从团队中产生，很少外部引进。同时，专业骨干在管理过程中不能忽略自身专业成长和业绩。\n\n###5. 2008年设计研发组成立\nCDC团队规模达到了80多人，项目达到50多，内部客户几乎拓展到了整个腾讯公司。但是开发团队会将功能开发优先于界面开发，并且认为界面开发没有太多值得研究的东西，造成了界面开发的边缘化，也制约着设计能否在产品中得以完美呈现。解决方案就是为设计团队配备开发工程师，招聘开发与设计的“边缘人”（前端开发工程师）并不容易，于是从开发团队的毕业生中“偷”了两个对设计和用研数据感兴趣的候选人。\n\n###6. 2011年专业线向项目线变革\nCDC团队规模达到200多人，在北京、上海、成都都有了自己的分部。团队人数的快速增加很大程度归因于项目的持续增长，以跟上公司快速发展的步伐。数十人和数百人在团队管理上是不同的境界，CDC一直是以专业线划分团队的，在专业建设和质量把控上很好，设计师的专业成长路径清晰，培训体制成熟，但是项目压力传导不到位，效率低下。所以整个部门的组织架构需要艰难地从专业线朝项目线调整。变革需要付出代价，有些设计师非常不适应。同一阶段，人才争夺激烈、猎聘挖角接连不断，2011年整年损失了相当一部分骨干。这也促成了CDC更大胆更快递进行变革。\n\n###7. 作者展望\n不希望CDC继续变大，甚而希望适当缩小，这几年的发展中我们深深认识到：\na)一个设计团队的成功，并不在于TA有多大，而在于TA做过多少成功项目；\nb)只有聚焦，才有精品；\nc)资源永远都是有限的，用有限的资源把事情做好，才有机会拥有更多的资源把事情做好；\nd)细致分工在一些阶段是良药，过了这些阶段就是毒药。\n\n很抱歉，我大段摘抄又小小概述了原文内容。在这个优秀团队的十年成长史中，充满了行业的缩影，团队的工作风格也让人艳羡。“踏踏实实，先把眼前的事情做好。现有资源下做出超预期的事，拿到更多资源之后循环往复。”每一次挑战的顺利渡过都是这个信条的实践。作者没有把这篇文章写成励志史，过于强调个人素质和努力，只是把经验和教训分享出来，读起来自然舒服，又让人敬佩。\n\n**我觉得作者做事上有两种“道”:一种是水到渠成，比如他入职腾讯时机可谓是“恰到好处”，具备了成功的可能性。再比如他谈到周边准备度，就是说构成你周边环境的人、时间、资源是否达到了你可以成事的程度。往往一个人想做成一件事，就好像堆石头上山，费劲力气推到山顶去，倘若山顶的四周空空如也，石头无所立足，会马上滚回原点，所有努力白费。真正需要做到的，是随机应变，在有限的条件下踏踏实实把事情做好。周边准备度，是可以随着不断把事情做成而提升的。另一种是开创精神，比如如何招聘史上第一位交互设计师、如何给设计团队配备界面开发工程师，如何成立第一间用户观察室，如何不同于其他团队拥有向最高决策层汇报的权利，用作者自己的话说，“这是团队特定的成长经历和我们经过长期的努力争取到的一种权利”。**\n\n目前，唐沐已与2013年5月离职腾讯加入小米，又回到了雷军的怀抱。\n\n","mtime":1411805865000,"source":"source/_posts/read-team.md"},"oqnfkva7i1s7c0np":{"_id":"oqnfkva7i1s7c0np","content":"title: 【翻译】开发Firefox扩展\ndate: 2012-02-04 17:46:29\ntags: Firefox扩展\n---\n译自[https://developer.mozilla.org/en/Building_an_Extension](https://developer.mozilla.org/en/Building_an_Extension)，意译非直译\n\n##简介\n这篇教程通过一些必要的步骤指导你开发一个简单的扩展——在火狐浏览器的状态面板（status bar panel）中加入一项“hello,World”。（ajiao注：事实上是加在了工具菜单中）\n从firefox4（和其他的基于Mozilla 2版本的应用程序）开始有两种类型的扩展：\n1. 传统的XUL扩展比较强大，但麻烦的是安装后需要重启浏览器；\n2. 免重启的扩展，不需要安装后重启但是相比于传统扩展受限得多。[Add-on SDK and the Add-on Builder](https://addons.mozilla.org/en-US/developers/tools/builder)可以容易地用于开发免重启扩展。\n\n这篇文章说明如何开发传统的扩展。\n\n##快速开始\n这个扩展在[another tutorial from MozillaZine Knowledge Base](kb.mozillazine.org/Getting_started_with_extension_development)上有逐行的代码解释\n\n###1、构建开发环境\n扩展打包成zip文件，或使用XPI文件系统(\"zippy\"发布的)打包。\n典型的XPI文件如下：\n\n\tmy_extension.xpi：                       //扩展名\n\t/install.rdf                            //扩展的信息（包括id、名称、版本号等）\n\t/chrome.manifest              \t\t\t//通过chrome引擎注册，负责扩展的运行\n\t/chrome/\n\t/chrome/content/                        //包括XUL and JavaScript 文件\n\t/chrome/icons/default/*                 //扩展icon\n\t/chrome/locale/*                        //本地化\n\t/defaults/preferences/*.js\n\t/plugins/*\n\t/components/*\n\t/components/cmdline.js\n\n我们要创建一个类似的文件结构，随便在某一个硬盘上新建一个文件夹（比如C:\\extensions\\my_extension\\ or ~/extensions/my_extension/），里面新建一个名为chrome的文件夹，再在里面建一个名为content的文件夹。在文件夹的根目录下新建两个空文件，分别命名为chrome.manifest and install.rdf。在chrome/content文件夹中，新建一个文件，命名为sample.xul。那么，这个文件结构是这样的：\n\n\tinstall.rdf\n\tchrome.manifest\n\tchrome\\\n\t\tcontent\\\n\t\t\tsample.xul\n\n关于构建开发环境的其他信息请参考[Setting up extension development environment](https://developer.mozilla.org/en/Setting_up_extension_development_environment)\n\n###2、编写instal.rdf\n\n打开文件，将以下代码放到里面.\n\n\t<?xml version=\"1.0\"?>\n\t<RDF xmlns=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:em=\"http://www.mozilla.org/2004/em-rdf#\">    \n\t\t<Description about=\"urn:mozilla:install-manifest\">\n\t\t\t<em:id>sample@example.net</em:id>\n\t\t\t<em:version>1.0</em:version>\n\t\t\t<em:type>2</em:type>\n\t\t\t<!-- Target Application this extension can install into,with minimum and maximum supported versions. -->\n\t\t\t<em:targetApplication>\n\t\t\t\t<Description>\n\t\t\t\t<em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>\n\t\t\t\t\t<em:minVersion>1.5</em:minVersion>\n\t\t\t\t\t<em:maxVersion>4.0.*</em:maxVersion>\n\t\t\t\t</Description>\n\t\t\t</em:targetApplication>\n\t\t\t<!-- Front End MetaData -->\n\t\t\t<em:name>sample</em:name>\n\t\t\t<em:description>A test extension</em:description>\n\t\t\t<em:creator>Your Name Here</em:creator>\n\t\t\t<em:homepageURL>http://www.example.com/</em:homepageURL>\n\t\t</Description>\n\t</RDF>\n\n1、sample@example.net：扩展ID，Email格式的字符串用来唯一确定你的扩展。或者是一个GUID。\n2、`<em:type`>2`</em:type`>：2是说这是一个扩展，如果要安装主题就是4，关于更多type参见[Install Manifests#type](https://developer.mozilla.org/en/Install_Manifests#type) 。\n3、{ec8030f7-c20a-464f-9b0e-13a3a9e97384}：firefox的ID\n4、1.5：扩展能够work的firefox的最低版本，需要确切的版本号，而不能用*代替。\n5、4.0.*：扩展能够work的firefox的最高版本，4.0.*意味着扩展能够在firefox4.0和4.0.x以下的各版本中work。这个值必须小于等于 firefox已发布的版本。默认地，firefox10和以后版本不受这个最高版本限制，你可以通 过<em:strictCompatibility>强制限制。\n\n注：如果提示此文件有问题，在firefox中通过文件->打开文件命令可以看到返回的xml错误信息。\n扩展至少要在Firefox 2.0.0.x上work的话，最高版本应该设置成\"2.0.0.*\"。\n扩展至少要在Firefox 1.5.0.x上work的话，最高版本应该设置成\"1.5.0.*\"。\n（ajiao注：此言应该是为了保险起见，避免firefox不兼容）\n\n想了解更多的required和optional属性请查看[Install Manifests](https://developer.mozilla.org/en/Install_Manifests)\n\n###3、编写XUL文件\n\nFirefox的用户接口（user interface）是用XUL和JS写的。XUL遵循XML语法，提供button、menu、toolbars、trees等组件（widgets），用户行为通过JS实现。\n\n为了扩展浏览器，我们增加或修改组件来改变浏览器的部分UI。通过插入新的XUL DOM 元素到浏览器窗口来增加组件，用script和绑定事件来修改组件。\n\n浏览器是通过一个名为browser.xul ($FIREFOX_INSTALL_DIR/chrome/browser.jar contains content/browser/browser.xul)的文件运行的（ajiao注：事实上，我没有找到这个文件），这个文件中有如下代码：\n\n\t<statusbar id=\"status-bar\">\n\t\t... <statusbarpanel> ...\n\t</statusbar>\n\n<statusbar id=\"status-bar\">是一个\"覆盖点\"（merge point），可以被XUL Overlay文件覆盖的地方。\n\nXUL Overlays是一种在运行时（at run time）把其他的UI组件结合到一个XUL文件的方法，一个XUL Overlay是一个XUL文件，它把一些XUL片段插入到一个主（master）文件的特定覆盖点。这些XUL片段指定组件是应该insert、 remove还是modified。\n\nXUL Overlay 文件示例：\n\n\t<?xml version=\"1.0\"?>\n\t<overlay id=\"sample\" xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\">\n\t\t<statusbar id=\"status-bar\">\n\t\t\t<statusbarpanel id=\"my-panel\" label=\"Hello, World\"  />\n\t\t</statusbar>\n\t</overlay>\n\n这个叫status-bar的<statusbar>指定了一个覆盖点，这个覆盖点是浏览器窗口中我们想要追加的地方。子节点<statusbarpanel>是想插入覆盖点的一个新组件（widget）。把上面的代码保存到chrome/content下的sample.xul文件中。\n\n关于更多的插入组件和通过覆盖修改用户接口的内容，请往下看。\n\n###Chrome URIs\najiao注：Chrome不是Google Chrome，可以理解为普通意义上的浏览器。\nXUL 文件是\"[Chrome Packages](https://developer.mozilla.org/en/Chrome_Registration)\" 的一部分，\"Chrome Packages\"涵盖了用户接口（user interface）的所有部件（components），这些部件可以通过chrome://URIs来访问（load）。而不是通过file://URI从硬盘上访问浏览器（尽管Firefox在系统中的位置可以在平台（platform）间和系统（system）间改变），MOzilla开发者提出了这个解决方案：创建指向XUL内容——这些是安装程序知道的——的URIs，[chrome://browser/content/browser.xul](chrome://browser/content/browser.xul)，把这个放到地址栏中。\n\nChrome URIs包括以下部件：\n1、chrome://：URI scheme (chrome)，它告诉Firefox的网络库（networking library）那是一个chrome URI。它指明URI 内容应该被视为（chrome）来处理，而不是视为一个网页（http）。\n2、browser：包名本身确定了这是用户接口部件，它应该区别于你的应用程序，尽可能避免扩展之间的冲突。\n3、content：请求的数据类型。有三种类型：content (XUL，JavaScript，XBL bindings等决定了应用程序UI的结构和行为)，locale (DTD，.properties files等包含了UI的本地化的字符串)，and skin (CSS and images等确定了UI的theme主题)。\n4、browser.xul：要访问的文件路径。\n\n那么，[chrome://foo/skin/bar.png](chrome://foo/skin/bar.png)就是访问foo主题的skin下的bar.png。\n\n当你通过Chrome URI访问资源时，Firefox通过Chrome注册信息（Registry）把这些URIs转换成硬盘上（或jar包中）实际的资源文件。\n\n###4、编写chrome.manifest文件\n关于Chrome Manifests和其支持的属性的更多信息，请参看Chrome Manifest。\n打开文件，加入以下代码：\n\t\n\tcontent     sample    chrome/content/\n\n不要忘记结尾的斜杠“/”，没有它这个包不能被注册。有以下三点说明：\n1、content ：chrome package的内容类型（type of material within a chrome package）。\n2、sample ：chrome package名（包名一定要用小写字母，Firefox的早期版本不支持大写或驼峰命名）。\n3、chrome/content/：chrome package文件的位置。\n这一行代码就是说明有一个名为sample的chrome package，可以在相对于chrome.manifest所在目录的chrome/content位置下找到这些资源。\n\n你还需要告诉Firefox把你的覆盖点合并到浏览器窗口中，加入以下代码：\noverlay [chrome://browser/content/browser.xul](chrome://browser/content/browser.xul) [chrome://sample/content/sample.xul](chrome://sample/content/sample.xul)\n这就是告诉Firefox加载browser.xul时要把sample.xul合并进去。\n\n###5、测试\n首先，应该告诉Firefox有你这么一个扩展。在Firefox 2.0或更高版本中，你可以把Firefox指向你开发的那个扩展对应的文件夹，那每次重启时就会加载这个扩展。\n\n1、找到[profile folder](kb.mozillazine.org/Profile_folder)（这个文件夹是第一个启动Mozilla时自动创建到你本地的，保存了程序的默认信息，在win7下，可以通过命令行%APPDATA%\\Mozilla\\Firefox\\Profiles打开文件），你的工作就是在这个文件夹里。\n2、打开extensions/这个文件夹，如果需要的话自建一个。\n3、创建一个文本文件，把你的扩展文件的全路径(e.g. C:\\extensions\\my_extension\\ or ~/extensions/my_extension/)写到里面。（windows用户应该保留操作系统的斜杠，并且要以斜杠结尾，去掉末尾的空格。）\n4、保存文件，命名为你的扩展ID （e.g. [sample@example.net](sample@example.net)），没有文件后缀。\n\n现在就可以测试你的扩展了。\n启动Firefox，检测到有文本链接到你的扩展目录下，安装扩展。当浏览器完全显示的时候，你可以在状态面板的右侧（on the right side of the status bar panel）看到“Hello, World!”（ajiao注，事实上是在工具菜单中）\n现在，你可以回去编写.XUL文件了，关闭然后启动Firefox，就能看到你想看到的。\n\n###6、打包\n你的扩展正常work了，就可以打包了。\n把你扩展文件夹里面的内容打成zip包（注意是文件夹里面的内容，不是文件夹本身。ajiao注：开始就卡在这个盲点上了。），然后重命名，以.xpi作为后缀。\n* 在XP中，选中扩展文件夹里的所有文件包括子文件，右击选择“发送到-->压缩zipped文件夹”。一个zip文件就创建好了。\n* 在Mac OS X下，选择扩展文件夹里的所有文件，右击选择“Create Archive of...”就可以了。然后，自从Mac OS X增加了用来追踪文件元数据的隐藏文件夹，你就不应该使用终端，而是删除隐藏文件夹（那些以时间命名的）在命令行中敲入zip命令来创建zip文件。\n* 在Linux下，同样通过命令完成。\n\n如果你安装了“Extension Builder”这个扩展，它能够帮你编译成.xpi文件（Tools -> Extension Developer -> Extension Builder）。指定生成目录为扩展所在的目录（install.rdf 等），然后敲击Build Extension按钮。这个扩展有很多工具让开发变得更容易。\n\n现在，上传你的.xpi文件到你的服务器上，确保它被服务为application/x-xpinstall。你可以link到它，让别人也可以下载和安装。如果只是测试我们的.xpi文件，可以直接拖到工具->附加组件中。（ajiao注：直接拖到浏览器中就可以）\n\n###使用addons.mozilla.org（ajiao注：这里是广告么？）\n\nMozilla Add-ons是一个分布式（distribution）站点，可以免费寄宿（host）你的扩展。你的扩展可能非常受欢迎，也可以寄宿在Mozilla的映射（mirror）网络上来保证下载。Mozilla站点提供给用户更简单的安装方式，只有你上传了新的版本，它就会自动地到达（available to）使用者那里。另外，Mozilla Add-ons允许用户评论，并为你的扩展提供反馈。强烈推荐你用Mozilla Add-ons发布扩展。访问Visit [http://addons.mozilla.org/developers/](addons.mozilla.org/developers/)，创建一个账户就可以发布你的扩展了。\n\n注：如果有一个更好的描述和截图，你的扩展会很快通过和被下载的。\n\n##MORE\n###7、更多的XUL Overlays\n除了把UI 组件加到覆盖点（merge point），你可以在Overlays里面用如下XUL片段：\n* 修改覆盖点的属性，例如隐藏状态条。\n\t\t<statusbar id=\"status-bar\" hidden=\"true\" />\n\n* 从主文件中移出覆盖点，例如\n\n\t\t<statusbar id=\"status-bar\" removeelement=\"true\" />\n\n* 控制插入组件的位置：\n\n\t\t<statusbarpanel position=\"1\" ...  />\n\t\t<statusbarpanel insertbefore=\"other-id\" ...  />\n\t\t<statusbarpanel insertafter=\"other-id\" ...  />\n\n###8、创建新的User Interface Components\n你可以用单独的.xul文件创建自己的窗体和对话框，在JS文件中执行用户行为来提供功能，用DOM方法来操作用户组件，在.css文件中加入图片，设置样式。关于XUL开发的更多文档请参考[XUL](https://developer.mozilla.org/en/XUL)。\n（ajiao注：XUL：XML User Interface Language，一种基于XML的语言，可以开发多功能的跨平台的应用程序，无论是否联网都可以运行。这些程序很容易通过文本，图片，布局来自定义。）\n\n###9、默认文件\n用来构成用户的基本信息（seed a user's profile）的默认文件，位于扩展文件夹的根目录下。默认偏好（preferences）的JS文件应该在defaults/preferences/下，当Firefox的偏好系统（defaults/preferences/）开始启动的时候，它们会被自动载入。访问[Preferences API](https://developer.mozilla.org/en/Preferences_API).了解更多信息。\n默认偏好文件的实例：\n\n\tpref(\"extensions.sample.username\", \"Joe\"); //a string pref\n\tpref(\"extensions.sample.sort\", 2); //an int pref\n\tpref(\"extensions.sample.showAdvanced\", true); //a boolean pref\n\n###10、XPCOM Components\nFirefox在扩展中支持[XPCOM](https://developer.mozilla.org/en/XPCOM) components。你可以用JS 或C++（用[Gecko SDK](https://developer.mozilla.org/en/Gecko_SDK)）很容易地创建自己的components（ajiao注：XPCOM类似于Microsoft COM，一种跨平台的component object model）。把你的.js、.dll文件都放到components/目录下，安装扩展后的Firefox在第一次运行的时候就会自动注册它们。\n\n更多的信息参考 [How to Build an XPCOM Component in Javascript](https://developer.mozilla.org/en/How_to_Build_an_XPCOM_Component_in_Javascript), [How to build a binary XPCOM component using Visual Studio](https://developer.mozilla.org/en/How_to_build_a_binary_XPCOM_component_using_Visual_Studio) and the [Creating XPCOM Components](https://developer.mozilla.org/en/Creating_XPCOM_Components) book.\n\n**Application Command Line**\n\n自定义的XPCOM components的一个可能的用法就是增加一个命令行的处理到Firefox中，你可以用这种方法把扩展作为一个应用程序来运行。\n\n\t\tfirefox.exe -myapp\n\n更多信息请参考 [Chrome: Command Line](https://developer.mozilla.org/en/Chrome/Command_Line) and a [forum discussion](forums.mozillazine.org/viewtopic.php?t=365297)\n\n**Localization**\n\n为了支持多语言，你可以用[entities](https://developer.mozilla.org/en/XUL_Tutorial/Localization)和[string bundles](https://developer.mozilla.org/en/XUL_Tutorial/Property_Files)把字符串从你的内容中拆分出来。在开发过程中做这件事更容易，比起回过头来做。\n\n本地化信息存储在扩展的locale目录下。比如，你要在扩展里加一个locale，在chrome目录里（即content的同级目录下）嵌套创建出locale/en-US这个目录，然后把下面这行加到chrome.manifest文件里。\n\t\n\tlocale sample en-US chrome/locale/en-US/\n\n要在XUL中创建本地化的属性，你可以把这些值放在一个.dtd文件里，.dtd文件放在locale目录下，代码如下：\n\n\t<!ENTITY  my-panel.label  \"Hello, World\">\n\t\t在XUL文件的顶部(在<?xml version\"1.0\"?>的下面)加入如下代码：\n\t<?xml version=\"1.0\"?>\n\t<!DOCTYPE window SYSTEM \"chrome://packagename/locale/filename.dtd\">\n\t...\n\nXUL文档的根节点的[localName](https://developer.mozilla.org/En/DOM/Node.localName) 值是window, “SYSTEM”属性的值是指向entity file（ajiao注：就是DTD文件）的chrome URI.\n\n在我们的示例扩展中，把根节点window换成overlay，packagename写成sample，filename.dtd写成sample.dtd。怎么用这个entities呢，修改XUL如下：\n\n\t<statusbarpanel id=\"my-panel\" label=\"&my-panel.label;\"  />\n\nChrome注册信息会确保entity file被加载。\n也可以给script中使用的字符串创建一个属性文件，就是一个每一行都是这种格式的文本文件。\nkey=value\n然后用[nsIStringBundleService](https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIStringBundleService) /[nsIStringBundle](https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIStringBundle) or the [stringbundle](https://developer.mozilla.org/en/XUL/stringbundle)标签把相应的值load到script中。\n\n###11、了解浏览器\n用[DOM Inspector](https://developer.mozilla.org/en/DOM_Inspector)（ajiao注：一个扩展）检查你想扩展的浏览器窗口或是其他的XUL窗口。\n提示：Firefox在默认情况下不安装DOM Inspector，从Firefox 3 Beta 4版本起，它单独作为一种扩展。如果你的浏览器是早期版本，工具菜单中没有“DOM Inspector”，那就用自定义安装方式选择DOM Inspector重新安装。\n\n在DOM Inspector工具条的左上方有个点选式（point-and-click）按钮，在XUL窗口点击一个节点来选择它，DOM树就会跳到指定的节点。\n\n用DOM Inspector的右侧面板可以发现覆盖点的ID，你可以用来插入你的元素。如果你没有发现你可以插入（merge into）的带ID的元素，你可能需要在overlay（ajiao注：overlay.xul）中加入一个script，当load事件运行到主XUL窗口时（the load event fires on the master XUL window）插入你的元素。\n\n**Debugging Extensions**\n\nDebug分析工具\n* [DOM Inspector](https://developer.mozilla.org/en/DOM_Inspector)——检测已生效的属性、DOM结构、CSS样式（一个找出为什么样式没有生效的工具）\n* [Venkman](https://developer.mozilla.org/en/Venkman)——在JS中设置断点，并inspect call stacks\n* JS中的[arguments.callee.caller](https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope/arguments/callee)——访问一个方法的call stack\n\n函数调试\n* 用[dump](https://developer.mozilla.org/en/DOM/window.dump)(\"string\")（详情看链接，它需要一些配置才能正常work）\n* 用[Components.utils.reportError()](https://developer.mozilla.org/en/Components.utils.reportError) or [nsIConsoleService](https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIConsoleService)输出（log to）到控制台。\n\n高级调试\n* 在Firefox中设置断点运行，对于有经验的开发者来说，这是诊断问题的最快方法。详情请看[Build Documentation](https://developer.mozilla.org/En/Developer_Guide/Build_Instructions) and [Developing Mozilla](https://developer.mozilla.org/En/Developer_Guide)\n* 更多的帮助提示请看[Debugging a XULRunner Application](https://developer.mozilla.org/en/Debugging_a_XULRunner_Application)\n\n###12、更多信息\n[Extension FAQ](https://developer.mozilla.org/en/Extension_Frequently_Asked_Questions)\n[Extensions](https://developer.mozilla.org/en/Extensions)","mtime":1411911455000,"source":"source/_posts/trans-ffextention.md"},"ize5ak32wup9u7o3":{"_id":"ize5ak32wup9u7o3","content":"title: seajs源码解析\ndate: 2014-03-17 13:53:07\ntags: seajs源码\n---\n关于seajs的源码解析玉伯自己也只写了两篇[http://chuansongme.com/n/124571](http://chuansongme.com/n/124571)、[http://chuansongme.com/n/126184](http://chuansongme.com/n/126184)，去年订阅他的微信号后就已拜读过。讲述了目录结构、大闭包等这些表面的细节，还未真正写到精髓，就没有了。最近项目中应用了seajs，模块化改造也并不复杂，腾出时间专门看看源码。\n下载个seajs，src目录如下：\n\n\tsrc\n\t|----intro.js             -- 全局闭包头部\n\t|----sea.js               -- 基本命名空间\n\n\t|----util-lang.js         -- 语言增强\n\t|----util-events.js       -- 简易事件机制\n\t|----util-path.js         -- 路径处理\n\t|----util-request.js      -- HTTP 请求\n\t|----util-deps.js         -- 依赖提取\n\n\t|----module.js            -- 核心代码\n\t|----config.js            -- 配置\n\t|----outro.js             -- 全局闭包尾部\n\nDist目录中的sea-debug.js就是上述文件按顺序合并而成，未压缩代码行900+，按模块回顾下吧。\n\n（一）intro.js，只是一个包装而且是个上包装，下包装见outro.js。\n\n\t(function(global, undefined) {\n    \tif (global.seajs) {\n        \treturn\n    \t}\n\njQuery的包装器基本也是这样：\n\n\t(function(window, undefined) {\n    \tvar jQuery ＝  ...\n    \t...\n    \twindow.jQuery = window.$ = jQuery;\n    })(window);\n\n注意四点：\n1、自调用匿名函数创建了一个闭包，该作用域中的代码不会破坏和污染全局变量，这是任何一个javascript库所必备的功能。\n2、jQuery传递是window参数，seajs传递的是global参数，作者说，“在浏览器环境中，global 是 window 对象。在 Node.js 环境中，global 则是 node 环境中的 global 对象。这是一个跨平台的兼容式写法。”\n3、传入undefined参数是为了确保undefined的值是undefined，避免被低版本浏览器通过window.undefined＝“”这样的赋值语句重写。\n4、传入window、undefined参数有一个共通原因是可以使其变为局部变量，这样在jQuery代码块中访问它时，不需要将作用域回退到顶层作用域，更快地访问到window对象。同时局部变量可以进行压缩优化，压缩为一个字符，也省不少字节。\n\n\n（二）sea.js，确保全局环境中只有一个seajs，events、。。。等均保存在data中。\n\n\tvar seajs = global.seajs = {\n\t\t// The current version of Sea.js being used\n\t\tversion: \"2.1.1\"\n\t}\n\tvar data = seajs.data = {}\n\n（三）util-lang.js\n\n\tfunction isType(type) {\n\t\treturn function(obj) {\n\t\t\treturn Object.prototype.toString.call(obj) === \"[object \" + type + \"]\"\n\t\t}\n\t}\n\tvar isObject = isType(\"Object\")\n\tvar isString = isType(\"String\")\n\tvar isArray = Array.isArray || isType(\"Array\")\n\tvar isFunction = isType(\"Function\")\n\n\tvar _cid = 0\n\tfunction cid() {\n\t\treturn _cid++\n\t}\n\n先举例说明一下如何做类型检测：\n\n\tvar a = \"aa\";\n\tconsole.log(Object.prototype.toString.call(a)) //[object String]\n\tvar a = 123;\n\tconsole.log(Object.prototype.toString.call(a)) //[object Number]\n\tvar a = [\"aa\"];\n\tconsole.log(Object.prototype.toString.call(a)) //[object Array]\n\tvar a = function(){};\n\tconsole.log(Object.prototype.toString.call(a)) //[object Function]\n\tvar a = {};\n\tconsole.log(Object.prototype.toString.call(a)) //[object Object]\n\n原来这么简单，将变量转变成字符串就可以打印出其类型。有没有觉得isType函数有些特别，接受一个type参数，其内部返回一个接受obj参数的匿名函数。为什么不直接定义一个isType函数，传递type、obj两个参数，判断此obj是不是type类型，多好理解。哎，不要乱想，这可是javascript高级技巧——柯里化，柯里化就是把接受多个参数的函数换成接受单一参数的函数，并返回接受余下的参数的新函数的技术。以后写代码也试试这酷炫吊的技巧。\n\n（四）util-events.js,简单事件机制包括绑定、解绑、触发。\n\n\tvar events = data.events = {}\n\tseajs.on = function(name, callback) {\n\t\tvar list = events[name] || (events[name] = []);\n\t\tlist.push(callback);\n\t\treturn seajs;\n\t}\n\tseajs.off = function(name, callback) {}\n\tvar emit = seajs.emit = function(name, data) {}\n\n1、将事件对象保存到seajs.data.events中；\n2、每次绑定事件时在seajs.data.events中创建name/callback键值对保存事件的宿主元素和事件处理函数。\n3、实际应用中主要使用seajs的模块化组织方式，未使用事件绑定功能\n\n（五）util-path.js\n\n\tvar doc = document\n\tvar loc = location\n\tvar cwd = dirname(loc.href)\n\tvar scripts = doc.getElementsByTagName(\"script\")\n\n\t// 得到最后一个script标签\n\tvar loaderScript = doc.getElementById(\"seajsnode\") ||\n\t    scripts[scripts.length - 1]\n\t// 最后一个script标签的请求路径，不包括文件名\n\tvar loaderDir = dirname(getScriptAbsoluteSrc(loaderScript) || cwd)\n\t// 得到指定标签的全路径\n\tfunction getScriptAbsoluteSrc(node) {}\n\t//提取路径名，如dirname(\"a/b/c.js?t=123#xx/zz\") ==> \"a/b/\"\n\tfunction dirname(path) {}\n\tfunction realpath(path) {}\n\tfunction normalize(path) {}\n\tfunction parseAlias(id) {}\n\tfunction parsePaths(id) {}\n\tfunction parseVars(id) {}\n\tfunction parseMap(uri) {}\n\tfunction addBase(id, refUri) {}\n\tfunction id2Uri(id, refUri) {}\n\n\t// 对外接口\n\tseajs.resolve = id2Uri\n\n(六)util-request.js\n\n\t//创建<link>或<script>标签，预加载后插入到页面中。\n\tfunction request(url, callback, charset) {}\n\tfunction getCurrentScript() {}\n\n（七）util-deps.js，只有一个函数，用于提取每个模块中require的文件\n\n\tfunction parseDependencies(code) {}\n\n（八）module.js 模块化的核心策略\n\n\tseajs.use = function(ids, callback) {\n\t\t//加载config中的预加载项,如jQuery\n\t\tModule.preload(function() {\n\t\t\t// ids：依赖模块或是模块本身，第三个参数为模块uri，如http://www.l99.com/_use_4，为什么要拼凑这样一个uri。\n\t\t\tModule.use(ids, callback, data.cwd + \"_use_\" + cid())\n\t\t})\n\t\treturn seajs\n\t}\n\t//获取模块缓存或创建一个新的模块\n\tModule.use = function (ids, callback, uri) {}\n\t//加载模块、并设置相应的状态、_waitings、_remain\n\tModule.prototype.load = function() {}\n\t//得到最终的调用模块的uris\n\tModule.prototype.resolve = function() {}\n\t//通过id和refUri得到最终的uri，如\"dashboard/dashboard_inset_header\" + \n\t//\"http://www.l99.com/_use_1\"=> //\"http://www.l99.com/jscmd/dashboard/dashboard_inset_header.js?v=20140305\"\n\tModule.resolve = function(id, refUri) {}\n\t//模块的构造函数\n\tfunction Module(uri, deps) {\n\t\tthis.uri = uri\n\t\tthis.dependencies = deps || []\n\t\tthis.exports = null\n\t\tthis.status = 0\n\t\t// Who depends on me\n\t\tthis._waitings = {}\n\t\t// The number of unloaded dependencies\n\t\tthis._remain = 0\n\t}\n\n。。。\n这个地方还有很多实质内容没有分析，今天先到这，专注不下去了。\n。。。\n\n（九）outro.js，将this传入闭包体global，在浏览器环境中global 是 window 对象。在 Node.js 环境中global 则是 node 环境中的 global 对象\n\n\t})(this);\n\n\n\n\n","mtime":1413281665000,"source":"source/_posts/seajs-source.md"},"jb5on1jciucbi5yg":{"_id":"jb5on1jciucbi5yg","content":"title: 【翻译】Internet Explorer：“别再叫我IE”\ndate: 2013-07-03 18:00:13\ntags: Internet Explorer 11 \n---\n原文地址：[http://www.nczonline.net/blog/2013/07/02/internet-explorer-11-dont-call-me-ie/](http://www.nczonline.net/blog/2013/07/02/internet-explorer-11-dont-call-me-ie/  at 2013-07-02) by Nicholas C. Zakas\n\n![IE11预览图](/img/ie11.png)\n\n上周，微软发布了针对Windows 8.1平台的Internet Explorer11的预览版，结束了之前关于这个备受争议的浏览器的诸多传言。我们现在知道，Internet Explorer 11有一些非常重要的细节，包括支持WebGL、预读取、预渲染、flexbox（一种布局）、突变观察者（MutationObserver，DOM4事件规范，给开发者提供一种能在某个范围内的DOM树发生变化时作出适当反应的能力）和其他的web标准。但是更有趣的是，虽然被叫为 Internet Explorer 11，但它已经不再是 IE 了。\n\n长久以来，微软第一次实质性地从Internet Explorer中删除功能，更改了user-agent字符串，似乎微软已经离开了自己的轨迹，使得无论是javascript中还是服务器端的isIE()的判断均失效，返回false。比较乐观的看法是，Internet Explorer 11终于足够支持web标准，不再需要之前那些特有的行为了。\n\n##user-agent的变化\n\n在Internet Explorer 11中，user-agent比以前更短，还有一个有趣的变化：\n\n\tMozilla/5.0 (Windows NT 6.3; Trident/7.0; rv 11.0) like Gecko\n\n对比之前的：\n\n\tMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)\n\n最关键的不同是移除了自古就有的“MSIE”字样，而且尾部附加了“like Gecko”。看来，Internet Explorer更愿意被识别成“Gecko”而不再是它自己。safari是首个标识“like Gecko”的浏览器。因此，所有嗅探“MSIE”的代码将不再有效，你可以继续嗅探“Trident”（在Internet Explorer 9中引入的）来区别Internet Explorer。Internet Explorer版本号出现在“rv”字样的后面。\n\n另外，navigator对象也发生了变化，与现存的浏览器更加混淆不清了。\n\nnavigator.appName值为Netscape（之前是\"Microsoft Internet Explorer\"）\n\nnavigator.product值为Gecko（之前没有这个属性）\n\n这像是跟开发人员耍了一个小把戏，但是这种行为确实是HTML5中指定的。navigator.product的属性值一定要是“Gecko”，navigator.appName的属性值或者是“Netscape”或者是其他指定值。奇怪的规定，但Internet Explorer 11却遵守了。此举导致通过navigator判断浏览器型号的javascript将不奏效，而且会把Internet Explorer 11认定为基于Gecko的浏览器。\n\n##document.all 和 friends\n\n从Internet Explorer 4开始，document.all在Internet Explorer中举足轻重。比起document.getElementById()，document.all是”IE式“获得元素引用的方法。尽管Internet Explorer 5 增加了对DOM的支持，document.all一直沿用到Internet Explorer 10。到了11，这个历史遗迹已经被废弃了，意味着基于document.all之上的代码可能会执行失败，尽管document.all现在还是可以工作的。（还没有被移除，但不推荐使用）\n\n另一个遗迹就是用于事件绑定的attachEvent()方法，和取消事件绑定的detachEvent()，这两个方法已经从Internet Explorer 11中移除。那么，像这样的代码，关于attachEvent的那部分已经没有意义了。\n\n\tfunction addEvent(element, type, handler) {\n\t    if (element.attachEvent) {\n\t        element.attachEvent(\"on\" + type, handler);\n\t    } else if (element.addEventListener) {\n\t        element.addEventListener(type, handler, false);\n\t    }\n\t}\n\n当然，推荐你先在标准的浏览器上测试，确保attachEvent()的移除不会对功能造成影响。然而，互联网上充斥着各种垃圾的特性检测代码，在移除attachEvent()的情况下，上述这样不错的代码会确保执行逻辑进入标准模式，而不是IE模式。\n\n##被删除的特性还有：\n\nwindow.execScript()——IE下的eval()\n\nwindow.doScroll——IE下的滚动窗口\n\nscript.onreadystatechange——IE下监听脚本是否加载完成的方法\n\nscript.readyState——IE下脚本的状态\n\ndocument.selection——IE下获取当前页面上选中的文本\n\ndocument.createStyleSheet——IE下创建样式表\n\nstyle.styleSheet——IE下对style标签中样式的引用\n\n所有这些IE特有的特性都应该用相应的标准特性来取代，如果你兼容浏览器的代码使用的是特性检测，那么这些代码将不需改变，继续工作。\n\n##结论\n\nInternet Explorer 11 看起来是Internet Explorer迄今为止最好的浏览器。通过移除了过去的错误，微软已经准备在标准浏览器上占据一席之地了。移除旧有特性、调整user-agent以确保所有网站能够继续工作，这是一个非常大的改变。如果web应用程序使用特性检测而不是浏览器嗅探的话，之前的代码应该能够在Internet Explorer 11中工作。对于服务器端使用的user-agent判断，在Internet Explorer 11对标准的完美支持下，用户也会看到一个功能完整的站点。\n\n不需要针对Internet Explorer写特殊代码的时代已经来临，我非常期待。\n\n\n","mtime":1412921190000,"source":"source/_posts/trans-ie11.md"},"hdabphxr0f0gtp42":{"_id":"hdabphxr0f0gtp42","content":"title: 【翻译】Web SQL数据库介绍\ndate: 2013-10-08 20:34:26\ntags: WEB SQL 数据库\n---\n\n原文地址：[http://html5doctor.com/introducing-web-sql-databases/](http://html5doctor.com/introducing-web-sql-databases/)\n\nWeb SQL数据库事实上不是HTML5规范的一部分，而是允许开发者构建完全成熟的web应用程序的规范套件的一部分，所以它是关于我们深入浅出的时间的。（请注意截止到11月18日W3C在Web SQL数据库规范上不再有所动作。）\n\n![websql数据库](/img/websql1.png)\n\n##箱子里是什么\n\n如果你没有从过于繁琐的规范标题中猜到，Web SQL数据库是将SQL引入到客户端的规范。如果你有后端开发的背景，那么你可能会熟悉SQL，如满身是泥的猪一样快乐。如果没有，你可能在伺处碰壁之前先了解一个SQL,Google就是你的朋友。\n\n规范基于SQLite (3.1.19)，而且来源于MySQL本身，几乎是完全一样的（很抱歉用这种笼统绝对的说法）。有关Web SQL数据库工作的一个例子，看看Twitter HTML5 chatter demo，它使用SQL WHERE子句来缩小最近关于HTML5在Twitter上的聊天。（在Safari，Chrome和Opera 10.50上运行）\n\n我要在这里说规范中的三个核心方法，：\n\n**1、openDatabase**\n**2、transaction**\n**3、executeSql**\n\n各个浏览器对此支持不一，目前只有Webkit（Safari、SafariMobile和Chrome）和Opera 10.50支持。Bruce Lawson研究员告诉我，火狐则持观望态度，因为他们觉得有一个比SQLite更好的实现（无论他们如何选择，我都希望这些方案是相似的，）。无论哪种方式，我肯定会建议你去浏览SQLite的文档中所有可用的方法。\n\n目前支持的不一致性，Webkit对这种数据库规范实施了一段时间已是既定事实，W3C上的规范现在稍稍领先于Safari中的实现，同时其他WebKit仍在追赶。另一方面，尽管Opera也只是才支持，但是它更接近规范（后面我会提到这种差异化）。接下来，让我与其共舞吧！\n\n##创建和打开数据库\n\n如果你试图打开一个不存在的数据库，API会动态创建，你也不用担心关闭数据库。要创建和打开数据库时，使用下面的代码：\n\n\tvar db = openDatabase('mydb', '1.0', 'my first database', 2 * 1024 * 1024);\n\n该方法使用四个参数，第一个参数是数据库名称，第二个参数是版本号，第三个参数是数据库描述，第四个参数是数据库大小。还缺一项功能（不确定什么时候加上）就是第五个参数——回调方法。数据库创建之后调用回调方法。没有这项功能，数据库仍然被动态创建并版本正确。\n该方法的返回值包括transaction方法，通过调用此方法执行SQL查询。\n\n##估计数据库大小\n\n通过测试，只有Safari浏览器会在创建数据库超过默认的数据库大小5MB时提示用户，提示见下图,询问是否要授予数据库权限扩展到下一级数据库大小 - 5，10，50，100和500MB。而Opera创建指定大小的数据库，可在后续修改。\n![websql数据库](/img/websql.png)\n\n##版本\n\n我可能是错的，但到目前为止测试过的一切均说明，SQL数据库中的版本是borked。问题是这样的：如果数据库升级到2.0版本（,对于1.0版本，有一些重要的schema发生变化），你怎么知道，访客是在版本1.0还是2.0？版本号是OpenDatabase方法的必需参数，所以你在打开数据库之前必须知道版本号。否则，会抛出一个异常。\n\n此外，changeVersion方法是用来改变数据库的版本的，但是在WebKit上还不完全支持，Chrome和Opera已支持。无论如何，如果我不能确定用户是在哪个版本的数据库，那么我不能升级。\n\n一种可能的解决方法是保持状态数据库，像在MySQL数据库中的‘mysql’ 的。这样的话，在这种状态数据库只会有一个版本的，在此，你会记录控制你的应用程序的任何数据库的当前版本。这是一个hack，但它奏效。\n\n##事务\n\n现在，我们已经打开数据库，我们可以创建事务。为什么使用事务而不是只运行SQL？事务使我们能够回滚。这意味着，如果一个事——-其中可能包含一个或多个SQL语句——失败了（无论是SQL或在事务处理中的代码），对数据库的更新都没有提交，就像什么都没有发生。\n\n事务中有失败和成功的回调，这样你就可以管理错误，但重要的是要明白，事务有能力回滚那些修改。事务是一个简单的功能，包含了一些代码：\n\t\n\tvar db = openDatabase('mydb', '1.0', 'my first database', 2 * 1024 * 1024);\n\tdb.transaction(function (tx) {\n\t//这里是一个事务\n\t//通过tx对象处理sql\n\t});\n\n我最近在[html5demos.com](http://html5demos.com)上传了一个demo，演示事务回滚[Web SQL database rollback demo](http://html5demos.com/database-rollback)\n每晚构建的浏览器，我们也有db.readTransaction，只允许读取在数据库上运行的语句。假设只读的readTransaction比读写的transaction有性能优势，最有可能就是在表锁定上。\n\n现在，我们已经得到了我们的事务对象（如上例中的tx），我们将要运行一些SQL！\n\n##执行SQL\n\n这是所有SQL善良的爱的漏斗.ExecuteSQL用于读写，包括SQL注入映射，并提供一个回调方法处理任何查询结果。一旦我们有一个事务对象，我们可以调用EXECUTESQL：\n\n\tvar db = openDatabase('mydb', '1.0', 'my first database', 2 * 1024 * 1024);\n\tdb.transaction(function (tx) {\n\t\ttx.executeSql('CREATE TABLE foo (id unique, text)');\n\t});\n\n这将在名为“mydb”数据库中创建一张表“foo”。需要注意的是，如果数据库中已经存在这张表，该事务失败，任何后续的SQL也不会运行。因此，我们可以用另一种事务，或者我们只能判断这张表不存在时创建，这是我现在要做的，这样就可以在同一事务中插入新的一行：\n\n\tvar db = openDatabase('mydb', '1.0', 'my first database', 2 * 1024 * 1024);\n\tdb.transaction(function (tx) {\n\t\ttx.executeSql('CREATE TABLE IF NOT EXISTS foo (id unique, text)');\n\t\ttx.executeSql('INSERT INTO foo (id, text) VALUES (1, \"synergies\")');\n\t});\n\n现在，表中有一条记录。如果我们想从用户或外部获得文本呢？我们想要确保它不能危及数据库的安全性（使用像SQL注入这种讨厌的东西）。executeSql的第二个参数给出了字段的映射关系，如下：\n\n\ttx.executeSql('INSERT INTO foo (id, text) VALUES (?, ?)', [id, userValue]);\n\nid和userValue是外部变量，分别映射到数组参数中的？。\n\n最后，如果我们要获取表中的值，可以使用一个回调获取结果：\n\n\ttx.executeSql('SELECT * FROM foo', [], function (tx, results) {\n\t\tvar len = results.rows.length, i;\n\t\tfor (i = 0; i < len; i++) {\n\t\t\talert(results.rows.item(i).text);\n\t\t}\t\n\t});\n（请注意，在这个查询中，有没有被映射的字段，但为了使用第三个参数，我需要传递一个空数组作为第二个参数。）\n\n回调返回一个transaction对象和results对象。results对象包含一个rows对象，这是一个类数组但不是一个数组。它有长度属性，可以通过results.rows.item(i)访问到每一行，这里的i是当前行的索引。例如，如果表中有name和age字段，用results.rows.item(i).age访问age字段。\n\n至此，你应该开始尝试Web SQL数据库了。我敢肯定，将会出现小型JavaScript库来帮助支持Web SQL数据库的工作。如果你想了解更多（无耻的自我推销）我刚完成了 Introducing HTML5一书的存储章节，这本书是我与同事Bruce合作的，也去看一下那个家伙！\n\nDemos\n\n[HTML5 demo showing simple database usage](http://html5demos.com/database)\n[HTML5 demonstration of a transaction rolling back](http://html5demos.com/database-rollback)\n[Demo showing time range selection using SQLite](http://rem.im/html5-tweet-time-range.html)\n\n\n","mtime":1412507941000,"source":"source/_posts/trans-websql.md"},"uhzudmsl9weyy36e":{"_id":"uhzudmsl9weyy36e","content":"title: 视力之外 心光引航\ndate: 2011-12-22 20:19:33\ntags: 无障碍 访问 盲人 视障 508\n---\n之前看了一篇文章《盲人站长深恶痛绝的onfocus=\"this.blur()\"》，讲得是网页制作中的细节给使用读屏软件的盲人或者视障人士带来的困扰。说实话，我并没有上心，对这一特殊群体完全陌生。料想他们能上网的也聊聊无几。况且，在当前环境下，对于“不盲”网民，网页的设计和实现（比如标准化、性能、用户友好）也还要很长的路要走。\n\n今天，看了一篇文章[《如果你看不见你还能编程吗？ 》](http://coolshell.cn/articles/5514.html)，讲得是StackOverflow上的一个问题[How can you program if you’re blind?](http://stackoverflow.com/questions/118984/how-can-you-program-if-youre-blind) ，这个问题的两个答案让人深深震撼。只截取一个：\n\n \n>“我是盲人，我对Windows, Mac, Linux 和 DOS有13年的编程经验了，我会的编程语言是C/C++, Python, Java, C#或是其它相似的语言，虽然问题问的是怎么来设置盲人的环境，但是我想从盲人怎么使用电脑来回答。\n有些人使用“语音环境”，如T. V. Raman程序员和Emacspeak 环境。这样的环境需要有读屏程序来监控操作系统的行为，并通过合成语音系统或是Braille display 来告诉盲人屏幕上有什么。这样一样，盲人就可以操作任何的应用程序了。\n我个人这段时候使用Visual Studio 2008（注：作者是09年回的这个贴的），用其来做一些修改。我关闭了一些VS2008的功能，如显示错误，因为这会让我分心。在加入微软以前，我都是在用notepad这样的东西开发程序。\n对于读屏软件，我需要设置一下，以便其告诉我缩进。老实说我不太关心这个事，因为VS2008对程序缩进做得很好。但是对于Python来说，这个功能相当重要。最终，Emacspeak 可以使用不同的声音来让我区分缩进的语句块，以及一些语法（关键词，注释，标识，等等。）。”\n\n\n还提到了一个Google的盲人程序员 T.V. Raman，前段时间来过北京，新京报在今年早期报道过他——[《T.V 拉蒙，互联网界也有“盲剑客” ——Google盲人工程师讲述软件设计之路》](http://epaper.bjnews.com.cn/html/2011-01/16/content_192258.htm)在这篇报道中，他经历过IBM, Adobe和Google 这三个公司，他可以在23秒内复原盲人魔方，1989年他就得到一台给盲人用的语音合成器和当时最先进的读屏软件。他现在使用电脑 没有任何障碍，他天天都上网浏览信息，他还可以使用特别的手机来看地图。\n\n* 你是否会觉得技术的力量和社会的尊重让他们和正常人一样可以使用电脑？\n* 你是否会觉得我们这些正常人是不是平时抱怨的太多了呢？还有什么理由不努力的呢？\n \n\n当然，这些是国外的个案，是开发人员。不过，淘宝的无障碍小组已经在关注这一特殊群体，邀请残联嘉宾和盲人在线的站长讨论如何帮助有障碍人士访问淘宝，享受互联网带来的价值，并已制定了一套无障碍设计标准，包括为所有非文本内容提供替代文本、内容与表现分离、所有功能可通过键盘操作、允许用户避开光敏性内容，确保内容是无障碍的或者提供一个无障碍的选项等。\n\n在淘宝上创建的全球首个盲人网店“用心创世界”的5个大学生创始人，他们由于各种原因而失明，失明后也经历了一段痛苦的历程，在淘宝志愿者的帮助下开始了他们的网上创业路。光光失明带给他们的心理打击就无法想象，他们之前的就业也必定困难重重，你第一想到的一定是盲人按摩，可为此还要上什么大学呀。\n\n“他们借助读屏软件实现网页浏览。”淘宝网的工作人员介绍说，读屏软件可以帮助他们把网页上的文字用语音的方式读出来，除了图片无法读出来以外，借助读屏软件，他们可以用耳朵来浏览网页，用虚拟鼠标来摸索按钮的位置。他们可以一个人同时跟3个顾客聊天，如果不说他们是盲人的话，在屏幕另一端的人是感觉不到什么区别的。为此，他们练就了一双特别灵敏的耳朵。\n\n向这些平凡、有身体障碍、自力更生甚至是为我们服务（之前提到的开发人员）的人致敬。我也愿意在自己有限的工作范畴（或者生活）中，为这些特殊群体尽点微薄之力。\n\n","mtime":1412512084000,"source":"source/_posts/web-accessibility.md"},"khcspbwnpy5i7b88":{"_id":"khcspbwnpy5i7b88","content":"title: 网页头部向下滚动隐藏向上滚动显示\ndate: 2014-05-29 13:45:56\ntags: 向上滚动 向下滚动\n---\n这种效果在原生APP中处处可见。向下滚动时意味着用户在寻求更多的内容，同时手机端可视区域有限，故将头部隐藏以展示更多的内容真是一件体验美好的事；向上滚动时，用户可能在寻找其他操作，故显示头部。这本身也是响应式设计的体现。今天，我们尝试把这种效果迁移到web端。\n\n**首先、头部固定**\n\t\n\tbody {\n\t  padding-top: 80px; // 头部高度固定时CSS中设置\n\t}\n\theader {\n\t  background:  #062D52;\n\t  position: fixed;\n\t  top: 0;\n\t  transition: top 0.2s ease-in-out;\n\t  width: 100%;\n\t  box-shadow: 0 3px 3px 0 rgba(6, 45, 82, 0.5); \n\t  z-index: 999;\n\t}\n\t.nav-up {\n\t  top: -80px; //头部高度固定时CSS中设置. \n\t}\n\n\n**其次、滚动事件**\n\n\tvar $header = $(\"header\");\n    var headerHeight =  $header.height();\n    var lastScrollTop = 0;\n    var delta = 5;\n    var didScroll;\n    //$(\"body\").css({\"padding-top\": headerHeight});头部高度不固定时JS中设置\n    $(window).scroll(function() {\n        didScroll = true;\n    })\n    setInterval(function() {\n        if (didScroll) {\n            scrollHeaderStickyEvent();\n            didScroll = false;\n        }\n    }, 250);\n\n    function scrollHeaderStickyEvent(){\n        var st = $(this).scrollTop();\n        // 滚动距离过小，未达到最小间距时不处理。\n        if(Math.abs(lastScrollTop - st) <= delta){\n            return;\n        }\n        // 向下滚动超过header部分时增加样式nav-up以隐藏header部分.\n        if (st > lastScrollTop && st > headerHeight){\n            // 向下滚动\n        $header.addClass(\"nav-up\");\n        //$header.css({\"top\": \"-\" + headerHeight + \"px\"}); 高度动态设置   \n        } else {\n            // 向上滚动\n            if(st + $(window).height() < $(document).height()) {\n                $header.removeClass(\"nav-up\");\n                    //$header.css({\"top\": 0}); 高度动态设置\n            }\n        }\n        lastScrollTop = st;\n    }\n\n如此使用250ms的定时器来检测是否在scroll过程中的方式我是第一次使用，而且与我的思考方向正好相反。没有想通它在性能上有什么优势，传统的做法如下：\n\n\tvar $header = $(\"header\");\n\t    var headerHeight =  $header.height();\n\t    var lastScrollTop = 0;\n\t    var stickyTimer = null;\n\t    var delta = 5;\n\t    var didScroll;\n\t    //$(\"body\").css({\"padding-top\": headerHeight});头部高度不固定时JS中设置\n\t    $(window).scroll(function() {\n\t        if(stickyTimer != null){\n\t            clearTimeout(stickyTimer);\n\t            stickyTimer = setTimeout(function(){\n\t                scrollHeaderStickyEvent();\n\t            },250)\n\t\t\t}\n\t\t\telse{\n\t\t\t    stickyTimer = setTimeout(function(){\n\t\t\t        scrollHeaderStickyEvent();\n\t\t\t\t},250)\n\t\t\t}\n\t    }\n\t    function scrollHeaderStickyEvent(){\n\t        //同上…….\n\t    }\n\n参考资料：<a href=\"https://medium.com/design-startups/67bbaae9a78c\">https://medium.com/design-startups/67bbaae9a78c</a>\n\n\n","mtime":1411797078000,"source":"source/_posts/web-header.md"},"66z8mcmuwkjjhdje":{"_id":"66z8mcmuwkjjhdje","content":"title: 悬停事件的常用方案\ndate: 2011-08-09 18:20:10\ntags: 悬停 hover mouseover\n---\n经常遇到悬停事件的问题，比如弹出层不断隐藏显示，IE下的闪动等，很头疼。这与div结构和事件机制都有很大关系。故浅显地总结一下解决方案，供大家参考。\n\n##举例一：包含结构（父子结构）\n鼠标移动到右侧头像处，显示弹出菜单。\n\n![悬停事件](/img/hover1.png)\n\n结构代码：\n\n\t<div id=\"head_setting_item\" >\n\t<!—头像-->\n\t<a id=\"nav_avatar\" href=\"#\"><img src=\"#\"/> </a>\n\t<!—弹出层-->\n\t<span id=\"head_setting_menu\" style=\"display: none;\">\n\t\t<a href=\"#\">◀ 我的飞鸽</a>\n\t\t<a href=\"#\">上传头像</a>\n\t\t<a href=\"#\">个人设置</a>\n\t\t<a href=\"#\">充值中心</a>\n\t</span>\n\t</div>\n\n原始的事件代码：\n\n\t$(\"#head_setting_item\").mousemove(function(){\n\t\t$(\"#head_setting_menu\").show();\n\t});\n\t$(\"#head_setting_item\").mouseout(function(){\n\t\t$(\"#head_setting_menu\").hide();\n\t});\n\n可以看到，mouse事件是绑定在外层div上，当从外层div移动到弹出层时，会先触发外层div的mouseout事件，再触发其mouseover事件，这种情况在ie6下会出现弹出层闪动。况且，个人认为，mousemove更多应用在拖拽事件中，此处用不合适。\n\n解决方案：\n\n\t$(\"#head_setting_item\").hover(function(){\n\t\t$(\"#head_setting_menu\").show();\n\t},function(){\n\t\t$(\"#head_setting_menu\").hide();\n\t});\n\nJquery的hover模仿悬停事件，并且解决了mouseout事件中移动到子元素上仍然触发移出事件的错误。\n\n##举例二：非包含结构\n在处理悬停事件时尽可能使用上述的包含结构，简单无闪动。但实际上有些情况，并不能做成包含结构，比如事件源是`<a>`标签，其内部不能加`<div>`标签（这一点在HTML5中得到支持）。\n\n![悬停事件](/img/hover2.png)\n\n结构代码：\n\n\t<div>\n\t\t<!—-主题缩略图-->\n\t\t<a title=”点击预览主题” class=”prf_onelist” ><img src=”#”/></a>\n\t\t<span>默认主题</span>\n\t\t<a href=”#”>预览</a>\n\t\t<a href=”#”>使用</a>\n\t\t<a href=”#”>免费</a>\n\t</div>\n\t<!—-主题简介-->\n\t<div class=”mousebox” style=”display:none”></div>\n\n事件代码：\n\n\t$(\".prf_onelist\").hover(function(){\n\t\t//鼠标悬停在主题缩略图上，显示弹出层\n\t\t$(\". mousebox \").slideDown(\"fast\");\n\t},function(e){\n\t\t//鼠标离开主题缩略图，当前往弹出层时终止事件。否则隐藏弹出层。\n\tif($(\".mousebox\")[0].contains(e.relatedTarget)){ return;}\n\t\t$(\". mousebox \").slideUp(\"slow\");\n\t});\n\t$(\".mouseBox\").hover(function(){\n\t\t//鼠标悬停于弹出层时不作处理\n\t},function(){\n\t\t//鼠标离开弹出层时隐藏\n\t$(\". mousebox \").slideUp(\"slow\");\n\t})\n\n\t//利用回溯为HTML元素定义是否包含某个特定元素的实例方法。\n\tif(typeof(HTMLElement)!=\"undefined\"){\n\t\tHTMLElement.prototype.contains=function(obj){\n\t\t\twhile(obj!=null&&typeof(obj.tagName)!=\"undefind\"){ \n\t\t\t\tif(obj==this) return true;\n\t\t\t\tobj=obj.parentNode;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t}\n","mtime":1412851735000,"source":"source/_posts/web-hover.md"},"sjlejoa0j1c06fwo":{"_id":"sjlejoa0j1c06fwo","content":"title: 主流地图API比较\ndate: 2012-05-25 21:17:03\ntags: 地图 API\n---\n空白网页中引用各地图JS，查看性能。\n\n<table><tr><td width=\"25%\"> </td><td width=\"25%\">文件大小（bytes）</td><td  width=\"25%\">加载时间（ms）</td><td  width=\"25%\">数据提供</td></tr><tr><td>Google</td><td>4,684</td><td>400</td><td></td></tr><tr><td>bing</td><td>1,041,… </td><td>4500</td><td></td></tr><tr><td>soso</td><td>156,688</td><td>200</td><td>四维(navinfo)</td></tr><tr><td>sogou</td><td>92,580</td><td>500</td><td></td></tr><tr><td>baidu</td><td>111,308</td><td>400</td><td>四维(navinfo)</td></tr></table>\n\t\t\t\t\n###Google地图\nAPI：[https://developers.google.com/maps/documentation/javascript/examples/?hl=zh-CN](https://developers.google.com/maps/documentation/javascript/examples/?hl=zh-CN)\n引用：[http://maps.googleapis.com/maps/api/js?sensor=false](http://maps.googleapis.com/maps/api/js?sensor=false)\n简介：2006年发布Maps API，v2版已废弃，现使用v3。\n* 支持Chrome、iPhone Safari和Android手机上使用\n* 不在需要API keys\n* 基于MVC（Model-View-Controller）的框架，这将减少JavaScript的下载量，并且简单易用。\n* 命名空间。所有的一切都在google.maps.*的命名空间，没有以“G”为前缀的全局变量。\n![Google地图](/img/webmap1.png)\n\n###bing地图\n引用：[http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2](http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2)\n![bing地图](/img/webmap2.png)\n\n###soso地图\nURL：[http://api.map.soso.com/](http://api.map.soso.com/)\n引用：[http://api.map.soso.com/v1.0/main.js](http://api.map.soso.com/v1.0/main.js)\n更新日志：2011-07-04 v1.0版本正式发布，最近一次修复在2012-05-15。\nAPI特色：\n* 基于MVC框架\n* 内存占用量小\n* 丰富流程的动画效果\n* 接口开发程度高\n* 兼容各种浏览器\n现称为腾讯地图，最近一次更新日志为2012-07-19 。(2014-6-11注)\n![soso地图](/img/webmap3.png)\n\n###sogou地图\n引用：[http://api.go2map.com/maps/js/api_v2.5.js](http://api.go2map.com/maps/js/api_v2.5.js)\n更新日志：2011-07-22 API 2.0发布至2012-02-14 API 2.5发布\n兼容性：\n* IE 6.0+ (Windows) 以及ie内核的其他浏览器，如：搜狗高速浏览器、遨游浏览器、360浏览器、世界之窗浏览器等。\n* Firefox 2.0+ (Windows|Mac|Linux)\n* Safari 3.1+ (Mac|Windows)\n* chrome谷歌浏览器 (Windows)\n* opera 10+ (Windows)\n![sogou地图](/img/webmap4.png)\n\n###baidu地图\nURL：[http://developer.baidu.com/map/index.html](http://developer.baidu.com/map/index.html)\n引用：[http://api.map.baidu.com/api?v=1.3](http://api.map.baidu.com/api?v=1.3)\n更新日志：有资料考证由2010-10-12 API 1.1 至 2012-04-11 API 1.3\n简介：\n* 兼容HTML4和HTML5，卡位移动互联网入口；\n* 新增定位服务、手势操作、硬件加速等功能；\n* 帮助开发者快速构建适应PC和移动环境的Web地图应用，数据更新及时、服务更加稳定；\n* 全新界面样式。\n从1.5开始需要先申请密钥。更新日志至2014-4-4。（2014-6-11注）\n![baidu地图](/img/webmap5.png)\n\n","mtime":1413212052000,"source":"source/_posts/web-map.md"},"bf461v054t887ccf":{"_id":"bf461v054t887ccf","content":"title: 从safari下的缺字符说起\ndate: 2011-12-12 20:33:01\ntags: 字体 缺字符 safari opera 兼容 浏览器\n---\n又开始做网站的opera和safari的兼容，苦难随之而来。今收了一小鬼，不料却动不得，眼看其在safari下恣意，也只好任其发展。话说一非主流MM通过QQ登录了立方网，其他浏览器都显示正常，但在safari下其个性的名字就成了乱码。\n\n![safari的缺字符](/img/safaricode.png)\n\n不要说试试改变浏览器的文本编码，unicode(UTF-8)、简体中文（GB2312）等等，一个比一个乱。再来看字体设置：`font-family：\"Microsoft Yahei\"`。难道是缺乏备用字体，陆续加了多个字体都不起作用。\n\n那我们从font-family的解释方式说起，常见的字体设置如下，\n\n\tfont-family:\"Comic Sans MS\",\"幼圆\",\"黑体\",sans-serif;\n\n按照W3C的规范，浏览器在使用这个font-family显示一个字符时，首先应寻找Comic Sans MS字体，如果找不到Comic Sans MS字体，顺序搜寻下一个字体，即“幼圆”。如果找到Comic Sans MS字体，那么浏览器在Comic Sans MS 字体中寻找这个字符，就使用Comic Sans MS 字体来显示这个字符。如果没有找到这个字符，或者这个字符对应一个缺字符（缺字符是字体文件中的一种特殊字符，用来表示字体文件中没有这个字符，通常就是显示一个方块），那么就要到下一个字体，也就是“幼圆”中继续搜寻这个字符。如此搜索整个字体表，直至搜索到这个字符为止。如果在通用字体sans-serif中也找不到这个字符的话，那么浏览器就应该显示这个字符的缺字符。那么，在一个正常的windows XP系统上，所有的中文字符都会被显示为幼圆，英文字符都被显示为Comic Sans MS字体。另外，像双引号“”这样的字符在这两种字体中都有，浏览器应该优先按照Comic Sans MS中的双引号显示。\n\n说了半天那也只是规范，“应该”，事实呢。很多事情都有“潜规则”的，IE和opera在搜索“Comic Sans MS”失效后，理应搜索幼圆字体，可实际上，并没有搜索下一个字体，甚至也没有搜索后面的黑体和sans-serif，而是直接跳到系统默认字体了——请注意，是系统默认字体，也没有使用浏览器自设的字体。Comic Sans MS明明存在双引号，也没有在opera下正确地显示，IE7至少还认了双引号。那safari呢，在第一个字体中寻找不到中文字符时，干脆显示了缺字符，于是网页就都变成了框框。据说，牛人们多次和Apple交涉，他们才最终修正了这个bug。FireFox呢，也并不完美，它不支持字体别名。于是幼圆你只能写成“幼圆”，黑体你只能写成“黑体”，而不能用他们在系统中的正式名称——YouYuan和SimHei。借此，想到一个怪异的事，opera竟然不能识别“Microsoft Yahei”，一定要是“微软雅黑”。\n\n 可见，我们是遇到了safari的bug，不是说解决了么，怎么还是这样，不解的是，为啥其他浏览器都可以在Microsoft Yahei字体中找到要显示的字符，而safari就是找不到呢，也许只有他们的工程师知道吧。\n\n还有safari的确认框——confirm，竟不支持方向键，点击\"取消\"也要点两次才行。看来在windows下果然不是本土作战，弱呀~\n\n","mtime":1412777398000,"source":"source/_posts/web-safaricode.md"},"uc5z1vcqu43bbodx":{"_id":"uc5z1vcqu43bbodx","content":"title: 一滚两动——固定显示的元素超出可视区域部分如何显示完整\ndate: 2013-11-07 20:07:58\ntags:\n---\n\n在页面布局及交互中，遇到这样一个问题：在发表文章页面有两栏布局，左侧是编辑区域，右侧为辅助功能如是否公开、添加标签、所属分类等。左侧编辑区域要求根据用户输入自动加高即内容高度不固定，右侧功能要跟随跟随左侧固定显示以便操作。问题就出现了，fix显示的元素高度超出可视区域部分如何显示完整？\n简单的示意图如下：\n![跨域请求](/img/scrollfix1.png)\n\n可见，右侧滚动条全权负责左侧内容的滚动，那如何同时负责左右两个区域的滚动呢？他们的调度顺序是怎样的？思考中。。。\n\n是不是都是这样想的呢？大致分成以下三个阶段：\n1、初始化，拖动滚动条左右侧正常滚动。\n2、右侧滚动到顶端，固定显示（fixed），左侧继续滚动。\n3、左右侧低端平行时，左右侧一起滚动。\n\n第三点恰恰是问题的切入点。效果的实现无碍都是scrollTop、height、offsetTop的计算，用代码分析一下这个过程：\n\n####1、当卷去高度大于右侧距顶端的高度，右侧固定显示，rightColFixFlag为阶段标志，值为0、1、2对应上述的三个阶段。\n\n\tif($window.scrollTop() > $rightColumn.offset().top){\n\t    if(rightColFixFlag == 0){\n\t        $rightColumn.css({\"position\": \"fixed\",\"left\": offsetLeft,\"top\": DEFAULT_TOP});//DEFAULT_TOP=0\n\t            rightColFixFlag = 1;\n\t    }\n\t}\n\telse{\n\t    $rightColumn.css({\"position\":\"static\"});\n\t    rightColFixFlag = 0;\n\t     rightTop = DEFAULT_TOP;\n\t}\n####2、 左右侧低端平行，两侧同时滚动。右侧仍为fixed显示，通过变化其top值完成滚动。\n![跨域请求](/img/scrollfix2.png)\n![跨域请求](/img/scrollfix3.png)\n\n\tif(option.rightColFixFlag == 1){\n\t    //计算左右低端之间的距离        \n\t    var distance = $leftColumn.height() + $leftColumn.offset().top - $window.scrollTop() - $rightColumn.height()\n\t    //左右侧低端平行           \n\t    if(distance  <= 0){\n\t        //计算左右侧低端平行时滚动条卷去高度。\n\t        //如果你的手劲刚刚好，某一次拖动恰好赶上这个接触点，那滚动条卷去高度就正好是$window.scrollTop()，一般情况下，你会错过这个点，使用distance修正。\n\t        fixScrollTop = $window.scrollTop() + distance;\n\t        rightColFixFlag = 2;\n\t      }\n\t}\n\tif(option.rightColFixFlag == 2){\n\t    //计算右侧的top值，为相邻两次滚动的差值。\n\t    rightTop -= ($window.scrollTop() - fixScrollTop);\n\t    fixScrollTop = $window.scrollTop();\n\t    //计算左侧低端距离页面低端的高度\n\t    offsetBot = $document.height() - $leftColumn.offset().top - $leftColumn.height();\n\t    //计算右侧top的下限值\n\t    rightColEndTop = $window.height() - $rightColumn.height() - offsetBot;\n\t    //判断右侧top值处于哪个区间，(-∞，rightColEndTop]或(rightColEndTop，DEFAULT_TOP)或(DEFAULT_TOP，+∞)\n        if(rightTop <= rightColEndTop){\n                //右侧top值达到下限\n              option.$rightColumn.css({\"top\": option.rightColEndTop});\n        }\n        if(rightColEndTop < rightTop < DEFAULT_TOP){\n                $rightColumn.css({\"top\": option.rightTop});\n        }\n        if(rightTop > DEFAULT_TOP){\n            //右侧top值达到上限\n            $rightColumn.css({\"top\": DEFAULT_TOP});\n            rightColFixFlag = 1;\n            rightTop = DEFAULT_TOP;\n        }\n        //rightTop==DEFAULT_TOP，disatance=0，滚动条正好滚动至左右侧底端平齐，可不做调整。\n\t}\n![跨域请求](/img/scrollfix4.png)\n\n","mtime":1411820124000,"source":"source/_posts/web-scrollfix.md"},"imgzxp957rvuykps":{"_id":"imgzxp957rvuykps","content":"title: 字符串连接方法在不同浏览器中的性能比较\ndate: 2011-9-16 13:50:44\ntags: 字符串连接 浏览器 数组 join\n---\n字符串连接方法在不同浏览器中的性能比较：\n\n1. +=连接符：\n\n\t\tvar str = '';\n\t\tstr += '<div style=\"display:none;\" id=\"head_app_menu\">';\n\t\tstr += '</div>';\n\n2. +连接符\n\n\t\tvar str = '';\n\t\tstr = str + '<div style=\"display:none;\" id=\"head_app_menu\">';\n\t\tstr = str + '</div>';\n\n3. Array.prototype.join()\n\t\n\t\tvar str = [];\n\t\tstr.push('<div style=\"display:none;\" id=\"head_app_menu\">');\n\t\tstr.push('</div>');\n\t\tstr.join(“”);\n\n![字符串连接](/img/strjoin.png)\n\n分析：我们常用的join方法只是在IE6和IE7下有很大的性能提升，在更高版本的IE、FF、chrome下反而是降低性能的。不过，按我们现在情况下的字符串连接数（肯定是1000次循环以下），在其他浏览器有微小的消耗外，用join提升IE6、7还是最优方案。","mtime":1412849358000,"source":"source/_posts/web-strjoin.md"},"1alvk2lu1iz9bz5s":{"_id":"1alvk2lu1iz9bz5s","content":"title: 跨浏览器纯CSS实现的三角之美\ndate: 2011-11-26 20:40:02\ntags: 浏览器 三角 arrow 纯css\n---\n小小提示框几乎充斥在网站的每个角落，有时候固定显示用以标明网站的新增功能，有的是鼠标滑过显示提示信息，有的只是单纯的指向某一段内容。这种提示框眼熟到都不想看了。\n\n百度知道:\n\n![三角之美](/img/triangle1.png)\n\n提示框在全站中应用很广泛，最简单的莫过于切图实现了。但是缺点也很明显，图片的大小一固定，内容就要受到限制，图片的颜色也会导致重用到其他页面时与当前色调不符。 所以我们要寻求一种跨浏览器的完全不用图片的实现方案。\n\n提示框大致分成两部分箭头和内容框。内容框很容易，设置背景颜色、边框和圆角半径（IE下不支持，可忽略）即可。最重要的是箭头部分。\n\n##（一）无边框正箭头\n\n先看下豆瓣的同城活动：\n\n![三角之美](/img/triangle2.png)\n\n这个灰色的不带边框的小箭头是个图片。那怎么用纯CSS实现这个箭头呢。\nCSS代码：\n\n\t\t.triangle{ \n\t\t\tposition:absolute;\n\t\t\tleft:80px;\n\t\t\ttop:-40px;\n\t\t\twidth:0;\n\t\t\theight:0;\n\t\t\tborder-right:20px solid transparent;\n\t\t\tborder-left: 20px solid transparent;\n\t\t\tborder-top:20px solid transparent;\n\t\t\tborder-bottom:20px solid #d2d2d2;\n\t\t}\n\n简写为\n\t\n\tborder-width:20px;border-style:solid;border-color: transparent  transparent  #d2d2d2\n\n**特别注意：某些IE6下不兼容，一定要将transparent中的solid改成dashed。简写繁写都没问题。主要背景色不是白色就要注意了。如果有背景色的话，transparent设置成背景色。**\n\n效果图如下：\n\n![三角之美](/img/triangle3.jpg)\n\n不用惊讶，没错，高度和宽度都设为0，只是通过设置border实现的。我们可见想象一个基准点（由于宽度和高度都为0，不能视为盒子，只能视为基准点），上下左右边框均为20px，于是构成了一个正方形，如图上图所示，基准点即为红框的中心。\n\n最关键的是，除了下边框为灰色外，其他边框均为透明。当把红框按照基准点分成四个三角形时，正好显示的是底部三角形。达到预期效果。同理，当我们想做成其他方向的箭头时，就只将那个方向的border设成颜色即可。\n\n还有一点要注意，三角常常是对于下面的内容框绝对定位，定位的起始点是红框的左上顶点，所以，top=-40px，left=80px。\n\n##（二）无边框斜箭头\n\n有时候，我们嫌这种与内容框完全对称的箭头太中规中矩，那怎么做到斜向一边的呢。如图所示。（忽略掉所有红色的线可以看到不规则箭头）\n\n![三角之美](/img/triangle4.jpg)\n\n在之前的代码基础上把右边框由20px改为10px，可以看到正箭头右偏的部分已经有了缺失，底边框填充的部分也缩小到了30px。如果将右边框继续缩小，缩小到0，我们可以想象，变成了直角三角形，直角边在右底部，也就是方框的1/8。\n\n##（三）有边框箭头\n\n其实，这种纯色无边框的提示还是不够明显，常常不能满足我们需求，就像第一张百度的图片那样，浅黄色的背景外加灰色的边框，那能不能做到呢？你可能说，箭头已经是边框来模拟的了，怎么可能再加一层border呢。\n\n点点：\n\n![三角之美](/img/triangle5.png)\n\n仔细看那个箭头，确实没有边框。由于白色和灰色的色差比较小，用户不容易发现，如果是百度的那张图，箭头没有边框那可就很丑了。（可见，使用安全色还是很重要的。可是我们的网站颜色都很不安全，很有视觉冲击力和不规则性，边边角角的要求就更高了。）\n\n其实，这个也很好解决。既然能做一个箭头，就可以做两个。。。怎么样，想到了吧。把两个三角形偏移1px的重叠。OK，如图：\n\n![三角之美](/img/triangle6.png)\n\n结构代码：\n\n\t<div class=\"content\" style=\"border:1px solid #666\">\n\t\t<div class=\"triangle\"></div>\n\t\t<div class=\"triangle-copy\"></div>\n\t</div>\n\nCSS代码：\n\n\t.triangle{\n\t\tposition:absolute;\n\t\tleft:80px;\n\t\ttop:-40px;\n\t\twidth:0;\n\t\theight:0;\n\t\tborder-right:0px solid transparent;\n\t\tborder-left: 20px solid transparent;\n\t\tborder-top:20px solid transparent;\n\t\tborder-bottom:20px solid #666;\n\t}\n\n\t.triangle-copy{\n\t\tposition:absolute;\n\t\tleft:79px;\n\t\ttop:-38px;\n\t\twidth:0;\n\t\theight:0;\n\t\tborder-right:0px solid transparent;\n\t\tborder-left: 20px solid transparent;\n\t\tborder-top:20px solid transparent;\n\t\tborder-bottom:20px solid #d2d2d2;\n\t}\n\n注意看，两个三角形是兄弟关系，不是父子关系（父子结构的样式由于基准点的复杂性很难找出规律）。三角哥哥的20px深灰色边框被三角弟弟20px的浅灰边框覆盖，弟弟的绝对定位相对哥哥下移2px，左移1px。（如果都是1px，无法露出三角哥哥的边框）。\n\n结语：看了国内几家当下很流行的网站，箭头几乎都是用图片做的。只有点点用了CSS样式实现，但也有缺憾。最后的解决方案从JQuery UI Widgets——wijmo中借鉴到的。看来，必须得多看看国外的网站和相关信息了。\n\n","mtime":1412778584000,"source":"source/_posts/web-triangle.md"},"7lxew7qwr3e634l9":{"_id":"7lxew7qwr3e634l9","content":"title: 雅虎科技频道纯图片布局的实现（上）\ndate: 2014-05-14 00:25:12\ntags: YahooTech 雅虎科技 纯图片 横向瀑布流\n---\n题外话：希望有一天做东西不再用“仿”这个字。\n首次看到<a href=\"https://www.yahoo.com/tech\" title=\"yahooTech\" target=\"blank\">雅虎科技</a>的页面，我想到的是这几个词，全屏、大胆、横向瀑布流、随机、没什么大不了的。仔细研究了一下它的页面布局之后，发现了几个细节：\n\n1. 每行显示的图片数量和布局是否有规律？\n\n\t取样了近200条数据，无明显规律。但是大概可以推断一些边界值。如每行显示2张、3张（并列3张、左1右2）、5张（左2中2右1）、6张（左1上三下二），但不限于此。图片宽度范围为300px~1000px，高度范围为260px~620px。每个区块均绝对定位，动态设置宽高和位置。Pinterest的瀑布流很早就使用这种方式定位，对页面元素的控制性更好，而我们更习惯于浮动定位。\n\n\t举个形象的故事，就像组织同学们排队，小红你站在（25,25）这个点上，小绿你站在（25+10,25）这个点上，这是绝对定位；同学们按照学号依次排列，中间间隔10cm，这是浮动。浮动不用计算每个人的位置，实现简单，但是常出现一种现象：就是后面的人一拥而上看似排好了但肯定还会陆续往后退。这种体验不好，除非明确每个人的三围，站好了就不要乱动。\n\n\t于是，我让她们每个人回家量三围，排队前都贴到衣服后面（等同于让后端获取图片宽高写入html），这样后面的同学会主动预留位置。但是还是有好些同学没有完成任务，忘记啦，家里没有尺子啦，确实量不出来啊等等。我就无语了，先排队吧。小红学号在前面，先入队站好后现场量三围，发现胖了就把后面的同学往后挤挤。小绿学号在后面，还没轮到她的时候她就量好了。所以她就不影响。\n\n\t但这影响了我们的班级形象啊，排个队都拖拖拉拉的。小红说，我们家就是没有钱买尺子啊。。。（后端同学说无法取得图片尺寸，鬼才信呢）我只好决定，没有三围的同学不再入列。话扯得有点远了，拉回来。上述的边界值是2014年4月13日统计的，现在布局有些许变化，向着可视区域内图片数量增加的方向改进。\n\n2. 无论如何改变屏幕大小，图片清晰依旧。\n\n\t响应式设计中，这种按需要尺寸加载图片的技术必然会普及，那Yahoo对每张图片都提供了那些尺寸呢？经调查，图片宽度从200px-1000px，每隔50／100提供一种尺寸。200、250、300、350、400、450、500、550、600、700、800、900、1000。（试着读一下这些数据，有没有想起《卖拐》里的情景）1000px的图片文件大小得多大啊？！随便看了一张88.4K，只有全屏的背景图我才舍得用100K左右的图片，人家不差网速呀。\n\n3. 图片上的文字遮罩\n\n\t图片上显示文字为了显示清晰，常用的解决方案就是给文字增加一层遮罩。这种遮罩过于明显很不美观，而Yahoo使用的是根据图片的主色使用渐变白或渐变黑遮罩，正好与图片很好地融合到一起。\n\n对比看一下YahooTech和两性（床上）版块的实现效果。\n\n![雅虎科技](/img/yahooTech1.jpg)\n\n![立方媒体](/img/yahooTech2.png)\n\n实现上主要有三个类，简要分析一下代码：\n\n\t//Manager类，管理Row和DataPool\n\tClass(\"RowManager\", com.lifeix.event.Listener, {\n\t    instance : null,  //单例\n\t    constructor : function(){},\n\t    //调用入口，从缓冲池DataPool中获取数据传递给showBlocks()\n\t    showMoreBlocks : function(requiredCount){}\n\t    //遍历数据，逐个插入到当前行\n\t    showBlocks : function(items){}\n\t    //获取当前Row，如果当前行数据已满则新建Row\n\t    getAvailableRow: function(items){}\n\t    //新建Row\n\t    createNewRow: function(items){}\n\t    ……\n\t}\n\n\t//Row类，实现行的基本操作\n\tClass(\"Row\", com.lifeix.event.Listener, {\n\t    constructor : function(){},\n\t    //新建一行append到页面中\n\t    init: function(){}\n\t    //每行显示二条或三条数据，逐条append到页面中。\n\t    insertItem: function(items){}\n\t    //当前行数据已满时设置，根据图片宽高计算行高。\n\t    calcuRowHeight: function(items){}\n\t    ……\n\t}\n\n\t//DataPool类，实现缓冲池的基本操作\n\tClass(\"DataPool\", com.lifeix.event.Listener, {\n\t    instance : null, //单例\n\t    constructor : function(){},\n\t    //将初始化得到的和ajax后续加载的数据均存储到缓冲池DataPool中。\n\t    refresh: function(){}\n\t    //发送ajax请求入口，过滤重复请求。\n\t    _loadMore: function(items){}\n\t    //发送ajax请求核心方法，请求后的数据存储到缓冲池DataPool中\n\t    _sendAjaxRequest: function(items){}\n\t    //从缓冲池DataPool中获取指定数量的数据\n\t    getTopItems: function(num){}\n\t    ……\n\t}\n\n","mtime":1411971499000,"source":"source/_posts/web-yahootech1.md"},"o1wsog2nuu0euula":{"_id":"o1wsog2nuu0euula","content":"title: 雅虎科技频道纯图片布局的实现（下）\ndate: 2014-06-30 13:06:38\ntags: YahooTech 雅虎科技 纯图片 横向瀑布流\n---\n\n![雅虎科技](/img/yahooTech1.jpg)\n\n上一篇主要从外观上介绍了YahooTech的布局方式，本篇着重代码实现。代码实现经历了两个版本，以下是V1.0的算法：\n\n1、 每张图片的宽度都设置为百分比，当屏幕resize时不需要额外处理。\n2、 受启发于媒体查询根据屏幕宽度设置多种区间匹配样式，故设置0~320、320~1024、1024～1600、1600~+∞四个区间。\n\n0~320：手机设备，每行只显示一个\n\n320~1024：平板设备，每行显示二个或三个。第一个宽度为30~60%，第二个宽度为20~30%，或是当第一个宽度大于50%时，第二个占满该行。否则第三个占满该行。\n\n1024~1600：桌面，每行显示三个或四个，类似上面的随机取值。\n\n1600~+∞：超大宽屏，每行显示width/400张图片，每张图片宽度为350~450的随机值。\n\n3、根据每张图片的实际宽高和显示宽度百分比计算其显示高度，并在当前行布局完成时取得当前行所有图片的最小显示高度作为当前行的显示高度。\n\n\tinsertItem : function(item)\n    {\n        var divItem = $(item);\n        var randomWidth = 0;\n        //手机端每行只显示一个\n        if(G_layout_options.clientW <= 320){\n            randomWidth = 100;\n            this.isFullROW = true;\n            this.fullNum = 1;\n        }\n        //pad端每行显示二个或三个\n        else if(G_layout_options.clientW <= 1024){\n            if(this.itemsWidth.length == 0){\n                randomWidth = Math.random() * (60 - 30) + 30;\n            }\n            else if(this.itemsWidth.length == 1){\n                if(parseInt(this.itemsWidth[0]) < 50){\n                    randomWidth = Math.random() * (30 - 20) + 20;\n                }\n                else{\n                    randomWidth = 100 - this.itemsWidth[0];\n                    this.isFullROW = true;\n                    this.fullNum = 2;\n                }\n            }\n            else if(this.itemsWidth.length == 2){\n                randomWidth = 100 - this.itemsWidth[0] - this.itemsWidth[1];\n                this.isFullROW = true;\n                this.fullNum = 3;\n            }\n        }\n        //desktop显示三个或四个\n        else if(G_layout_options.clientW <= 1600){\n            if(this.itemsWidth.length == 0){\n                randomWidth = Math.random() * (40 - 20) + 20;\n            }\n            else if(this.itemsWidth.length == 1){\n                if(parseInt(this.itemsWidth[0]) < 30){\n                    randomWidth = Math.random() * (30 - 20) + 20;\n                }\n                else{\n                    randomWidth = Math.random() * (40 - 30) + 30;\n                }\n            }\n            else if(this.itemsWidth.length == 2){\n                if(parseInt(this.itemsWidth[0] + this.itemsWidth[1]) < 60){\n                    randomWidth = Math.random() * (30 - 20) + 20;\n                }\n                else{\n                    randomWidth = 100 - this.itemsWidth[0] - this.itemsWidth[1];\n                    this.isFullROW = true;\n                    this.fullNum = 3;\n                }\n            }\n            else if(this.itemsWidth.length == 3){\n                randomWidth = 100 - this.itemsWidth[0] - this.itemsWidth[1] - this.itemsWidth[2];\n                this.isFullROW = true;\n                this.fullNum = 4;\n            }\n        }\n        //超大屏\n        else{\n            this.fullNum = parseInt(G_layout_options.contentW / 400);\n            if(this.itemsWidth.length < this.fullNum - 1){\n                randomWidth = (Math.random() * (450 - 350) + 350) / G_layout_options.contentW * 100;\n            }\n            else{\n                var itemsWidthSumTmp = 0;\n                for(var i = 0; i < this.itemsWidth.length; i++){\n                    itemsWidthSumTmp += this.itemsWidth[i];\n                }\n                randomWidth = 100 - itemsWidthSumTmp;\n                this.isFullROW = true;\n            }\n        }\n        this.itemsWidth.push(randomWidth);\n        divItem.css(\"width\", randomWidth + \"%\");\n        var that = this;\n        divItem.appendTo(this.element);\n        this.calcuRowHeight(divItem, randomWidth);\n    },\n\n\tcalcuRowHeight: function(divItem, randomWidth){\n\t        var renderHeight = parseFloat(divItem.find(\"img\").attr(\"data-height\")) * (randomWidth * (G_layout_options.contentW - 20) - 1000) / (parseFloat(divItem.find(\"img\").attr(\"data-width\")) * 100);\n\t        this.itemsHeight.push(renderHeight);\n\t        if(this.isFullROW && this.itemsHeight.length == this.fullNum){\n\t            //console.log(this.itemsHeight);\n\t            var minHeight = Math.min.apply(Math,this.itemsHeight);\n\t            this.element.css({\"height\":minHeight > 500? 500:minHeight});\n\t            //每行显示两个时重新取bigger类型图片\n\t            if(this.fullNum == 2){\n\t                this.element.find(\".content-img\").each(function(){\n\t                    $(this).attr(\"src\",$(this).attr(\"src\").replace(\"common\",\"bigger\"));\n\t                })\n\t            }\n\n\t        }\n\t    }\n\n显示效果如下图：\n\n![立方媒体](/img/yahooTech3.jpg)\n\n其实这个算法很low，基本上就是一些随机值凑数，被吐槽都是卡卡西风格，这种不顾图片实际宽高而采用随机宽度的做法太不接地气，效果也不好。于是v2.0采用了新的解决方案：\n\n1、 遍历待排列的数据块Blocks，取得一个availableRow，可能是新的一行，也可能是未满行，将当前数据块Block试插入此行。\n2、 所谓试插入，就是计算新数据插入后的当前行宽度是否超出最大宽度，超出也没有关系，顺势按比例压缩计算试插入的行高。attempHeight = MaxWith/Sum(width/height)。此时设置一个高度边界值300，当行高小于300时影响效果，故试插入失败。其余情况皆为成功。\n3、 试插入失败意味着当前行剩余空间过小，不适合再插入数据，故创建新行，新行变成了当前行。\n4、 执行DOM插入操作。\n5、 重新计算行高，并以此设置图片显示宽高，如果当前图片宽度与需要显示的宽度不符，为避免图片拉伸影响效果可重新获取对应尺寸的图片URL。排列完成后显示当前行。\n\n在此方案中图片宽度使用固定值不再使用百分比，能够更大限度地因图制宜。只是窗口resize时需要重排。最大的亮点是行高的计算的方法：attempHeight = MaxWith/Sum(width/height)，真的是很简单的四则运算提供了一个很大的突破口。\n\n\tshowBlocks : function(items)\n    {   \n        for(var i = 0; i < items.length; i++)\n        {\n            var block = items[i];\n            var row = this.getAvailableRow();\n            var rowIndex = row.getRowIndex();\n            if(!row.attemptInsertBlock(block)){\n                row = this.createNewRow();\n            };\n            row.insertBlock(block);\n        }\n    },\n\n\tgetAvailableRow : function()\n\t    {\n\t        var lastRow = this.getLastRow();\n\t        if(lastRow == null)\n\t            lastRow = this.createNewRow();\n\t        else\n\t        {\n\t            var enough = lastRow.checkFullRow();\n\t            if(enough){\n\t                lastRow = this.createNewRow();\n\t            }\n\t        }\n\t        return lastRow;\n\t    },\n\n\tattemptInsertBlock : function(block)\n\t    {   \n\t        //边界测试\n\t        if(this.rowWidth + block.width - 10 > G_layout_options.contentW){\n\t            this.rowWidth = G_layout_options.contentW;\n\t            this.attempHeight = (G_layout_options.contentW - (this.blockWidths.length + 1) * 10 ) / (this.rowRadio + block.aspectRadio);\n\t            if(this.attempHeight < 300){\n\t                this.layoutBlock();\n\t                return false;\n\t            }\n\t            return true;\n\t        }\n\t        return true;\n\t    },\n\n\tinsertBlock : function(block)\n\t    {\n\t        //更新视图\n\t        this.element.append(block.element);\n\t        //更新Model\n\t        this.blocks.push(block);\n\t        this.attempHeight = this.attempHeight == 0? block.height : this.attempHeight;\n\t        this.rowWidth += block.width + 10;\n\t        this.rowRadio += block.aspectRadio;\n\t        this.blockWidths.push(block.width);\n\t        this.blockHeights.push(block.height);\n\t        //边界测试\n\t        if(this.rowWidth - 10 > G_layout_options.contentW){\n\t            this.layoutBlock();\n\t        }\n\t    },\n\n\tlayoutBlock : function()\n    {   \n        this.rowWidth = G_layout_options.contentW;\n        this.attempHeight = (G_layout_options.contentW - this.blockWidths.length * 10 ) / this.rowRadio;\n        //设置行高\n        this.element.css({\"height\":this.attempHeight});\n        for(var i = 0; i < this.blocks.length; i++){\n            //更新Model\n            var _block = this.blocks[i];\n            _block.setContainer(this);\n            _block.height = this.attempHeight;\n            _block.width = _block.aspectRadio * this.attempHeight;\n            if(_block.width > 400){\n                _block.fetchImage = true;\n                _block.src= _block.src.replace(\"common\",\"bigger\");\n            }\n            //更新视图\n            _block.element.find(\"img\").attr(\"width\",_block.width);\n            _block.element.find(\"img\").attr(\"height\",_block.height);\n            if(_block.fetchImage){\n                _block.element.find(\"img\").attr(\"src\",_block.src);\n            }\n        }\n        this.isFullROW = true;\n        //显示当前行\n        this.show();\n    },\n\n效果图如下：\n\n![立方媒体](/img/yahooTech4.jpg)\n\n有没有觉得顿时高大上了很多，完整效果请移步：<a href=\"http://www.l99.com/media/sex\" title=\"立方媒体\" target=\"blank\">http://www.l99.com/media/sex</a>\n\n","mtime":1411971544000,"source":"source/_posts/web-yahootech2.md"},"4z6zfvedc81t5ret":{"_id":"4z6zfvedc81t5ret","content":"extends base\n\nprepend window_title\n  \n  | Archive&mdash;\n\nblock content\n  header\n    h2 Archive\n\n  ul.article-list\n    - page.posts.each(function(article){\n\n      li\n        article\n          h3\n            a(href=config.root + article.path)= article.title\n          div.meta\n            include _partial/article_meta\n\n            +date(article.date)\n\n            +category(article.categories)\n\n    - })","mtime":1411704531000,"source":"themes/jade-barebone/layout/archive.jade"},"pw8cdxre0k8rq0nh":{"_id":"pw8cdxre0k8rq0nh","content":"doctype html\nblock vars\n  - var bodyclass = null;\nhtml(lang='en')\n  head\n    include _partial/head\n  body(class=bodyclass)\n    header#page-header\n      div#masthead\n        block header\n          h1#site-title\n            a(href=config.root)= config.title\n          p#site-slogan= config.subtitle\n          \n    section#content\n      block content        \n    footer#page-footer\n      include _partial/footer","mtime":1411704531000,"source":"themes/jade-barebone/layout/base.jade"},"rrdpo9s1lcx64jof":{"_id":"rrdpo9s1lcx64jof","content":"extends base\n\nprepend window_title\n  \n  = page.category\n  | &mdash;\n\nblock content\n  header\n    h2= page.category\n\n  ul.article-list\n    - page.posts.each(function(article){\n\n      li\n        article\n          h3\n            a(href=config.root + article.path)= article.title\n          div.meta\n            include _partial/article_meta\n\n            +date(article.date)\n\n            +category(article.categories)\n\n    - })","mtime":1411704531000,"source":"themes/jade-barebone/layout/category.jade"},"a1eil17o259tdvjj":{"_id":"a1eil17o259tdvjj","content":"extends base\n\nblock content\n\n  ul.article-list\n    - page.posts.each(function(article){\n\n      li\n        article\n          h2\n            a(href=config.root + article.path)= article.title\n          div.meta\n            include _partial/article_meta\n\n            +date(article.date)\n\n            +category(article.categories)\n\n    - })\n\n  include _partial/article_list_pagination","mtime":1411745845000,"source":"themes/jade-barebone/layout/index.jade"},"ucp7rzv374tabxuk":{"_id":"ucp7rzv374tabxuk","content":"extends base\n\nprepend window_title\n  \n  = page.title\n  &mdash;\n\nappend content\n  article\n    h2= page.title\n        \n    != page.content","mtime":1411704531000,"source":"themes/jade-barebone/layout/page.jade"},"pt5trpecxrwx1hj2":{"_id":"pt5trpecxrwx1hj2","content":"extends base\n\nprepend window_title\n  \n  = page.title\n  &mdash;\n\nappend content\n  article(class=page.layout)\n    h2= page.title\n    div.meta\n      include _partial/article_meta\n\n      +date(page.date)\n\n      +category(page.categories)\n    \n    != page.content\n\n  include _partial/article_pagination","mtime":1411745854000,"source":"themes/jade-barebone/layout/post.jade"},"nssymgti16i6lnqk":{"_id":"nssymgti16i6lnqk","content":"extends base\n\nprepend window_title\n  \n  = page.title\n  &mdash;\n\nappend content\n  article(class=page.layout)\n    div.meta\n      include _partial/article_meta\n\n      +date(page.date)\n\n      +category(page.categories)\n    \n    != page.content\n\n  include _partial/article_pagination","mtime":1411704531000,"source":"themes/jade-barebone/layout/words.jade"},"thp12qn6gecxp4sx":{"_id":"thp12qn6gecxp4sx","content":"nav#article-list-pagination\n  if page.prev\n    a(href=config.root + page.prev_link, title=__(\"prev\") + ' articles')\n      | &larr; \n      = __(\"prev\") + ' articles'\n  if page.prev && page.next\n    | &emsp;\n  if page.next\n    a(href=config.root + page.next_link, title=__(\"next\") + ' articles')\n      = __(\"next\") + ' articles'\n      |  &rarr;","mtime":1411704531000,"source":"themes/jade-barebone/layout/_partial/article_list_pagination.jade"},"4xu0vltzq8cv46xf":{"_id":"4xu0vltzq8cv46xf","content":"extends base\n\nprepend window_title\n  \n  = page.title\n  &mdash;\n\nappend content\n  article(class=page.layout)\n    h2= page.title\n    div.meta\n      include _partial/article_meta\n\n      +date(page.date)\n\n      +category(page.categories)\n    \n    != page.content\n\n  include _partial/article_pagination","mtime":1411704531000,"source":"themes/jade-barebone/layout/writings.jade"},"twm36xww7xk7qjm8":{"_id":"twm36xww7xk7qjm8","content":"mixin date(date)\n  = date.format(config.date_format)\n\nmixin category(categories)\n\n  if categories.length > 0\n    |  in \n    - categories.each(function(category){\n      a(href=config.root + category.path)\n        = category.name\n      | &ensp;\n    - })","mtime":1411704531000,"source":"themes/jade-barebone/layout/_partial/article_meta.jade"},"3674insbzy8uwvca":{"_id":"3674insbzy8uwvca","content":"nav#article-pagination\n  if page.prev\n    a(href=config.root + page.prev.path, title=__(\"prev\") + ' article: ' + page.prev.title, class='prev')\n      | &larr; \n      = __(\"prev\") + ' article'\n  if page.next\n    a(href=config.root + page.next.path, title=__(\"next\") + ' article: ' + page.next.title, class='next')\n      = __(\"next\") + ' article'\n      |  &rarr;","mtime":1411704531000,"source":"themes/jade-barebone/layout/_partial/article_pagination.jade"},"0ahmbbzrl4hgi2bc":{"_id":"0ahmbbzrl4hgi2bc","content":"section\n  nav#footer-menu\n    ul\n      li\n        a(href=config.root + 'about') About\n      li\n        a(href=config.root + 'archives') Archive\n      li\n        a(href='http://github.com/widatama/hexo-jade-barebone') Source\n      li\n        a(href=theme.rss ? theme.rss : config.root + 'atom.xml') Feed","mtime":1411704531000,"source":"themes/jade-barebone/layout/_partial/footer.jade"},"a61vyev7kzcaxejq":{"_id":"a61vyev7kzcaxejq","content":"meta(charset='utf-8')\nmeta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')\nmeta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')\n\nif config.author\n  meta(name='author', content=config.author)\n\nblock page_description\n  meta(name='description', content=config.description)\n\ntitle\n  block window_title\n    = config.title\n//- link(rel='alternate', href=locals.url+'/feed.xml', type='application/rss+xml', title=locals.description)\n\nlink(href=config.root + 'img/favicon.ico', rel='icon')\n\nlink(rel='alternate', href=theme.rss ? theme.rss : config.root + 'atom.xml', title=config.title, type='application/atom.xml')\n\n//link(href='http://fonts.googleapis.com/css?family=Open+Sans:400', rel='stylesheet')\n//link(href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,600', rel='stylesheet', type='text/css')\nlink(rel='stylesheet', href=config.root + 'stylesheets/app.css')\n","mtime":1413022591000,"source":"themes/jade-barebone/layout/_partial/head.jade"},"q5bu0uo4coluswsh":{"_id":"q5bu0uo4coluswsh","content":"<!DOCTYPE html>\n<!-- saved from url=(0046)http://localhost:4000/2014/03/17/seajs-source/ -->\n<html lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"><meta name=\"author\" content=\"枫桥\"><meta name=\"description\"><title>seajs源码解析—枫桥夜泊</title><link href=\"http://localhost:4000/img/favicon.ico\" rel=\"icon\"><link rel=\"alternate\" href=\"http://localhost:4000/atom.xml\" title=\"枫桥夜泊\" type=\"application/atom.xml\"><!--link(href='http://fonts.googleapis.com/css?family=Open+Sans:400', rel='stylesheet')--><!--link(href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,600', rel='stylesheet', type='text/css')--><link rel=\"stylesheet\" href=\"http://localhost:4000/stylesheets/app.css\"></head><body><header id=\"page-header\"><div id=\"masthead\"><h1 id=\"site-title\"><a href=\"http://localhost:4000/\">枫桥夜泊</a></h1><p id=\"site-slogan\">梦想走着走着就丢了 只想充实地过每一天 每天都有挑战</p></div></header><section id=\"content\"><article class=\"post\"><h2>seajs源码解析</h2><div class=\"meta\">Mar 17 2014</div><p>关于seajs的源码解析玉伯自己也只写了两篇<a href=\"http://chuansongme.com/n/124571\" target=\"_blank\" rel=\"external\">http://chuansongme.com/n/124571</a>、<a href=\"http://chuansongme.com/n/126184\" target=\"_blank\" rel=\"external\">http://chuansongme.com/n/126184</a>，去年订阅他的微信号后就已拜读过。讲述了目录结构、大闭包等这些表面的细节，还未真正写到精髓，就没有了。最近项目中应用了seajs，模块化改造也并不复杂，腾出时间专门看看源码。<br>下载个seajs，src目录如下：</p>\n<pre><code><span class=\"comment\">src</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">intro</span><span class=\"string\">.</span><span class=\"comment\">js</span>             <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">全局闭包头部</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">sea</span><span class=\"string\">.</span><span class=\"comment\">js</span>               <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">基本命名空间</span>\n\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">util</span><span class=\"literal\">-</span><span class=\"comment\">lang</span><span class=\"string\">.</span><span class=\"comment\">js</span>         <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">语言增强</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">util</span><span class=\"literal\">-</span><span class=\"comment\">events</span><span class=\"string\">.</span><span class=\"comment\">js</span>       <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">简易事件机制</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">util</span><span class=\"literal\">-</span><span class=\"comment\">path</span><span class=\"string\">.</span><span class=\"comment\">js</span>         <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">路径处理</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">util</span><span class=\"literal\">-</span><span class=\"comment\">request</span><span class=\"string\">.</span><span class=\"comment\">js</span>      <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">HTTP</span> <span class=\"comment\">请求</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">util</span><span class=\"literal\">-</span><span class=\"comment\">deps</span><span class=\"string\">.</span><span class=\"comment\">js</span>         <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">依赖提取</span>\n\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">module</span><span class=\"string\">.</span><span class=\"comment\">js</span>            <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">核心代码</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">config</span><span class=\"string\">.</span><span class=\"comment\">js</span>            <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">配置</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">outro</span><span class=\"string\">.</span><span class=\"comment\">js</span>             <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">全局闭包尾部</span>\n</code></pre><p>Dist目录中的sea-debug.js就是上述文件按顺序合并而成，未压缩代码行900+，按模块回顾下吧。</p>\n<p>intro.js，只是一个包装而且是个上包装，下包装见outro.js。</p>\n<pre><code>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(global, undefined)</span> {</span>\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">global</span>.seajs) {\n        <span class=\"keyword\">return</span>\n    }\n</code></pre><p>jQuery的包装器基本也是这样：</p>\n<pre><code>(<span class=\"keyword\">function</span>(window, undefined) {\n    var jQuery ＝  <span class=\"keyword\">...</span>\n    <span class=\"keyword\">...</span>\n    window.jQuery = window.$ = jQuery;\n})(window);\n</code></pre><p>注意两点：<br>1、自调用匿名函数创建了一个闭包，该作用域中的代码不会破坏和污染全局变量，这是任何一个javasript库所必备的功能。<br>2、jQuery传递是window参数，seajs传递的是global参数，作者说，“在浏览器环境中，global 是 window 对象。在 Node.js 环境中，global 则是 node 环境中的 global 对象。这是一个跨平台的兼容式写法。”<br>3、传入undefined参数是为了确保undefined的值是undefined，避免被低版本浏览器通过window.undefined＝“”这样的赋值语句重写。<br>3、传入window、undefined参数有一个共通原因是可以使其变为局部变量，这样在jQuery代码块中访问它时，不需要将作用域回退到顶层作用域，更快地访问到window对象。同时局部变量可以进行压缩优化，压缩为一个字符，也省不少字节。<br>sea.js，确保全局环境中只有一个seajs，events、。。。等均保存在data中。</p>\n<pre><code><span class=\"built_in\">var</span> seajs <span class=\"subst\">=</span> <span class=\"built_in\">global</span><span class=\"built_in\">.</span>seajs <span class=\"subst\">=</span> {\n    <span class=\"comment\">// The current version of Sea.js being used</span>\n    version: <span class=\"string\">\"2.1.1\"</span>\n}\n<span class=\"built_in\">var</span> <span class=\"built_in\">data</span> <span class=\"subst\">=</span> seajs<span class=\"built_in\">.</span><span class=\"built_in\">data</span> <span class=\"subst\">=</span> {}\n</code></pre><p>util-lang.js</p>\n<pre><code><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isType</span><span class=\"params\">(type)</span> {</span>\n    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(obj)</span> {</span>\n        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">\"[object \"</span> + type + <span class=\"string\">\"]\"</span>\n    }\n}\n<span class=\"keyword\">var</span> isObject = isType(<span class=\"string\">\"Object\"</span>)\n<span class=\"keyword\">var</span> isString = isType(<span class=\"string\">\"String\"</span>)\n<span class=\"keyword\">var</span> isArray = <span class=\"built_in\">Array</span>.isArray || isType(<span class=\"string\">\"Array\"</span>)\n<span class=\"keyword\">var</span> isFunction = isType(<span class=\"string\">\"Function\"</span>)\n\n<span class=\"keyword\">var</span> _cid = <span class=\"number\">0</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cid</span><span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">return</span> _cid++\n}\n</code></pre><p>util-events.js,简单事件机制包括绑定、解绑、触发。</p>\n<pre><code>var <span class=\"keyword\">events</span> = <span class=\"transposed_variable\">data.</span><span class=\"keyword\">events</span> = <span class=\"cell\">{}</span>\n<span class=\"transposed_variable\">seajs.</span>on = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name, callback)</span> {}</span>\n<span class=\"transposed_variable\">seajs.</span>off = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name, callback)</span> {}</span>\nvar emit = <span class=\"transposed_variable\">seajs.</span>emit = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name, data)</span> {}</span>\n</code></pre><p>util-path.js</p>\n<pre><code><span class=\"keyword\">var</span> doc = document\n<span class=\"keyword\">var</span> loc = location\n<span class=\"keyword\">var</span> cwd = dirname(loc.href)\n<span class=\"keyword\">var</span> scripts = doc.getElementsByTagName(<span class=\"string\">\"script\"</span>)\n\n<span class=\"comment\">// 得到最后一个script标签</span>\n<span class=\"keyword\">var</span> loaderScript = doc.getElementById(<span class=\"string\">\"seajsnode\"</span>) ||\n    scripts[scripts.length - <span class=\"number\">1</span>]\n<span class=\"comment\">// 最后一个script标签的请求路径，不包括文件名</span>\n<span class=\"keyword\">var</span> loaderDir = dirname(getScriptAbsoluteSrc(loaderScript) || cwd)\n<span class=\"comment\">// 得到指定标签的全路径</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScriptAbsoluteSrc</span><span class=\"params\">(node)</span> {</span>}\n<span class=\"comment\">//提取路径名，如dirname(\"a/b/c.js?t=123#xx/zz\") ==&gt; \"a/b/\"</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dirname</span><span class=\"params\">(path)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">realpath</span><span class=\"params\">(path)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalize</span><span class=\"params\">(path)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseAlias</span><span class=\"params\">(id)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parsePaths</span><span class=\"params\">(id)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseVars</span><span class=\"params\">(id)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseMap</span><span class=\"params\">(uri)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addBase</span><span class=\"params\">(id, refUri)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">id2Uri</span><span class=\"params\">(id, refUri)</span> {</span>}\n\n<span class=\"comment\">// 对外接口</span>\nseajs.resolve = id2Uri\n</code></pre><p>util-request.js</p>\n<pre><code>//创建<span class=\"tag\">&lt;<span class=\"title\">link</span>&gt;</span>或<span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">标签，预加载后插入到页面中。\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url, callback, charset)</span> {</span>}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentScript</span><span class=\"params\">()</span> {</span>}</span>\n</code></pre><p>util-deps.js，只有一个函数，用于提取每个模块中require的文件</p>\n<pre><code><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseDependencies</span><span class=\"params\">(code)</span> {</span>}\n</code></pre><p>module.js 模块化的核心策略</p>\n<pre><code>seajs.<span class=\"keyword\">use</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(ids, callback)</span> {</span>\n    <span class=\"comment\">//加载config中的预加载项</span>\n    Module.preload(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span>\n        <span class=\"comment\">// ids：依赖模块或是模块本身，第三个参数为模块uri，如</span>\n        http:<span class=\"comment\">//www.l99.com/_use_4，为什么要拼凑这样一个uri。</span>\n        Module.<span class=\"keyword\">use</span>(ids, callback, data.cwd + <span class=\"string\">\"_use_\"</span> + cid())\n    })\n    <span class=\"keyword\">return</span> seajs\n}\n<span class=\"comment\">//获取模块缓存或创建一个新的模块</span>\nModule.<span class=\"keyword\">use</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(ids, callback, uri)</span> {</span>}\n<span class=\"comment\">//加载模块、并设置相应的状态、_waitings、_remain</span>\nModule.prototype.load = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span>}\n<span class=\"comment\">//得到最终的调用模块的uris</span>\nModule.prototype.resolve = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span>}\n<span class=\"comment\">//通过id和refUri得到最终的uri，如\"dashboard/dashboard_inset_header\" + </span>\n<span class=\"comment\">//\"http://www.l99.com/_use_1\"=&gt; //\"http://www.l99.com/jscmd/dashboard/dashboard_inset_header.js?v=20140305\"</span>\nModule.resolve = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(id, refUri)</span> {</span>}\n<span class=\"comment\">//模块的构造函数</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span><span class=\"params\">(uri, deps)</span> {</span>\n    <span class=\"keyword\">this</span>.uri = uri\n    <span class=\"keyword\">this</span>.dependencies = deps || []\n    <span class=\"keyword\">this</span>.exports = <span class=\"literal\">null</span>\n    <span class=\"keyword\">this</span>.status = <span class=\"number\">0</span>\n    <span class=\"comment\">// Who depends on me</span>\n    <span class=\"keyword\">this</span>._waitings = {}\n    <span class=\"comment\">// The number of unloaded dependencies</span>\n    <span class=\"keyword\">this</span>._remain = <span class=\"number\">0</span>\n}\n</code></pre><p>。。。<br>这个地方还有很多实质内容没有分析，今天先到这，专注不下去了。<br>。。。</p>\n<p>outro.js，将this传入闭包体global，在浏览器环境中global 是 window 对象。在 Node.js 环境中global 则是 node 环境中的 global 对象</p>\n<pre><code>})(<span class=\"keyword\">this</span>);\n</code></pre></article><nav id=\"article-pagination\"><a href=\"http://localhost:4000/2014/03/29/h5-collapse/\" title=\"Previous article: HTML5移动开发中菜单如何左右折叠\" class=\"prev\">← Previous article</a><a href=\"http://localhost:4000/2014/03/01/h5-specs/\" title=\"Next article: 移动端浏览器下页面制作规范\" class=\"next\">Next article →</a></nav></section><footer id=\"page-footer\"><section><nav id=\"footer-menu\"><ul><li><a href=\"http://localhost:4000/about\">About</a></li><li><a href=\"http://localhost:4000/archives\">Archive</a></li><li><a href=\"http://github.com/widatama/hexo-jade-barebone\">Source</a></li><li><a href=\"http://localhost:4000/atom.xml\">Feed</a></li></ul></nav></section></footer></body></html>","mtime":1413273793000,"source":"source/img/seajs源码解析—枫桥夜泊.html"}}}